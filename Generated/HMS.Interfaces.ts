/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');


export enum KnownConfigurationScreen {
    StaffDirectory = "StaffDirectory",
    ItemFeesEditor = "ItemFeesEditor",
    LetterTemplateManagement = "LetterTemplateManagement",
    NotificationManager = "NotificationManager",
    ListManager = "ListManager",
    IncomingApproval = "IncomingApproval",
    TaskList = "TaskList",
    InternalReview = "InternalReview",
    InitialContact = "InitialContact",
    ManualMatching = "ManualMatching",
}

export enum GotoPatientAndArea {
    Demographics = "Demographics",
    Bookings = "Bookings",
    Documents = "Documents",
    MedicalRecords = "MedicalRecords",
    PatientManagement = "PatientManagement",
    TransactionListing = "TransactionListing",
    CurrentTab = "CurrentTab",
    ClinicalSummary = "ClinicalSummary",
    JustUpdatePatient = "JustUpdatePatient",
}

export enum SendFileAction {
    None = "None",
    Open = "Open",
    Print = "Print",
    ForceSave = "ForceSave",
}

export class SendFileMessage implements ISendFileMessage {
    requestId?: string | null;
    action!: SendFileAction;
    data?: string | null;
    mimeType?: string | null;
    filename?: string | null;

    constructor(data?: ISendFileMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"] !== undefined ? _data["requestId"] : <any>null;
            this.action = _data["action"] !== undefined ? _data["action"] : <any>null;
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
            this.mimeType = _data["mimeType"] !== undefined ? _data["mimeType"] : <any>null;
            this.filename = _data["filename"] !== undefined ? _data["filename"] : <any>null;
        }
    }

    static fromJS(data: any): SendFileMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SendFileMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId !== undefined ? this.requestId : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        data["mimeType"] = this.mimeType !== undefined ? this.mimeType : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        return data; 
    }
}

export interface ISendFileMessage {
    requestId?: string | null;
    action: SendFileAction;
    data?: string | null;
    mimeType?: string | null;
    filename?: string | null;
}

export class SendPatientConnectLetterMessage implements ISendPatientConnectLetterMessage {
    requestId?: string | null;
    action!: SendFileAction;
    data?: string | null;
    mimeType?: string | null;
    filename?: string | null;
    moveToNextCycle!: boolean;

    constructor(data?: ISendPatientConnectLetterMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"] !== undefined ? _data["requestId"] : <any>null;
            this.action = _data["action"] !== undefined ? _data["action"] : <any>null;
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
            this.mimeType = _data["mimeType"] !== undefined ? _data["mimeType"] : <any>null;
            this.filename = _data["filename"] !== undefined ? _data["filename"] : <any>null;
            this.moveToNextCycle = _data["moveToNextCycle"] !== undefined ? _data["moveToNextCycle"] : <any>null;
        }
    }

    static fromJS(data: any): SendPatientConnectLetterMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SendPatientConnectLetterMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId !== undefined ? this.requestId : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        data["mimeType"] = this.mimeType !== undefined ? this.mimeType : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["moveToNextCycle"] = this.moveToNextCycle !== undefined ? this.moveToNextCycle : <any>null;
        return data; 
    }
}

export interface ISendPatientConnectLetterMessage {
    requestId?: string | null;
    action: SendFileAction;
    data?: string | null;
    mimeType?: string | null;
    filename?: string | null;
    moveToNextCycle: boolean;
}

export enum DashboardWidget {
    Diary = "Diary",
    Tasks = "Tasks",
    Documents = "Documents",
    Incoming = "Incoming",
    Patient = "Patient",
    InternalReview = "InternalReview",
    ClinicalRecords = "ClinicalRecords",
    InitialContact = "InitialContact",
    Triage = "Triage",
    IncomingMatching = "IncomingMatching",
    Messenger = "Messenger",
    PatientConnect = "PatientConnect",
    LocationDiary = "LocationDiary",
    ManualMatching = "ManualMatching",
    DistributionList = "DistributionList",
    IncomingRSD = "IncomingRSD",
    BillingWorksheet = "BillingWorksheet",
    NewRequest = "NewRequest",
}

export enum EquipmentTrackingScreen {
    EquipmentSummary = "EquipmentSummary",
    AssignEquipment = "AssignEquipment",
    TransactionViewer = "TransactionViewer",
    NewTransaction = "NewTransaction",
}

export enum EquipmentManagementScreen {
    EquipmentManagement = "EquipmentManagement",
    CreateEquipment = "CreateEquipment",
    EditEquipment = "EditEquipment",
    ProductManagement = "ProductManagement",
}

export class PrintReportRequest implements IPrintReportRequest {
    pSet?: string | null;
    pGroup?: string | null;
    converter?: string | null;
    argsAsJSON?: string | null;
    replyToTopic?: string | null;

    constructor(data?: IPrintReportRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pSet = _data["pSet"] !== undefined ? _data["pSet"] : <any>null;
            this.pGroup = _data["pGroup"] !== undefined ? _data["pGroup"] : <any>null;
            this.converter = _data["converter"] !== undefined ? _data["converter"] : <any>null;
            this.argsAsJSON = _data["argsAsJSON"] !== undefined ? _data["argsAsJSON"] : <any>null;
            this.replyToTopic = _data["replyToTopic"] !== undefined ? _data["replyToTopic"] : <any>null;
        }
    }

    static fromJS(data: any): PrintReportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PrintReportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pSet"] = this.pSet !== undefined ? this.pSet : <any>null;
        data["pGroup"] = this.pGroup !== undefined ? this.pGroup : <any>null;
        data["converter"] = this.converter !== undefined ? this.converter : <any>null;
        data["argsAsJSON"] = this.argsAsJSON !== undefined ? this.argsAsJSON : <any>null;
        data["replyToTopic"] = this.replyToTopic !== undefined ? this.replyToTopic : <any>null;
        return data; 
    }
}

export interface IPrintReportRequest {
    pSet?: string | null;
    pGroup?: string | null;
    converter?: string | null;
    argsAsJSON?: string | null;
    replyToTopic?: string | null;
}

export class PatientConnectExportRequest implements IPatientConnectExportRequest {
    patientConnectIds?: number[] | null;
    exportFolder?: string | null;
    filename?: string | null;
    replyToTopic?: string | null;

    constructor(data?: IPatientConnectExportRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["patientConnectIds"])) {
                this.patientConnectIds = [] as any;
                for (let item of _data["patientConnectIds"])
                    this.patientConnectIds!.push(item);
            }
            else {
                this.patientConnectIds = <any>null;
            }
            this.exportFolder = _data["exportFolder"] !== undefined ? _data["exportFolder"] : <any>null;
            this.filename = _data["filename"] !== undefined ? _data["filename"] : <any>null;
            this.replyToTopic = _data["replyToTopic"] !== undefined ? _data["replyToTopic"] : <any>null;
        }
    }

    static fromJS(data: any): PatientConnectExportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatientConnectExportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.patientConnectIds)) {
            data["patientConnectIds"] = [];
            for (let item of this.patientConnectIds)
                data["patientConnectIds"].push(item);
        }
        data["exportFolder"] = this.exportFolder !== undefined ? this.exportFolder : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["replyToTopic"] = this.replyToTopic !== undefined ? this.replyToTopic : <any>null;
        return data; 
    }
}

export interface IPatientConnectExportRequest {
    patientConnectIds?: number[] | null;
    exportFolder?: string | null;
    filename?: string | null;
    replyToTopic?: string | null;
}

export class PatientConnectMailMergeRequest implements IPatientConnectMailMergeRequest {
    patientConnectIds?: number[] | null;
    replyToTopic?: string | null;
    moveToNextCycle!: boolean;

    constructor(data?: IPatientConnectMailMergeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["patientConnectIds"])) {
                this.patientConnectIds = [] as any;
                for (let item of _data["patientConnectIds"])
                    this.patientConnectIds!.push(item);
            }
            else {
                this.patientConnectIds = <any>null;
            }
            this.replyToTopic = _data["replyToTopic"] !== undefined ? _data["replyToTopic"] : <any>null;
            this.moveToNextCycle = _data["moveToNextCycle"] !== undefined ? _data["moveToNextCycle"] : <any>null;
        }
    }

    static fromJS(data: any): PatientConnectMailMergeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PatientConnectMailMergeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.patientConnectIds)) {
            data["patientConnectIds"] = [];
            for (let item of this.patientConnectIds)
                data["patientConnectIds"].push(item);
        }
        data["replyToTopic"] = this.replyToTopic !== undefined ? this.replyToTopic : <any>null;
        data["moveToNextCycle"] = this.moveToNextCycle !== undefined ? this.moveToNextCycle : <any>null;
        return data; 
    }
}

export interface IPatientConnectMailMergeRequest {
    patientConnectIds?: number[] | null;
    replyToTopic?: string | null;
    moveToNextCycle: boolean;
}

export class JobNotificationMessage implements IJobNotificationMessage {
    source?: string | null;
    jobStatus!: Status;
    message?: string | null;
    requiresAcknowledgement!: boolean;

    constructor(data?: IJobNotificationMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.source = _data["source"] !== undefined ? _data["source"] : <any>null;
            this.jobStatus = _data["jobStatus"] !== undefined ? _data["jobStatus"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.requiresAcknowledgement = _data["requiresAcknowledgement"] !== undefined ? _data["requiresAcknowledgement"] : <any>null;
        }
    }

    static fromJS(data: any): JobNotificationMessage {
        data = typeof data === 'object' ? data : {};
        let result = new JobNotificationMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["jobStatus"] = this.jobStatus !== undefined ? this.jobStatus : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["requiresAcknowledgement"] = this.requiresAcknowledgement !== undefined ? this.requiresAcknowledgement : <any>null;
        return data; 
    }
}

export interface IJobNotificationMessage {
    source?: string | null;
    jobStatus: Status;
    message?: string | null;
    requiresAcknowledgement: boolean;
}

export enum Status {
    Completed = "Completed",
    Failed = "Failed",
    NotificationOnly = "NotificationOnly",
}

export class DashboardDataMessage implements IDashboardDataMessage {
    widget?: string | null;
    data?: number[] | null;

    constructor(data?: IDashboardDataMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.widget = _data["widget"] !== undefined ? _data["widget"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
            else {
                this.data = <any>null;
            }
        }
    }

    static fromJS(data: any): DashboardDataMessage {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardDataMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["widget"] = this.widget !== undefined ? this.widget : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data; 
    }
}

export interface IDashboardDataMessage {
    widget?: string | null;
    data?: number[] | null;
}

export class DashboardSubscriptionRequest implements IDashboardSubscriptionRequest {
    widgetName?: string | null;
    parameters?: string[] | null;

    constructor(data?: IDashboardSubscriptionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.widgetName = _data["widgetName"] !== undefined ? _data["widgetName"] : <any>null;
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(item);
            }
            else {
                this.parameters = <any>null;
            }
        }
    }

    static fromJS(data: any): DashboardSubscriptionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardSubscriptionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["widgetName"] = this.widgetName !== undefined ? this.widgetName : <any>null;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item);
        }
        return data; 
    }
}

export interface IDashboardSubscriptionRequest {
    widgetName?: string | null;
    parameters?: string[] | null;
}

export class SwaggerException { constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any) {  } }