/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.19.0.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ActivityLogClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateActivityLog(value: AddOrUpdateActivityLog | null): Observable<APIResponseOfAddOrUpdateActivityLogResult | null> {
        let url_ = this.baseUrl + "/api/activitylog/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateActivityLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateActivityLog(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateActivityLogResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateActivityLogResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateActivityLog(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateActivityLogResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateActivityLogResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateActivityLogResult | null>(<any>null);
    }
}

@Injectable()
export class AdmissionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateAdmission(value: AddOrUpdateAdmission | null): Observable<APIResponseOfAddOrUpdateAdmissionResult | null> {
        let url_ = this.baseUrl + "/api/admission/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateAdmission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateAdmission(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateAdmissionResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateAdmissionResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateAdmission(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateAdmissionResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateAdmissionResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateAdmissionResult | null>(<any>null);
    }

    cancelAdmission(value: CancelAdmission | null): Observable<APIResponseOfCancelAdmissionResult | null> {
        let url_ = this.baseUrl + "/api/admission/cancel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelAdmission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelAdmission(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCancelAdmissionResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCancelAdmissionResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processCancelAdmission(response: HttpResponseBase): Observable<APIResponseOfCancelAdmissionResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCancelAdmissionResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCancelAdmissionResult | null>(<any>null);
    }

    moveAdmissionOntoPatient(value: MoveAdmissionOntoPatient | null): Observable<APIResponseOfMoveAdmissionOntoPatientResult | null> {
        let url_ = this.baseUrl + "/api/admission/move";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMoveAdmissionOntoPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMoveAdmissionOntoPatient(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfMoveAdmissionOntoPatientResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfMoveAdmissionOntoPatientResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processMoveAdmissionOntoPatient(response: HttpResponseBase): Observable<APIResponseOfMoveAdmissionOntoPatientResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfMoveAdmissionOntoPatientResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfMoveAdmissionOntoPatientResult | null>(<any>null);
    }
}

@Injectable()
export class AlertClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateAlert(value: AddOrUpdateAlert | null): Observable<APIResponseOfAddOrUpdateAlertResult | null> {
        let url_ = this.baseUrl + "/api/alert/addorupdatealert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateAlert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateAlert(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateAlertResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateAlertResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateAlert(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateAlertResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateAlertResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateAlertResult | null>(<any>null);
    }

    deleteAlert(value: DeleteAlert | null): Observable<APIResponseOfDeleteAlertResult | null> {
        let url_ = this.baseUrl + "/api/alert/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAlert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAlert(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDeleteAlertResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDeleteAlertResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAlert(response: HttpResponseBase): Observable<APIResponseOfDeleteAlertResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDeleteAlertResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDeleteAlertResult | null>(<any>null);
    }

    findAlertDefinition(value: FindAlertDefinition | null): Observable<APIResponseOfFindAlertDefinitionResult | null> {
        let url_ = this.baseUrl + "/api/alert/finddefinition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindAlertDefinition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindAlertDefinition(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindAlertDefinitionResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindAlertDefinitionResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindAlertDefinition(response: HttpResponseBase): Observable<APIResponseOfFindAlertDefinitionResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindAlertDefinitionResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindAlertDefinitionResult | null>(<any>null);
    }
}

@Injectable()
export class AnnotationToolsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(formDisplay: string | null, recordSubCategory: number): Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null> {
        let url_ = this.baseUrl + "/api/AnnotationTools/Get?";
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfAnnotationToolDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfAnnotationToolDO | null>(<any>null);
    }

    save(annotationTools: AnnotationToolDO[] | null, userId: string | null, formDisplay: string | null, recordSubCategory: number): Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null> {
        let url_ = this.baseUrl + "/api/AnnotationTools/Save?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(annotationTools);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSave(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSave(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSave(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfAnnotationToolDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfAnnotationToolDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfAnnotationToolDO | null>(<any>null);
    }
}

@Injectable()
export class AssetDeviceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getTransaction(transactionId: number): Observable<APIResponseOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetTransaction?";
        if (transactionId === undefined || transactionId === null)
            throw new Error("The parameter 'transactionId' must be defined and cannot be null.");
        else
            url_ += "transactionId=" + encodeURIComponent("" + transactionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransaction(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTransaction(response: HttpResponseBase): Observable<APIResponseOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfEquipmentTransactionDO | null>(<any>null);
    }

    getPatientTransactions(patientId: number): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetPatientTransactions?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined and cannot be null.");
        else
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientTransactions(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientTransactions(response: HttpResponseBase): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfEquipmentTransactionDO | null>(<any>null);
    }

    updateTransaction(transaction: EquipmentTransactionDO | null, userPkId: string): Observable<APIResponseOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateTransaction?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transaction);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTransaction(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTransaction(response: HttpResponseBase): Observable<APIResponseOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfEquipmentTransactionDO | null>(<any>null);
    }

    createTransaction(transaction: EquipmentTransactionDO | null, userPkId: string): Observable<APIResponseOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/CreateTransaction?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transaction);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTransaction(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateTransaction(response: HttpResponseBase): Observable<APIResponseOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfEquipmentTransactionDO | null>(<any>null);
    }

    deleteTransaction(transactionId: number, userPkId: string): Observable<APIResponseOfDeleteTransactionResponseDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/DeleteTransaction?";
        if (transactionId === undefined || transactionId === null)
            throw new Error("The parameter 'transactionId' must be defined and cannot be null.");
        else
            url_ += "transactionId=" + encodeURIComponent("" + transactionId) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTransaction(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDeleteTransactionResponseDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDeleteTransactionResponseDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTransaction(response: HttpResponseBase): Observable<APIResponseOfDeleteTransactionResponseDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDeleteTransactionResponseDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDeleteTransactionResponseDO | null>(<any>null);
    }

    getAvailableEquipment(masterCategory: number): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAvailableEquipment?";
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableEquipment(response: HttpResponseBase): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfAssetDeviceDO | null>(<any>null);
    }

    getAllEquipment(masterCategory: number): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAllEquipment?";
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllEquipment(response: HttpResponseBase): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfAssetDeviceDO | null>(<any>null);
    }

    getEquipment(equipmentId: number, masterCategory: number): Observable<APIResponseOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetEquipment?";
        if (equipmentId === undefined || equipmentId === null)
            throw new Error("The parameter 'equipmentId' must be defined and cannot be null.");
        else
            url_ += "equipmentId=" + encodeURIComponent("" + equipmentId) + "&"; 
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEquipment(response: HttpResponseBase): Observable<APIResponseOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAssetDeviceDO | null>(<any>null);
    }

    createEquipment(device: AssetDeviceDO | null, userPkId: string): Observable<APIResponseOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/CreateEquipment?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(device);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateEquipment(response: HttpResponseBase): Observable<APIResponseOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAssetDeviceDO | null>(<any>null);
    }

    saveEquipment(device: AssetDeviceDO | null, userPkId: string): Observable<APIResponseOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SaveEquipment?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(device);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveEquipment(response: HttpResponseBase): Observable<APIResponseOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAssetDeviceDO | null>(<any>null);
    }

    deleteEquipment(assetId: number, userPkId: string): Observable<APIResponseOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/DeleteEquipment?";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined and cannot be null.");
        else
            url_ += "assetId=" + encodeURIComponent("" + assetId) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEquipment(response: HttpResponseBase): Observable<APIResponseOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAssetDeviceDO | null>(<any>null);
    }

    searchEquipment(criteria: PAPManagementSearchDO | null, masterCategory: number): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SearchEquipment?";
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfAssetDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearchEquipment(response: HttpResponseBase): Observable<APIResponseOfListOfAssetDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfAssetDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfAssetDeviceDO | null>(<any>null);
    }

    searchTransactionsByEquipment(criteria: PAPManagementSearchDO | null): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SearchTransactionsByEquipment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchTransactionsByEquipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchTransactionsByEquipment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearchTransactionsByEquipment(response: HttpResponseBase): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfEquipmentTransactionDO | null>(<any>null);
    }

    searchTransactions(criteria: PAPManagementSearchDO | null): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SearchTransactions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(criteria);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchTransactions(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfEquipmentTransactionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearchTransactions(response: HttpResponseBase): Observable<APIResponseOfListOfEquipmentTransactionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfEquipmentTransactionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfEquipmentTransactionDO | null>(<any>null);
    }

    getEquipmentTypes(masterCategory: number): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetEquipmentTypes?";
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEquipmentTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEquipmentTypes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEquipmentTypes(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCategoryDO | null>(<any>null);
    }

    getManufacturers(): Observable<APIResponseOfListOfInventoryCompanyDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetManufacturers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetManufacturers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetManufacturers(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCompanyDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCompanyDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetManufacturers(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCompanyDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCompanyDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCompanyDO | null>(<any>null);
    }

    getModels(masterCategory: number): Observable<APIResponseOfListOfPAPSearchModel | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetModels?";
        if (masterCategory === undefined || masterCategory === null)
            throw new Error("The parameter 'masterCategory' must be defined and cannot be null.");
        else
            url_ += "masterCategory=" + encodeURIComponent("" + masterCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetModels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetModels(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfPAPSearchModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfPAPSearchModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetModels(response: HttpResponseBase): Observable<APIResponseOfListOfPAPSearchModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfPAPSearchModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfPAPSearchModel | null>(<any>null);
    }

    getFundingSources(): Observable<APIResponseOfListOfPAPFundingSource | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetFundingSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFundingSources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFundingSources(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfPAPFundingSource | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfPAPFundingSource | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFundingSources(response: HttpResponseBase): Observable<APIResponseOfListOfPAPFundingSource | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfPAPFundingSource.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfPAPFundingSource | null>(<any>null);
    }

    getPaymentStatuses(): Observable<APIResponseOfListOfPAPPaymentStatus | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetPaymentStatuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPaymentStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPaymentStatuses(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfPAPPaymentStatus | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfPAPPaymentStatus | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPaymentStatuses(response: HttpResponseBase): Observable<APIResponseOfListOfPAPPaymentStatus | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfPAPPaymentStatus.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfPAPPaymentStatus | null>(<any>null);
    }

    getEquipmentLastLoanedPatient(equipmentId: number): Observable<APIResponseOfAssetLastLoanedPatient | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetEquipmentLastLoanedPatient?";
        if (equipmentId === undefined || equipmentId === null)
            throw new Error("The parameter 'equipmentId' must be defined and cannot be null.");
        else
            url_ += "equipmentId=" + encodeURIComponent("" + equipmentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEquipmentLastLoanedPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEquipmentLastLoanedPatient(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAssetLastLoanedPatient | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAssetLastLoanedPatient | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEquipmentLastLoanedPatient(response: HttpResponseBase): Observable<APIResponseOfAssetLastLoanedPatient | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAssetLastLoanedPatient.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAssetLastLoanedPatient | null>(<any>null);
    }

    getDetailsForCompanies(companyIDs: number[] | null): Observable<APIResponseOfListOfInventoryCompanyDetailsDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetDetailsForCompanies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(companyIDs);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetailsForCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetailsForCompanies(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCompanyDetailsDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCompanyDetailsDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDetailsForCompanies(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCompanyDetailsDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCompanyDetailsDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCompanyDetailsDO | null>(<any>null);
    }
}

@Injectable()
export class AssetManagementInventoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    createInventoryCategory(category: InventoryCategoryDO | null, userId: string | null): Observable<APIResponseOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/CreateInventoryCategory?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateInventoryCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateInventoryCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateInventoryCategory(response: HttpResponseBase): Observable<APIResponseOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryCategoryDO | null>(<any>null);
    }

    createInventoryProduct(product: InventoryProductDO | null, userId: string | null): Observable<APIResponseOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/CreateInventoryProduct?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(product);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryProductDO | null>(<any>null);
    }

    updateInventoryCategory(category: InventoryCategoryDO | null, userId: string | null): Observable<APIResponseOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateInventoryCategory?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInventoryCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInventoryCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInventoryCategory(response: HttpResponseBase): Observable<APIResponseOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryCategoryDO | null>(<any>null);
    }

    updateInventoryProduct(product: InventoryProductDO | null, userId: string | null): Observable<APIResponseOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateInventoryProduct?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(product);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryProductDO | null>(<any>null);
    }

    getInventoryCategory(categoryId: number): Observable<APIResponseOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetInventoryCategory?";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined and cannot be null.");
        else
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInventoryCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInventoryCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInventoryCategory(response: HttpResponseBase): Observable<APIResponseOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryCategoryDO | null>(<any>null);
    }

    getInventoryProduct(productId: number): Observable<APIResponseOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetInventoryProduct?";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined and cannot be null.");
        else
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryProductDO | null>(<any>null);
    }

    getAllInventoryCategory(): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAllInventoryCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllInventoryCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllInventoryCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllInventoryCategory(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCategoryDO | null>(<any>null);
    }

    getAllInventoryProduct(): Observable<APIResponseOfListOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAllInventoryProduct";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryProductDO | null>(<any>null);
    }

    getAllInventoryCompanies(): Observable<APIResponseOfListOfInventoryCompanyDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAllInventoryCompanies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllInventoryCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllInventoryCompanies(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCompanyDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCompanyDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllInventoryCompanies(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCompanyDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCompanyDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCompanyDO | null>(<any>null);
    }

    getAllInventoryCategoryClosures(): Observable<APIResponseOfListOfInventoryCategoryClosureDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAllInventoryCategoryClosures";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllInventoryCategoryClosures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllInventoryCategoryClosures(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCategoryClosureDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCategoryClosureDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllInventoryCategoryClosures(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCategoryClosureDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCategoryClosureDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCategoryClosureDO | null>(<any>null);
    }

    getInventoryProductCategory(product: InventoryProductDO | null): Observable<APIResponseOfListOfInventoryProductCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetInventoryProductCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(product);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInventoryProductCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInventoryProductCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryProductCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryProductCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInventoryProductCategory(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryProductCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryProductCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryProductCategoryDO | null>(<any>null);
    }

    deleteInventoryCategory(category: InventoryCategoryDO | null, userId: string | null): Observable<APIResponseOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/DeleteInventoryCategory?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteInventoryCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteInventoryCategory(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteInventoryCategory(response: HttpResponseBase): Observable<APIResponseOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryCategoryDO | null>(<any>null);
    }

    deleteInventoryProduct(productId: number, userId: string | null): Observable<APIResponseOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/DeleteInventoryProduct?";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined and cannot be null.");
        else
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInventoryProductDO | null>(<any>null);
    }

    searchInventoryProduct(searchTerm: InventoryProductFilterDO | null): Observable<APIResponseOfListOfInventoryProductDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SearchInventoryProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchTerm);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchInventoryProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchInventoryProduct(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryProductDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryProductDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearchInventoryProduct(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryProductDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryProductDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryProductDO | null>(<any>null);
    }

    searchInventoryCategories(searchTerm: InventoryCategoryFilterDO | null): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        let url_ = this.baseUrl + "/api/AssetManagement/SearchInventoryCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchTerm);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchInventoryCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchInventoryCategories(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfInventoryCategoryDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSearchInventoryCategories(response: HttpResponseBase): Observable<APIResponseOfListOfInventoryCategoryDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfInventoryCategoryDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfInventoryCategoryDO | null>(<any>null);
    }
}

@Injectable()
export class BillWorksheetClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getFilteredWorksheetItems(filter: BookingFilter | null): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/getfiltered";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFilteredWorksheetItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFilteredWorksheetItems(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFilteredWorksheetItems(response: HttpResponseBase): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBillWorksheetItem | null>(<any>null);
    }

    getWorksheetClaimsFromBookings(filter: BookingFilter | null, userPkId: string): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/load?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorksheetClaimsFromBookings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorksheetClaimsFromBookings(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorksheetClaimsFromBookings(response: HttpResponseBase): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBillWorksheetItem | null>(<any>null);
    }

    updateServicesForWorksheetClaim(services: BillWorksheetItem[] | null, userPkId: string, setPatientNoCharge: boolean, setInsurerNoCharge: boolean): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/servicesUpdate?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        if (setPatientNoCharge === undefined || setPatientNoCharge === null)
            throw new Error("The parameter 'setPatientNoCharge' must be defined and cannot be null.");
        else
            url_ += "setPatientNoCharge=" + encodeURIComponent("" + setPatientNoCharge) + "&"; 
        if (setInsurerNoCharge === undefined || setInsurerNoCharge === null)
            throw new Error("The parameter 'setInsurerNoCharge' must be defined and cannot be null.");
        else
            url_ += "setInsurerNoCharge=" + encodeURIComponent("" + setInsurerNoCharge) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(services);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateServicesForWorksheetClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateServicesForWorksheetClaim(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateServicesForWorksheetClaim(response: HttpResponseBase): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBillWorksheetItem | null>(<any>null);
    }

    deleteWorksheetClaim(claimId: number, userPkId: string): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/billworksheet/DeleteWorksheetClaim?";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined and cannot be null.");
        else
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWorksheetClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWorksheetClaim(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteWorksheetClaim(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    deleteService(serviceId: number): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/billworksheet/DeleteService?";
        if (serviceId === undefined || serviceId === null)
            throw new Error("The parameter 'serviceId' must be defined and cannot be null.");
        else
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteService(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteService(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteService(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    getServicesForClaim(bookingId: number, userPkId: string): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/getServicesForClaim?";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined and cannot be null.");
        else
            url_ += "bookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServicesForClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServicesForClaim(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetServicesForClaim(response: HttpResponseBase): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBillWorksheetItem | null>(<any>null);
    }

    createServiceForItemNum(claimId: number, serviceCode: string | null, feeTableId: number, coverPercentage: number | null): Observable<APIResponseOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/CreateServiceForItemNum?";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined and cannot be null.");
        else
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&"; 
        if (serviceCode === undefined)
            throw new Error("The parameter 'serviceCode' must be defined.");
        else
            url_ += "serviceCode=" + encodeURIComponent("" + serviceCode) + "&"; 
        if (feeTableId === undefined || feeTableId === null)
            throw new Error("The parameter 'feeTableId' must be defined and cannot be null.");
        else
            url_ += "feeTableId=" + encodeURIComponent("" + feeTableId) + "&"; 
        if (coverPercentage === undefined)
            throw new Error("The parameter 'coverPercentage' must be defined.");
        else
            url_ += "coverPercentage=" + encodeURIComponent("" + coverPercentage) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateServiceForItemNum(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateServiceForItemNum(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateServiceForItemNum(response: HttpResponseBase): Observable<APIResponseOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBillWorksheetItem | null>(<any>null);
    }

    updateHealthFund(claimId: number, patientId: number, userPkId: string): Observable<APIResponseOfUpdateHealthfundResponse | null> {
        let url_ = this.baseUrl + "/api/billworksheet/UpdateHealthFund?";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined and cannot be null.");
        else
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&"; 
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined and cannot be null.");
        else
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateHealthFund(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateHealthFund(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfUpdateHealthfundResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfUpdateHealthfundResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateHealthFund(response: HttpResponseBase): Observable<APIResponseOfUpdateHealthfundResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfUpdateHealthfundResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfUpdateHealthfundResponse | null>(<any>null);
    }

    updateClaimStatus(claimId: number, status: string | null, userPkId: string, method: string | null): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        let url_ = this.baseUrl + "/api/billworksheet/UpdateStatus?";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined and cannot be null.");
        else
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&"; 
        if (status === undefined)
            throw new Error("The parameter 'status' must be defined.");
        else
            url_ += "status=" + encodeURIComponent("" + status) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        if (method === undefined)
            throw new Error("The parameter 'method' must be defined.");
        else
            url_ += "method=" + encodeURIComponent("" + method) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClaimStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClaimStatus(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBillWorksheetItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateClaimStatus(response: HttpResponseBase): Observable<APIResponseOfListOfBillWorksheetItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBillWorksheetItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBillWorksheetItem | null>(<any>null);
    }

    getAuditInfoForClaim(claimId: number): Observable<APIResponseOfBillWorksheetAuditInfo | null> {
        let url_ = this.baseUrl + "/api/billworksheet/Audit?";
        if (claimId === undefined || claimId === null)
            throw new Error("The parameter 'claimId' must be defined and cannot be null.");
        else
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditInfoForClaim(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditInfoForClaim(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBillWorksheetAuditInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBillWorksheetAuditInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuditInfoForClaim(response: HttpResponseBase): Observable<APIResponseOfBillWorksheetAuditInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBillWorksheetAuditInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBillWorksheetAuditInfo | null>(<any>null);
    }

    getServicesList(feeTableId: number | null): Observable<APIResponseOfFeeTableBillItems | null> {
        let url_ = this.baseUrl + "/api/billworksheet/Services?";
        if (feeTableId === undefined)
            throw new Error("The parameter 'feeTableId' must be defined.");
        else
            url_ += "feeTableId=" + encodeURIComponent("" + feeTableId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetServicesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetServicesList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFeeTableBillItems | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFeeTableBillItems | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetServicesList(response: HttpResponseBase): Observable<APIResponseOfFeeTableBillItems | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFeeTableBillItems.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFeeTableBillItems | null>(<any>null);
    }
}

@Injectable()
export class BookingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getBooking(bookingId: number): Observable<AddBookingApiRequestParams | null> {
        let url_ = this.baseUrl + "/api/booking/get?";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined and cannot be null.");
        else
            url_ += "bookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBooking(<any>response_);
                } catch (e) {
                    return <Observable<AddBookingApiRequestParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AddBookingApiRequestParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBooking(response: HttpResponseBase): Observable<AddBookingApiRequestParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddBookingApiRequestParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddBookingApiRequestParams | null>(<any>null);
    }

    addBooking(value: AddBookingApiRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/booking/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBooking(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddBooking(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    findHealthTrackBooking(parameters: FindHealthTrackBookingRequestParameters | null): Observable<APIResponseOfNullableOfInt32 | null> {
        let url_ = this.baseUrl + "/api/booking/findmapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindHealthTrackBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindHealthTrackBooking(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNullableOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNullableOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindHealthTrackBooking(response: HttpResponseBase): Observable<APIResponseOfNullableOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNullableOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNullableOfInt32 | null>(<any>null);
    }

    addOrUpdateBookingMapping(parameters: AddOrUpdateBookingMappingRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/booking/addorupdatebookingmapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateBookingMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateBookingMapping(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateBookingMapping(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    getBookingMapping(value: GetBookingMapping | null): Observable<APIResponseOfGetBookingMappingResult | null> {
        let url_ = this.baseUrl + "/api/bookingmapping/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingMapping(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetBookingMappingResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetBookingMappingResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingMapping(response: HttpResponseBase): Observable<APIResponseOfGetBookingMappingResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetBookingMappingResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetBookingMappingResult | null>(<any>null);
    }
}

@Injectable()
export class BookingTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllRequestableBookingTypes(value: GetAllRequestableBookingTypes | null): Observable<APIResponseOfGetAllRequestableBookingTypesResult | null> {
        let url_ = this.baseUrl + "/api/bookingtype/getallrequestable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRequestableBookingTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRequestableBookingTypes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllRequestableBookingTypesResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllRequestableBookingTypesResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllRequestableBookingTypes(response: HttpResponseBase): Observable<APIResponseOfGetAllRequestableBookingTypesResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllRequestableBookingTypesResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllRequestableBookingTypesResult | null>(<any>null);
    }
}

@Injectable()
export class CardiacCTClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    fetchResultsForRecord(containerId: number): Observable<APIResponseOfCardiacContainerDO | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/FetchNormalisedResults?";
        if (containerId === undefined || containerId === null)
            throw new Error("The parameter 'containerId' must be defined and cannot be null.");
        else
            url_ += "containerId=" + encodeURIComponent("" + containerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchResultsForRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchResultsForRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchResultsForRecord(response: HttpResponseBase): Observable<APIResponseOfCardiacContainerDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCardiacContainerDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCardiacContainerDO | null>(<any>null);
    }

    saveResultsForRecord(results: CardiacContainerDO | null, username: string | null): Observable<APIResponseOfCardiacContainerDO | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/SaveResultsForRecord?";
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(results);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveResultsForRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveResultsForRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveResultsForRecord(response: HttpResponseBase): Observable<APIResponseOfCardiacContainerDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCardiacContainerDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCardiacContainerDO | null>(<any>null);
    }

    createNewRecord(testDate: Date, patientId: number, locationId: number, username: string | null): Observable<APIResponseOfCardiacContainerDO | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/CreateNewRecord?";
        if (testDate === undefined || testDate === null)
            throw new Error("The parameter 'testDate' must be defined and cannot be null.");
        else
            url_ += "testDate=" + encodeURIComponent(testDate ? "" + testDate.toJSON() : "") + "&"; 
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined and cannot be null.");
        else
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&"; 
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined and cannot be null.");
        else
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&"; 
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNewRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNewRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCardiacContainerDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateNewRecord(response: HttpResponseBase): Observable<APIResponseOfCardiacContainerDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCardiacContainerDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCardiacContainerDO | null>(<any>null);
    }

    deleteCardiacCTRecord(containerId: number, cVersion: number, username: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/DeleteCardiacCTRecord?";
        if (containerId === undefined || containerId === null)
            throw new Error("The parameter 'containerId' must be defined and cannot be null.");
        else
            url_ += "containerId=" + encodeURIComponent("" + containerId) + "&"; 
        if (cVersion === undefined || cVersion === null)
            throw new Error("The parameter 'cVersion' must be defined and cannot be null.");
        else
            url_ += "CVersion=" + encodeURIComponent("" + cVersion) + "&"; 
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCardiacCTRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCardiacCTRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCardiacCTRecord(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    fetchReportForRecord(containerId: number, cversion: number): Observable<APIResponseOfFullStructuredReportDO | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/FetchReportForRecord?";
        if (containerId === undefined || containerId === null)
            throw new Error("The parameter 'containerId' must be defined and cannot be null.");
        else
            url_ += "containerId=" + encodeURIComponent("" + containerId) + "&"; 
        if (cversion === undefined || cversion === null)
            throw new Error("The parameter 'cversion' must be defined and cannot be null.");
        else
            url_ += "cversion=" + encodeURIComponent("" + cversion) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchReportForRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchReportForRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFullStructuredReportDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFullStructuredReportDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchReportForRecord(response: HttpResponseBase): Observable<APIResponseOfFullStructuredReportDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFullStructuredReportDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFullStructuredReportDO | null>(<any>null);
    }

    saveReportForRecord(report: FullStructuredReportDO | null): Observable<APIResponseOfFullStructuredReportDO | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecord/SaveReportForRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(report);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveReportForRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveReportForRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFullStructuredReportDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFullStructuredReportDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveReportForRecord(response: HttpResponseBase): Observable<APIResponseOfFullStructuredReportDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFullStructuredReportDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFullStructuredReportDO | null>(<any>null);
    }
}

@Injectable()
export class ClinicalRecordClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getClinicalRecord(clinicalRecordId: number): Observable<APIResponseOfClinicalRecordDto | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecords/GetClinicalRecords?";
        if (clinicalRecordId === undefined || clinicalRecordId === null)
            throw new Error("The parameter 'clinicalRecordId' must be defined and cannot be null.");
        else
            url_ += "clinicalRecordId=" + encodeURIComponent("" + clinicalRecordId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClinicalRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClinicalRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfClinicalRecordDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfClinicalRecordDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetClinicalRecord(response: HttpResponseBase): Observable<APIResponseOfClinicalRecordDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfClinicalRecordDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfClinicalRecordDto | null>(<any>null);
    }
}

@Injectable()
export class SmartTextClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    smartTextInit(formDisplay: string | null, recordSubCategory: number, doctorId: number): Observable<APIResponseOfSmartTextBundle | null> {
        let url_ = this.baseUrl + "/api/SmartText/Init?";
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        if (doctorId === undefined || doctorId === null)
            throw new Error("The parameter 'doctorId' must be defined and cannot be null.");
        else
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSmartTextInit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSmartTextInit(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSmartTextBundle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSmartTextBundle | null>><any>_observableThrow(response_);
        }));
    }

    protected processSmartTextInit(response: HttpResponseBase): Observable<APIResponseOfSmartTextBundle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSmartTextBundle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSmartTextBundle | null>(<any>null);
    }

    saveSmartTextTemplate(template: SmartTextTemplate | null): Observable<APIResponseOfSmartTextTemplate | null> {
        let url_ = this.baseUrl + "/api/SmartText/SaveTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(template);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveSmartTextTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveSmartTextTemplate(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSmartTextTemplate | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSmartTextTemplate | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveSmartTextTemplate(response: HttpResponseBase): Observable<APIResponseOfSmartTextTemplate | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSmartTextTemplate.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSmartTextTemplate | null>(<any>null);
    }

    deleteSmartTextTemplate(templateId: number): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/SmartText/DeleteTemplate?";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined and cannot be null.");
        else
            url_ += "templateId=" + encodeURIComponent("" + templateId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSmartTextTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSmartTextTemplate(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteSmartTextTemplate(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    saveSmartTextPackage(smartTextPackage: SmartTextPackage | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/SmartText/SavePackage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(smartTextPackage);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveSmartTextPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveSmartTextPackage(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveSmartTextPackage(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    saveSmartTextTemplateList(templateList: SmartTextTemplateDisplayOrder[] | null, formDisplay: string | null, recordSubCategory: number): Observable<APIResponseOfListOfSmartTextTemplateDisplayOrder | null> {
        let url_ = this.baseUrl + "/api/SmartText/SaveTemplateList?";
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(templateList);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveSmartTextTemplateList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveSmartTextTemplateList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfSmartTextTemplateDisplayOrder | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfSmartTextTemplateDisplayOrder | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveSmartTextTemplateList(response: HttpResponseBase): Observable<APIResponseOfListOfSmartTextTemplateDisplayOrder | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfSmartTextTemplateDisplayOrder.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfSmartTextTemplateDisplayOrder | null>(<any>null);
    }

    getReferenceIdList(medGroup: string | null, medArea: string | null): Observable<APIResponseOfListOfReferenceIDDO | null> {
        let url_ = this.baseUrl + "/api/SmartText/GetReferenceIdList?";
        if (medGroup === undefined)
            throw new Error("The parameter 'medGroup' must be defined.");
        else
            url_ += "medGroup=" + encodeURIComponent("" + medGroup) + "&"; 
        if (medArea === undefined)
            throw new Error("The parameter 'medArea' must be defined.");
        else
            url_ += "medArea=" + encodeURIComponent("" + medArea) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferenceIdList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferenceIdList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfReferenceIDDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfReferenceIDDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferenceIdList(response: HttpResponseBase): Observable<APIResponseOfListOfReferenceIDDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfReferenceIDDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfReferenceIDDO | null>(<any>null);
    }

    getLetterTagValues(tags: string[] | null): Observable<APIResponseOfListOfHMSLetterTemplateTagValue | null> {
        let url_ = this.baseUrl + "/api/SmartText/GetLetterTagValues";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tags);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLetterTagValues(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLetterTagValues(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfHMSLetterTemplateTagValue | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfHMSLetterTemplateTagValue | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLetterTagValues(response: HttpResponseBase): Observable<APIResponseOfListOfHMSLetterTemplateTagValue | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfHMSLetterTemplateTagValue.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfHMSLetterTemplateTagValue | null>(<any>null);
    }
}

@Injectable()
export class UnitConversionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getInchesFromCentimeters(centimeters: number): Observable<APIResponseOfSingle | null> {
        let url_ = this.baseUrl + "/api/Shared/GetInchesFromCentimeters?";
        if (centimeters === undefined || centimeters === null)
            throw new Error("The parameter 'centimeters' must be defined and cannot be null.");
        else
            url_ += "centimeters=" + encodeURIComponent("" + centimeters) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInchesFromCentimeters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInchesFromCentimeters(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSingle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSingle | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInchesFromCentimeters(response: HttpResponseBase): Observable<APIResponseOfSingle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSingle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSingle | null>(<any>null);
    }

    getCentimetersFromInches(inches: number): Observable<APIResponseOfSingle | null> {
        let url_ = this.baseUrl + "/api/Shared/GetCentimetersFromInches?";
        if (inches === undefined || inches === null)
            throw new Error("The parameter 'inches' must be defined and cannot be null.");
        else
            url_ += "inches=" + encodeURIComponent("" + inches) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCentimetersFromInches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCentimetersFromInches(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSingle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSingle | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCentimetersFromInches(response: HttpResponseBase): Observable<APIResponseOfSingle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSingle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSingle | null>(<any>null);
    }

    getPoundsFromGrams(grams: number): Observable<APIResponseOfSingle | null> {
        let url_ = this.baseUrl + "/api/Shared/GetPoundsFromGrams?";
        if (grams === undefined || grams === null)
            throw new Error("The parameter 'grams' must be defined and cannot be null.");
        else
            url_ += "grams=" + encodeURIComponent("" + grams) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPoundsFromGrams(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPoundsFromGrams(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSingle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSingle | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPoundsFromGrams(response: HttpResponseBase): Observable<APIResponseOfSingle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSingle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSingle | null>(<any>null);
    }

    getGramsFromPounds(pounds: number): Observable<APIResponseOfSingle | null> {
        let url_ = this.baseUrl + "/api/Shared/GetGramsFromPounds?";
        if (pounds === undefined || pounds === null)
            throw new Error("The parameter 'pounds' must be defined and cannot be null.");
        else
            url_ += "pounds=" + encodeURIComponent("" + pounds) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGramsFromPounds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGramsFromPounds(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSingle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSingle | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetGramsFromPounds(response: HttpResponseBase): Observable<APIResponseOfSingle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSingle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSingle | null>(<any>null);
    }

    getBSAWithMosteller(height: number, weight: number): Observable<APIResponseOfSingle | null> {
        let url_ = this.baseUrl + "/api/Shared/GetBSAWithMosteller?";
        if (height === undefined || height === null)
            throw new Error("The parameter 'height' must be defined and cannot be null.");
        else
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined and cannot be null.");
        else
            url_ += "weight=" + encodeURIComponent("" + weight) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBSAWithMosteller(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBSAWithMosteller(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSingle | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSingle | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBSAWithMosteller(response: HttpResponseBase): Observable<APIResponseOfSingle | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSingle.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSingle | null>(<any>null);
    }

    calculateBMI(height: number, weight: number): Observable<APIResponseOfDouble | null> {
        let url_ = this.baseUrl + "/api/Shared/CalculateBMI?";
        if (height === undefined || height === null)
            throw new Error("The parameter 'height' must be defined and cannot be null.");
        else
            url_ += "height=" + encodeURIComponent("" + height) + "&"; 
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined and cannot be null.");
        else
            url_ += "weight=" + encodeURIComponent("" + weight) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCalculateBMI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCalculateBMI(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDouble | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDouble | null>><any>_observableThrow(response_);
        }));
    }

    protected processCalculateBMI(response: HttpResponseBase): Observable<APIResponseOfDouble | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDouble.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDouble | null>(<any>null);
    }

    getBMIDescription(bmi: number): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/Shared/GetBMIDescription?";
        if (bmi === undefined || bmi === null)
            throw new Error("The parameter 'bmi' must be defined and cannot be null.");
        else
            url_ += "bmi=" + encodeURIComponent("" + bmi) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBMIDescription(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBMIDescription(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBMIDescription(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }
}

@Injectable()
export class RecordClassificationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRecordClassifications(): Observable<APIResponseOfIEnumerableOfRecordClassification | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecordManagement/GetRecordClassifications";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecordClassifications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecordClassifications(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfRecordClassification | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfRecordClassification | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecordClassifications(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfRecordClassification | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfRecordClassification.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfRecordClassification | null>(<any>null);
    }

    updateRecordClassifications(classifications: RecordClassification[] | null): Observable<APIResponseOfRecordClassificationOf | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecordManagement/UpdateRecordClassifications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(classifications);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRecordClassifications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRecordClassifications(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRecordClassificationOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRecordClassificationOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRecordClassifications(response: HttpResponseBase): Observable<APIResponseOfRecordClassificationOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRecordClassificationOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRecordClassificationOf | null>(<any>null);
    }

    getGroupUsers(): Observable<APIResponseOfIEnumerableOfString | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecordManagement/GetGroupUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupUsers(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupUsers(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfString | null>(<any>null);
    }

    getBillingGroups(): Observable<APIResponseOfIEnumerableOfString | null> {
        let url_ = this.baseUrl + "/api/ClinicalRecordManagement/GetBillingGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBillingGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBillingGroups(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBillingGroups(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfString | null>(<any>null);
    }
}

@Injectable()
export class CodingSelectionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateCodingSelection(value: AddOrUpdateCodingSelection | null): Observable<APIResponseOfAddOrUpdateCodingSelectionResult | null> {
        let url_ = this.baseUrl + "/api/codingselection/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateCodingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateCodingSelection(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateCodingSelectionResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateCodingSelectionResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateCodingSelection(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateCodingSelectionResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateCodingSelectionResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateCodingSelectionResult | null>(<any>null);
    }

    removeCodingSelection(value: RemoveCodingSelection | null): Observable<APIResponseOfRemoveCodingSelectionResult | null> {
        let url_ = this.baseUrl + "/api/codingselection/remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCodingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCodingSelection(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRemoveCodingSelectionResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRemoveCodingSelectionResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveCodingSelection(response: HttpResponseBase): Observable<APIResponseOfRemoveCodingSelectionResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRemoveCodingSelectionResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRemoveCodingSelectionResult | null>(<any>null);
    }
}

@Injectable()
export class CompanyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCompany(companyID: number): Observable<APIResponseOfCompanyRequestParams | null> {
        let url_ = this.baseUrl + "/api/company/get?";
        if (companyID === undefined || companyID === null)
            throw new Error("The parameter 'companyID' must be defined and cannot be null.");
        else
            url_ += "companyID=" + encodeURIComponent("" + companyID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompany(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCompanyRequestParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCompanyRequestParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompany(response: HttpResponseBase): Observable<APIResponseOfCompanyRequestParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCompanyRequestParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCompanyRequestParams | null>(<any>null);
    }

    getHealthFunds(): Observable<APIResponseOfCompanyDOOf | null> {
        let url_ = this.baseUrl + "/api/companies/healthfunds";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHealthFunds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHealthFunds(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCompanyDOOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCompanyDOOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetHealthFunds(response: HttpResponseBase): Observable<APIResponseOfCompanyDOOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCompanyDOOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCompanyDOOf | null>(<any>null);
    }

    getCompanyByHL7MappingID(hl7MappingId: string | null): Observable<APIResponseOfCompanyRequestParams | null> {
        let url_ = this.baseUrl + "/api/company/getbyhl7mappingid?";
        if (hl7MappingId === undefined)
            throw new Error("The parameter 'hl7MappingId' must be defined.");
        else
            url_ += "hl7MappingId=" + encodeURIComponent("" + hl7MappingId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompanyByHL7MappingID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompanyByHL7MappingID(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfCompanyRequestParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfCompanyRequestParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCompanyByHL7MappingID(response: HttpResponseBase): Observable<APIResponseOfCompanyRequestParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfCompanyRequestParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfCompanyRequestParams | null>(<any>null);
    }

    findCompany(value: FindCompany | null): Observable<APIResponseOfFindCompanyResult | null> {
        let url_ = this.baseUrl + "/api/company/find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindCompany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindCompany(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindCompanyResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindCompanyResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindCompany(response: HttpResponseBase): Observable<APIResponseOfFindCompanyResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindCompanyResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindCompanyResult | null>(<any>null);
    }

    getAllCompanies(): Observable<APIResponseOfListOfCompanyDO | null> {
        let url_ = this.baseUrl + "/api/company/getall";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCompanies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCompanies(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfCompanyDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfCompanyDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllCompanies(response: HttpResponseBase): Observable<APIResponseOfListOfCompanyDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfCompanyDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfCompanyDO | null>(<any>null);
    }
}

@Injectable()
export class ContractFeesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getContracts(id: number): Observable<APIResponseOfIEnumerableOfContractFeeDO | null> {
        let url_ = this.baseUrl + "/api/ContractFees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetContracts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetContracts(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfContractFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfContractFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetContracts(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfContractFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfContractFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfContractFeeDO | null>(<any>null);
    }
}

@Injectable()
export class ContractsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getContracts(contractsSearch: ContractsSearch | null): Observable<APIResponseOfIEnumerableOfContractDO | null> {
        let url_ = this.baseUrl + "/api/contracts/getContracts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contractsSearch);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetContracts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetContracts(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfContractDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfContractDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetContracts(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfContractDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfContractDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfContractDO | null>(<any>null);
    }

    getContract(id: number): Observable<APIResponseOfContractDO | null> {
        let url_ = this.baseUrl + "/api/contracts/getContract?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetContract(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetContract(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfContractDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfContractDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetContract(response: HttpResponseBase): Observable<APIResponseOfContractDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfContractDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfContractDO | null>(<any>null);
    }

    saveContract(updatedContract: ContractDO | null): Observable<APIResponseOfContractDO | null> {
        let url_ = this.baseUrl + "/api/Contracts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedContract);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveContract(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveContract(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfContractDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfContractDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveContract(response: HttpResponseBase): Observable<APIResponseOfContractDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfContractDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfContractDO | null>(<any>null);
    }

    deleteContract(id: number): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Contracts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteContract(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteContract(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteContract(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class DashboardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllDashboards(): Observable<APIResponseOfListOfDashboardDO | null> {
        let url_ = this.baseUrl + "/api/Dashboard/GetAllDashboards";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDashboards(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDashboards(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfDashboardDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfDashboardDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDashboards(response: HttpResponseBase): Observable<APIResponseOfListOfDashboardDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfDashboardDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfDashboardDO | null>(<any>null);
    }

    getDashboard(dashboardId: number, userName: string | null, doctorId: number | null): Observable<APIResponseOfDashboardDO | null> {
        let url_ = this.baseUrl + "/api/Dashboard/GetDashboard?";
        if (dashboardId === undefined || dashboardId === null)
            throw new Error("The parameter 'dashboardId' must be defined and cannot be null.");
        else
            url_ += "dashboardId=" + encodeURIComponent("" + dashboardId) + "&"; 
        if (userName === undefined)
            throw new Error("The parameter 'userName' must be defined.");
        else
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (doctorId === undefined)
            throw new Error("The parameter 'doctorId' must be defined.");
        else
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDashboard(response: HttpResponseBase): Observable<APIResponseOfDashboardDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDashboardDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDashboardDO | null>(<any>null);
    }

    saveDashboard(dashboard: DashboardDO | null, userPkId: string): Observable<APIResponseOfDashboardDO | null> {
        let url_ = this.baseUrl + "/api/Dashboard/SaveDashboard?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dashboard);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveDashboard(response: HttpResponseBase): Observable<APIResponseOfDashboardDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDashboardDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDashboardDO | null>(<any>null);
    }

    updateDashboard(dashboard: DashboardDO | null, userPkId: string): Observable<APIResponseOfDashboardDO | null> {
        let url_ = this.baseUrl + "/api/Dashboard/UpdateDashboard?";
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dashboard);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDashboardDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateDashboard(response: HttpResponseBase): Observable<APIResponseOfDashboardDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDashboardDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDashboardDO | null>(<any>null);
    }

    renameDashboard(id: number, name: string | null, userPkId: string): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/Dashboard/RenameDashboard?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (name === undefined)
            throw new Error("The parameter 'name' must be defined.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRenameDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRenameDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processRenameDashboard(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    deleteDashboard(id: number, userPkId: string): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/Dashboard/DeleteDashboard?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (userPkId === undefined || userPkId === null)
            throw new Error("The parameter 'userPkId' must be defined and cannot be null.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDashboard(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    getUriForDashboard(dashboardId: number): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/Dashboard/GetUriForDashboard?";
        if (dashboardId === undefined || dashboardId === null)
            throw new Error("The parameter 'dashboardId' must be defined and cannot be null.");
        else
            url_ += "dashboardId=" + encodeURIComponent("" + dashboardId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUriForDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUriForDashboard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUriForDashboard(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }
}

@Injectable()
export class DepartmentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<APIResponseOfGetDepartmentsResult | null> {
        let url_ = this.baseUrl + "/api/departments/getall";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetDepartmentsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetDepartmentsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<APIResponseOfGetDepartmentsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetDepartmentsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetDepartmentsResult | null>(<any>null);
    }
}

@Injectable()
export class ImportClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    checkReady(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/import/ready";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckReady(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckReady(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processCheckReady(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    importFile(value: ImportFile | null): Observable<APIResponseOfImportFileResponse | null> {
        let url_ = this.baseUrl + "/api/import/file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportFile(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfImportFileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfImportFileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processImportFile(response: HttpResponseBase): Observable<APIResponseOfImportFileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfImportFileResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfImportFileResponse | null>(<any>null);
    }
}

@Injectable()
export class DoctorClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getInternalDoctorIDFromProviderNumber(value: GetInternalDoctorIDFromProviderNumberRequest | null): Observable<APIResponseOfGetInternalDoctorIDFromProviderNumberResult | null> {
        let url_ = this.baseUrl + "/api/doctor/getinternaldoctoridfromprovidernumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInternalDoctorIDFromProviderNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInternalDoctorIDFromProviderNumber(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetInternalDoctorIDFromProviderNumberResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetInternalDoctorIDFromProviderNumberResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInternalDoctorIDFromProviderNumber(response: HttpResponseBase): Observable<APIResponseOfGetInternalDoctorIDFromProviderNumberResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetInternalDoctorIDFromProviderNumberResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetInternalDoctorIDFromProviderNumberResult | null>(<any>null);
    }

    getAllDoctors(): Observable<APIResponseOfListOfDoctorDO | null> {
        let url_ = this.baseUrl + "/api/Doctor/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDoctors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDoctors(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfDoctorDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfDoctorDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDoctors(response: HttpResponseBase): Observable<APIResponseOfListOfDoctorDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfDoctorDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfDoctorDO | null>(<any>null);
    }

    getAllDoctorsForLocation(locationId: number): Observable<APIResponseOfListOfDoctorDO | null> {
        let url_ = this.baseUrl + "/api/Doctor/GetAtLocation?";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined and cannot be null.");
        else
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDoctorsForLocation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDoctorsForLocation(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfDoctorDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfDoctorDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDoctorsForLocation(response: HttpResponseBase): Observable<APIResponseOfListOfDoctorDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfDoctorDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfDoctorDO | null>(<any>null);
    }

    getAllDoctorListItems(): Observable<APIResponseOfListOfDoctorListItem | null> {
        let url_ = this.baseUrl + "/api/Doctor/GetDoctorList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllDoctorListItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllDoctorListItems(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfDoctorListItem | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfDoctorListItem | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllDoctorListItems(response: HttpResponseBase): Observable<APIResponseOfListOfDoctorListItem | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfDoctorListItem.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfDoctorListItem | null>(<any>null);
    }

    findDoctor(value: FindDoctor | null): Observable<APIResponseOfFindDoctorResult | null> {
        let url_ = this.baseUrl + "/api/doctor/find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindDoctor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindDoctor(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindDoctorResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindDoctorResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindDoctor(response: HttpResponseBase): Observable<APIResponseOfFindDoctorResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindDoctorResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindDoctorResult | null>(<any>null);
    }
}

@Injectable()
export class EquipmentRosteringClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getEquipmentRosters(locationId: number, roomId: number): Observable<APIResponseOfEquipmentRosterResource | null> {
        let url_ = this.baseUrl + "/api/EquipmentRoster/Get?";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined and cannot be null.");
        else
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&"; 
        if (roomId === undefined || roomId === null)
            throw new Error("The parameter 'roomId' must be defined and cannot be null.");
        else
            url_ += "roomId=" + encodeURIComponent("" + roomId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEquipmentRosters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEquipmentRosters(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfEquipmentRosterResource | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfEquipmentRosterResource | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEquipmentRosters(response: HttpResponseBase): Observable<APIResponseOfEquipmentRosterResource | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfEquipmentRosterResource.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfEquipmentRosterResource | null>(<any>null);
    }

    saveEquipmentRoster(equipmentRoster: EquipmentRosterDO | null, user: string): Observable<APIResponseOfSaveEquipmentRosterResult | null> {
        let url_ = this.baseUrl + "/api/EquipmentRoster/Save?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined and cannot be null.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(equipmentRoster);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveEquipmentRoster(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveEquipmentRoster(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfSaveEquipmentRosterResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfSaveEquipmentRosterResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveEquipmentRoster(response: HttpResponseBase): Observable<APIResponseOfSaveEquipmentRosterResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfSaveEquipmentRosterResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfSaveEquipmentRosterResult | null>(<any>null);
    }

    getAvailableEquipmentResources(requestDate: Date): Observable<APIResponseOfListOfResourceDO | null> {
        let url_ = this.baseUrl + "/api/EquipmentRoster/AvailableResources?";
        if (requestDate === undefined || requestDate === null)
            throw new Error("The parameter 'requestDate' must be defined and cannot be null.");
        else
            url_ += "requestDate=" + encodeURIComponent(requestDate ? "" + requestDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableEquipmentResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableEquipmentResources(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfResourceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfResourceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableEquipmentResources(response: HttpResponseBase): Observable<APIResponseOfListOfResourceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfResourceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfResourceDO | null>(<any>null);
    }

    getAllEquipmentResources(): Observable<APIResponseOfListOfResourceDO | null> {
        let url_ = this.baseUrl + "/api/EquipmentRoster/AllResources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllEquipmentResources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllEquipmentResources(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfResourceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfResourceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllEquipmentResources(response: HttpResponseBase): Observable<APIResponseOfListOfResourceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfResourceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfResourceDO | null>(<any>null);
    }

    deleteEquipmentRoster(equipmentRosterId: number, userGuid: string): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/EquipmentRoster/Delete?";
        if (equipmentRosterId === undefined || equipmentRosterId === null)
            throw new Error("The parameter 'equipmentRosterId' must be defined and cannot be null.");
        else
            url_ += "equipmentRosterId=" + encodeURIComponent("" + equipmentRosterId) + "&"; 
        if (userGuid === undefined || userGuid === null)
            throw new Error("The parameter 'userGuid' must be defined and cannot be null.");
        else
            url_ += "userGuid=" + encodeURIComponent("" + userGuid) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEquipmentRoster(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEquipmentRoster(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEquipmentRoster(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }
}

@Injectable()
export class GroupsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getGroups(): Observable<GroupDO[] | null> {
        let url_ = this.baseUrl + "/api/contracts/getgroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroups(<any>response_);
                } catch (e) {
                    return <Observable<GroupDO[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupDO[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroups(response: HttpResponseBase): Observable<GroupDO[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GroupDO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupDO[] | null>(<any>null);
    }
}

@Injectable()
export class HMSPropertyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getProperties(propNames: string[] | null): Observable<APIResponseOfListOfHMSPropertyDO | null> {
        let url_ = this.baseUrl + "/api/shared/GetProperties";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(propNames);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProperties(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProperties(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfHMSPropertyDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfHMSPropertyDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProperties(response: HttpResponseBase): Observable<APIResponseOfListOfHMSPropertyDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfHMSPropertyDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfHMSPropertyDO | null>(<any>null);
    }

    getSmartTextStyleProperties(): Observable<APIResponseOfListOfSmartTextStyleProperty | null> {
        let url_ = this.baseUrl + "/api/shared/GetSmartTextStyle";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSmartTextStyleProperties(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSmartTextStyleProperties(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfSmartTextStyleProperty | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfSmartTextStyleProperty | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSmartTextStyleProperties(response: HttpResponseBase): Observable<APIResponseOfListOfSmartTextStyleProperty | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfSmartTextStyleProperty.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfSmartTextStyleProperty | null>(<any>null);
    }
}

@Injectable()
export class ImageTemplateFilesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<APIResponseOfStringOf | null> {
        let url_ = this.baseUrl + "/ImageTemplateFiles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfStringOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfStringOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<APIResponseOfStringOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfStringOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfStringOf | null>(<any>null);
    }

    uploadFiles(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/ImageTemplateFiles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFiles(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUploadFiles(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class ImageTemplatesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getTemplates(formDisplay: string | null, recordSubCategory: number): Observable<APIResponseOfIEnumerableOfImageTemplateDO | null> {
        let url_ = this.baseUrl + "/api/imagetemplates/getImageTemplates?";
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfImageTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfImageTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTemplates(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfImageTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfImageTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfImageTemplateDO | null>(<any>null);
    }

    updateImageTemplates(updatedImageTemplates: ImageTemplateDO[] | null, userName: string | null, formDisplay: string | null, recordSubCategory: number): Observable<APIResponseOfImageTemplateDOOf | null> {
        let url_ = this.baseUrl + "/api/imagetemplates/updateImageTemplates?";
        if (userName === undefined)
            throw new Error("The parameter 'userName' must be defined.");
        else
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (formDisplay === undefined)
            throw new Error("The parameter 'formDisplay' must be defined.");
        else
            url_ += "formDisplay=" + encodeURIComponent("" + formDisplay) + "&"; 
        if (recordSubCategory === undefined || recordSubCategory === null)
            throw new Error("The parameter 'recordSubCategory' must be defined and cannot be null.");
        else
            url_ += "recordSubCategory=" + encodeURIComponent("" + recordSubCategory) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedImageTemplates);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateImageTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateImageTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfImageTemplateDOOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfImageTemplateDOOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateImageTemplates(response: HttpResponseBase): Observable<APIResponseOfImageTemplateDOOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfImageTemplateDOOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfImageTemplateDOOf | null>(<any>null);
    }
}

@Injectable()
export class IndicationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllIndications(value: GetAllIndications | null): Observable<APIResponseOfGetAllIndicationsResult | null> {
        let url_ = this.baseUrl + "/api/indications/getallindications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllIndications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllIndications(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllIndicationsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllIndicationsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllIndications(response: HttpResponseBase): Observable<APIResponseOfGetAllIndicationsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllIndicationsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllIndicationsResult | null>(<any>null);
    }
}

@Injectable()
export class InternalDoctorsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllInternalDoctors(value: GetAllInternalDoctorsParams | null): Observable<APIResponseOfGetAllInternalDoctorsResult | null> {
        let url_ = this.baseUrl + "/api/internaldoctor/getall";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllInternalDoctors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllInternalDoctors(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllInternalDoctorsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllInternalDoctorsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllInternalDoctors(response: HttpResponseBase): Observable<APIResponseOfGetAllInternalDoctorsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllInternalDoctorsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllInternalDoctorsResult | null>(<any>null);
    }
}

@Injectable()
export class ItemFeesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getCategoryItemNumbers(id: string): Observable<APIResponseOfFeeItemNumberOf | null> {
        let url_ = this.baseUrl + "/api/contracts/itemNumbers?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategoryItemNumbers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategoryItemNumbers(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFeeItemNumberOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFeeItemNumberOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategoryItemNumbers(response: HttpResponseBase): Observable<APIResponseOfFeeItemNumberOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFeeItemNumberOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFeeItemNumberOf | null>(<any>null);
    }
}

@Injectable()
export class LicencedFeatureClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getLicensedFeatures(): Observable<APIResponseOfAllLicensedFeatureDataDO | null> {
        let url_ = this.baseUrl + "/api/LicencedFeature";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLicensedFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLicensedFeatures(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAllLicensedFeatureDataDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAllLicensedFeatureDataDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLicensedFeatures(response: HttpResponseBase): Observable<APIResponseOfAllLicensedFeatureDataDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAllLicensedFeatureDataDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAllLicensedFeatureDataDO | null>(<any>null);
    }

    getLicensedFeature(id: number): Observable<APIResponseOfLicensedFeatureDO | null> {
        let url_ = this.baseUrl + "/api/LicencedFeature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLicensedFeature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLicensedFeature(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfLicensedFeatureDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfLicensedFeatureDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLicensedFeature(response: HttpResponseBase): Observable<APIResponseOfLicensedFeatureDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfLicensedFeatureDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfLicensedFeatureDO | null>(<any>null);
    }

    getWorkListDeviceDO(): Observable<WorkListDeviceDO | null> {
        let url_ = this.baseUrl + "/dummy";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkListDeviceDO(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkListDeviceDO(<any>response_);
                } catch (e) {
                    return <Observable<WorkListDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkListDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkListDeviceDO(response: HttpResponseBase): Observable<WorkListDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? WorkListDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkListDeviceDO | null>(<any>null);
    }

    saveWorklistDevice(updatedDevice: WorkListDeviceDO | null): Observable<APIResponseOfWorkListDeviceDO | null> {
        let url_ = this.baseUrl + "/api/licensedfeature/saveworklistdevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedDevice);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveWorklistDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveWorklistDevice(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfWorkListDeviceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfWorkListDeviceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveWorklistDevice(response: HttpResponseBase): Observable<APIResponseOfWorkListDeviceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfWorkListDeviceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfWorkListDeviceDO | null>(<any>null);
    }

    getDicomWorklist(aeTitle: string | null): Observable<APIResponseOfIEnumerableOfDicomWorklistItemDO | null> {
        let url_ = this.baseUrl + "/api/licensedfeature/getdicomworklist?";
        if (aeTitle === undefined)
            throw new Error("The parameter 'aeTitle' must be defined.");
        else
            url_ += "aeTitle=" + encodeURIComponent("" + aeTitle) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDicomWorklist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDicomWorklist(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfDicomWorklistItemDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfDicomWorklistItemDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDicomWorklist(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfDicomWorklistItemDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfDicomWorklistItemDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfDicomWorklistItemDO | null>(<any>null);
    }
}

@Injectable()
export class ListClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllListItems(value: GetAllListItems | null): Observable<APIResponseOfGetAllListItemsResult | null> {
        let url_ = this.baseUrl + "/api/list/getalllistitems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllListItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllListItems(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllListItemsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllListItemsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllListItems(response: HttpResponseBase): Observable<APIResponseOfGetAllListItemsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllListItemsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllListItemsResult | null>(<any>null);
    }

    fetchResultsForRecord(listDefs: ListDefDO[] | null): Observable<APIResponseOfListOfListDO | null> {
        let url_ = this.baseUrl + "/api/list/getlists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(listDefs);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchResultsForRecord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchResultsForRecord(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfListDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfListDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchResultsForRecord(response: HttpResponseBase): Observable<APIResponseOfListOfListDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfListDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfListDO | null>(<any>null);
    }
}

@Injectable()
export class LocationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllLocations(value: GetAllLocationParams | null): Observable<APIResponseOfGetAllLocationResult | null> {
        let url_ = this.baseUrl + "/api/Location/All";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllLocations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllLocations(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllLocationResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllLocationResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllLocations(response: HttpResponseBase): Observable<APIResponseOfGetAllLocationResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllLocationResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllLocationResult | null>(<any>null);
    }

    getAllLocationRooms(locationId: number): Observable<APIResponseOfLocationRoomsResult | null> {
        let url_ = this.baseUrl + "/api/Location/AllRooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(locationId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllLocationRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllLocationRooms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfLocationRoomsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfLocationRoomsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllLocationRooms(response: HttpResponseBase): Observable<APIResponseOfLocationRoomsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfLocationRoomsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfLocationRoomsResult | null>(<any>null);
    }

    getLocationRooms(): Observable<APIResponseOfListOfLocationRoomDO | null> {
        let url_ = this.baseUrl + "/api/Location/LocationRooms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocationRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocationRooms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfLocationRoomDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfLocationRoomDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLocationRooms(response: HttpResponseBase): Observable<APIResponseOfListOfLocationRoomDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfLocationRoomDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfLocationRoomDO | null>(<any>null);
    }

    getHospitalLocations(): Observable<APIResponseOfListOfLocationInfo | null> {
        let url_ = this.baseUrl + "/api/Location/Hospital";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHospitalLocations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHospitalLocations(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfLocationInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfLocationInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetHospitalLocations(response: HttpResponseBase): Observable<APIResponseOfListOfLocationInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfLocationInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfLocationInfo | null>(<any>null);
    }
}

@Injectable()
export class LogClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    messages(events: ClientLogEvent[] | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/log/messages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(events);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMessages(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processMessages(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class LungFunctionDataRawClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateDataRaw(value: AddOrUpdateResultsMapping_LungFunctionDataRaw | null): Observable<APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult | null> {
        let url_ = this.baseUrl + "/api/resultsmapping/lungfunction/addorupdatedataraw";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateDataRaw(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateDataRaw(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateDataRaw(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult | null>(<any>null);
    }
}

@Injectable()
export class NoteClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateNote(value: AddOrUpdateNote | null): Observable<APIResponseOfAddOrUpdateNoteResult | null> {
        let url_ = this.baseUrl + "/api/note/addorupdatenote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateNote(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateNoteResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateNoteResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateNote(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateNoteResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateNoteResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateNoteResult | null>(<any>null);
    }
}

@Injectable()
export class NZBillingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getUserManagedFeeTables(): Observable<APIResponseOfListOfNZBillingFeeTableDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/GetUserManagedFeeTables";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserManagedFeeTables(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserManagedFeeTables(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfNZBillingFeeTableDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfNZBillingFeeTableDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserManagedFeeTables(response: HttpResponseBase): Observable<APIResponseOfListOfNZBillingFeeTableDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfNZBillingFeeTableDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfNZBillingFeeTableDO | null>(<any>null);
    }

    getUserManagedFeeTable(fee_table_id: number): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/GetFeeTable?";
        if (fee_table_id === undefined || fee_table_id === null)
            throw new Error("The parameter 'fee_table_id' must be defined and cannot be null.");
        else
            url_ += "fee_table_id=" + encodeURIComponent("" + fee_table_id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserManagedFeeTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserManagedFeeTable(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserManagedFeeTable(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeTableDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeTableDO | null>(<any>null);
    }

    updateFeeTable(table: NZBillingFeeTableDO | null, userID: string | null): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/UpdateFeeTable?";
        if (userID === undefined)
            throw new Error("The parameter 'userID' must be defined.");
        else
            url_ += "userID=" + encodeURIComponent("" + userID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(table);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFeeTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFeeTable(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFeeTable(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeTableDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeTableDO | null>(<any>null);
    }

    creatFeeTable(table: NZBillingFeeTableDO | null, userID: string | null): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/CreatFeeTable?";
        if (userID === undefined)
            throw new Error("The parameter 'userID' must be defined.");
        else
            url_ += "userID=" + encodeURIComponent("" + userID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(table);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatFeeTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatFeeTable(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeTableDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreatFeeTable(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeTableDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeTableDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeTableDO | null>(<any>null);
    }

    deleteFeeTable(table: number): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/NZBilling/DeleteFeeTable?";
        if (table === undefined || table === null)
            throw new Error("The parameter 'table' must be defined and cannot be null.");
        else
            url_ += "table=" + encodeURIComponent("" + table) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeeTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeeTable(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFeeTable(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    testFeeForDeletion(table: NZBillingFeeTableDO | null): Observable<APIResponseOfListOfString | null> {
        let url_ = this.baseUrl + "/api/NZBilling/TestFeeForDeletion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(table);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestFeeForDeletion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestFeeForDeletion(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processTestFeeForDeletion(response: HttpResponseBase): Observable<APIResponseOfListOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfString | null>(<any>null);
    }

    getFeesForTable(tableId: number): Observable<APIResponseOfListOfNZBillingFeeDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/GetFeesForTable?";
        if (tableId === undefined || tableId === null)
            throw new Error("The parameter 'tableId' must be defined and cannot be null.");
        else
            url_ += "tableId=" + encodeURIComponent("" + tableId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeesForTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeesForTable(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfNZBillingFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfNZBillingFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeesForTable(response: HttpResponseBase): Observable<APIResponseOfListOfNZBillingFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfNZBillingFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfNZBillingFeeDO | null>(<any>null);
    }

    getFee(tableId: number, itemNum: string | null): Observable<APIResponseOfNZBillingFeeDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/GetFee?";
        if (tableId === undefined || tableId === null)
            throw new Error("The parameter 'tableId' must be defined and cannot be null.");
        else
            url_ += "tableId=" + encodeURIComponent("" + tableId) + "&"; 
        if (itemNum === undefined)
            throw new Error("The parameter 'itemNum' must be defined.");
        else
            url_ += "itemNum=" + encodeURIComponent("" + itemNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFee(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFee(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeDO | null>(<any>null);
    }

    updateFee(fee: NZBillingFeeDO | null, existingItemNum: string | null, existingTableId: number): Observable<APIResponseOfNZBillingFeeDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/UpdateFee?";
        if (existingItemNum === undefined)
            throw new Error("The parameter 'existingItemNum' must be defined.");
        else
            url_ += "existingItemNum=" + encodeURIComponent("" + existingItemNum) + "&"; 
        if (existingTableId === undefined || existingTableId === null)
            throw new Error("The parameter 'existingTableId' must be defined and cannot be null.");
        else
            url_ += "existingTableId=" + encodeURIComponent("" + existingTableId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(fee);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFee(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFee(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeDO | null>(<any>null);
    }

    createFee(fee: NZBillingFeeDO | null): Observable<APIResponseOfNZBillingFeeDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/CreateFee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(fee);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFee(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateFee(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeDO | null>(<any>null);
    }

    deleteFee(fee: NZBillingFeeDO | null): Observable<APIResponseOfNZBillingFeeDO | null> {
        let url_ = this.baseUrl + "/api/NZBilling/DeleteFee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(fee);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFee(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNZBillingFeeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFee(response: HttpResponseBase): Observable<APIResponseOfNZBillingFeeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNZBillingFeeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNZBillingFeeDO | null>(<any>null);
    }

    checkItemExists(itemNum: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/NZBilling/CheckItemExists?";
        if (itemNum === undefined)
            throw new Error("The parameter 'itemNum' must be defined.");
        else
            url_ += "itemNum=" + encodeURIComponent("" + itemNum) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckItemExists(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckItemExists(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processCheckItemExists(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }
}

@Injectable()
export class OccasionOfServiceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getOccasionOfServiceEntry(osID: number): Observable<OS_EntryParams | null> {
        let url_ = this.baseUrl + "/api/oos/get?";
        if (osID === undefined || osID === null)
            throw new Error("The parameter 'osID' must be defined and cannot be null.");
        else
            url_ += "osID=" + encodeURIComponent("" + osID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOccasionOfServiceEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOccasionOfServiceEntry(<any>response_);
                } catch (e) {
                    return <Observable<OS_EntryParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<OS_EntryParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetOccasionOfServiceEntry(response: HttpResponseBase): Observable<OS_EntryParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OS_EntryParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OS_EntryParams | null>(<any>null);
    }

    getOccasionOfServiceMembers(osID: number): Observable<OS_MemberParams[] | null> {
        let url_ = this.baseUrl + "/api/oosmember/get?";
        if (osID === undefined || osID === null)
            throw new Error("The parameter 'osID' must be defined and cannot be null.");
        else
            url_ += "osID=" + encodeURIComponent("" + osID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOccasionOfServiceMembers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOccasionOfServiceMembers(<any>response_);
                } catch (e) {
                    return <Observable<OS_MemberParams[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<OS_MemberParams[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetOccasionOfServiceMembers(response: HttpResponseBase): Observable<OS_MemberParams[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(OS_MemberParams.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OS_MemberParams[] | null>(<any>null);
    }

    findIncomingOrderByVisitNumber(value: FindOccasionOfService | null): Observable<APIResponseOfFindOccasionOfServiceResult | null> {
        let url_ = this.baseUrl + "/api/oos/find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindIncomingOrderByVisitNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindIncomingOrderByVisitNumber(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindOccasionOfServiceResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindOccasionOfServiceResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindIncomingOrderByVisitNumber(response: HttpResponseBase): Observable<APIResponseOfFindOccasionOfServiceResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindOccasionOfServiceResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindOccasionOfServiceResult | null>(<any>null);
    }

    addOrUpdateOccasionOfServiceEntry(value: AddOrUpdateOccasionOfServiceEntry | null): Observable<APIResponseOfAddOrUpdateOccasionOfServiceEntryResult | null> {
        let url_ = this.baseUrl + "/api/oos/addorupdateentry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateOccasionOfServiceEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateOccasionOfServiceEntry(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateOccasionOfServiceEntryResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateOccasionOfServiceEntryResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateOccasionOfServiceEntry(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateOccasionOfServiceEntryResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateOccasionOfServiceEntryResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateOccasionOfServiceEntryResult | null>(<any>null);
    }

    addOrUpdateOccasionOfServiceMember(value: AddOrUpdateOccasionOfServiceMember | null): Observable<APIResponseOfAddOrUpdateOccasionOfServiceMemberResult | null> {
        let url_ = this.baseUrl + "/api/oos/addorupdatemember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateOccasionOfServiceMember(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateOccasionOfServiceMember(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateOccasionOfServiceMemberResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateOccasionOfServiceMemberResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateOccasionOfServiceMember(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateOccasionOfServiceMemberResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateOccasionOfServiceMemberResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateOccasionOfServiceMemberResult | null>(<any>null);
    }
}

@Injectable()
export class OnlineBookingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getBookingTypeList(): Observable<APIResponseOfListOfBookingTypeListDO | null> {
        let url_ = this.baseUrl + "/api/OnlineBooking/GetBookingTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingTypeList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBookingTypeListDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBookingTypeListDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingTypeList(response: HttpResponseBase): Observable<APIResponseOfListOfBookingTypeListDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBookingTypeListDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBookingTypeListDO | null>(<any>null);
    }

    getDoctorsList(): Observable<APIResponseOfListOfDoctorsListDO | null> {
        let url_ = this.baseUrl + "/api/OnlineBooking/GetDoctorsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDoctorsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDoctorsList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfDoctorsListDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfDoctorsListDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDoctorsList(response: HttpResponseBase): Observable<APIResponseOfListOfDoctorsListDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfDoctorsListDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfDoctorsListDO | null>(<any>null);
    }

    getLocationsList(): Observable<APIResponseOfListOfLocationsListDO | null> {
        let url_ = this.baseUrl + "/api/OnlineBooking/GetLocationsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocationsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocationsList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfLocationsListDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfLocationsListDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLocationsList(response: HttpResponseBase): Observable<APIResponseOfListOfLocationsListDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfLocationsListDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfLocationsListDO | null>(<any>null);
    }
}

@Injectable()
export class OrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    findIncomingOrderByOrderNumber(value: FindIncomingHeaderByOrderNumber | null): Observable<APIResponseOfFindIncomingHeaderByOrderNumberResult | null> {
        let url_ = this.baseUrl + "/api/order/findincomingorderbyordernumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindIncomingOrderByOrderNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindIncomingOrderByOrderNumber(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindIncomingHeaderByOrderNumberResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindIncomingHeaderByOrderNumberResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindIncomingOrderByOrderNumber(response: HttpResponseBase): Observable<APIResponseOfFindIncomingHeaderByOrderNumberResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindIncomingHeaderByOrderNumberResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindIncomingHeaderByOrderNumberResult | null>(<any>null);
    }

    findIncomingOrderByVisitNumber(value: FindIncomingHeaderByVisitNumber | null): Observable<APIResponseOfFindIncomingHeaderByVisitNumberResult | null> {
        let url_ = this.baseUrl + "/api/order/findincomingorderbyvisitnumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindIncomingOrderByVisitNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindIncomingOrderByVisitNumber(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindIncomingHeaderByVisitNumberResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindIncomingHeaderByVisitNumberResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindIncomingOrderByVisitNumber(response: HttpResponseBase): Observable<APIResponseOfFindIncomingHeaderByVisitNumberResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindIncomingHeaderByVisitNumberResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindIncomingHeaderByVisitNumberResult | null>(<any>null);
    }

    getIncomingOrder(value: GetIncomingOrder | null): Observable<APIResponseOfGetIncomingOrderResult | null> {
        let url_ = this.baseUrl + "/api/order/getorder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIncomingOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIncomingOrder(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetIncomingOrderResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetIncomingOrderResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetIncomingOrder(response: HttpResponseBase): Observable<APIResponseOfGetIncomingOrderResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetIncomingOrderResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetIncomingOrderResult | null>(<any>null);
    }

    addOrUpdateIncomingOrder(value: AddOrUpdateIncomingOrder | null): Observable<APIResponseOfAddOrUpdateIncomingOrderResult | null> {
        let url_ = this.baseUrl + "/api/order/addorupdateorder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateIncomingOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateIncomingOrder(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateIncomingOrderResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateIncomingOrderResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateIncomingOrder(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateIncomingOrderResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateIncomingOrderResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateIncomingOrderResult | null>(<any>null);
    }

    getIncomingHeader(value: GetIncomingHeader | null): Observable<APIResponseOfGetIncomingHeaderResult | null> {
        let url_ = this.baseUrl + "/api/order/getheader";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIncomingHeader(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIncomingHeader(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetIncomingHeaderResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetIncomingHeaderResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetIncomingHeader(response: HttpResponseBase): Observable<APIResponseOfGetIncomingHeaderResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetIncomingHeaderResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetIncomingHeaderResult | null>(<any>null);
    }

    addOrUpdateIncomingHeader(value: AddOrUpdateIncomingHeader | null): Observable<APIResponseOfAddOrUpdateIncomingHeaderResult | null> {
        let url_ = this.baseUrl + "/api/order/addorupdateheader";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateIncomingHeader(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateIncomingHeader(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateIncomingHeaderResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateIncomingHeaderResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateIncomingHeader(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateIncomingHeaderResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateIncomingHeaderResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateIncomingHeaderResult | null>(<any>null);
    }

    getIncomingOrderOBX(value: GetIncomingOrder_OBX | null): Observable<APIResponseOfGetIncomingOrder_OBXResult | null> {
        let url_ = this.baseUrl + "/api/order/getorderobx";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIncomingOrderOBX(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIncomingOrderOBX(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetIncomingOrder_OBXResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetIncomingOrder_OBXResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetIncomingOrderOBX(response: HttpResponseBase): Observable<APIResponseOfGetIncomingOrder_OBXResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetIncomingOrder_OBXResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetIncomingOrder_OBXResult | null>(<any>null);
    }
}

@Injectable()
export class AddOrUpdateIncomingOrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    oBX(value: AddOrUpdateIncomingOrder_OBX | null): Observable<APIResponseOfAddOrUpdateIncomingOrder_OBXResult | null> {
        let url_ = this.baseUrl + "/api/order/addorupdateorderobx";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOBX(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOBX(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateIncomingOrder_OBXResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateIncomingOrder_OBXResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processOBX(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateIncomingOrder_OBXResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateIncomingOrder_OBXResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateIncomingOrder_OBXResult | null>(<any>null);
    }
}

@Injectable()
export class PatientProgramsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getPatientPrograms(patientId: number): Observable<APIResponseOfIEnumerableOfPatientProgram | null> {
        let url_ = this.baseUrl + "/api/patientconnect/PatientPrograms?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined and cannot be null.");
        else
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientPrograms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientPrograms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPatientProgram | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPatientProgram | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientPrograms(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPatientProgram | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPatientProgram.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPatientProgram | null>(<any>null);
    }

    savePatientProgram(patientProgram: PatientProgram | null, userId: string | null): Observable<APIResponseOfPatientProgram | null> {
        let url_ = this.baseUrl + "/api/patientconnect/PatientPrograms/save?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patientProgram);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSavePatientProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSavePatientProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfPatientProgram | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfPatientProgram | null>><any>_observableThrow(response_);
        }));
    }

    protected processSavePatientProgram(response: HttpResponseBase): Observable<APIResponseOfPatientProgram | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfPatientProgram.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfPatientProgram | null>(<any>null);
    }

    deletePatientProgram(patientProgram: PatientProgram | null, userId: string | null): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/PatientPrograms/delete?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patientProgram);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeletePatientProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeletePatientProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeletePatientProgram(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    getConnectStatuses(): Observable<APIResponseOfIEnumerableOfConnectStatusDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/connectstatuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConnectStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConnectStatuses(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfConnectStatusDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfConnectStatusDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetConnectStatuses(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfConnectStatusDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfConnectStatusDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfConnectStatusDO | null>(<any>null);
    }

    patientProgramCompleteCycle(patientProgram: PatientProgram | null, userId: string | null): Observable<APIResponseOfPatientProgram | null> {
        let url_ = this.baseUrl + "/api/patientconnect/PatientPrograms/completecycle?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patientProgram);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPatientProgramCompleteCycle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPatientProgramCompleteCycle(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfPatientProgram | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfPatientProgram | null>><any>_observableThrow(response_);
        }));
    }

    protected processPatientProgramCompleteCycle(response: HttpResponseBase): Observable<APIResponseOfPatientProgram | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfPatientProgram.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfPatientProgram | null>(<any>null);
    }
}

@Injectable()
export class PCActionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(id: number): Observable<APIResponseOfActionDO | null> {
        let url_ = this.baseUrl + "/api/PCAction/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfActionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfActionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<APIResponseOfActionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfActionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfActionDO | null>(<any>null);
    }
}

@Injectable()
export class PCPracticeWideClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllPatientConnects(filter: PatientConnectFilterDO | null): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPatientConnects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPatientConnects(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPatientConnects(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPracticeWideConnectDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>(<any>null);
    }

    savePatientConnect(patientConnect: PracticeWideConnectDO | null, userId: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/save?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(patientConnect);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSavePatientConnect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSavePatientConnect(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processSavePatientConnect(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    nextActionPatientConnects(batch: PracticeWideBatchDO | null, userId: string | null): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/nextaction?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(batch);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNextActionPatientConnects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNextActionPatientConnects(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processNextActionPatientConnects(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPracticeWideConnectDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>(<any>null);
    }

    getProcessMaxiumCount(): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/processmaxcount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProcessMaxiumCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProcessMaxiumCount(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProcessMaxiumCount(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    batchCompleteCycles(batch: PracticeWideBatchDO | null, userId: string | null): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/batchcomplete?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(batch);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchCompleteCycles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchCompleteCycles(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processBatchCompleteCycles(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPracticeWideConnectDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>(<any>null);
    }

    getPatientConnectBatches(filter: BatchFilterDO | null): Observable<APIResponseOfIEnumerableOfPatientConnectBatchDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/getbatches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectBatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectBatches(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPatientConnectBatchDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPatientConnectBatchDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectBatches(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPatientConnectBatchDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPatientConnectBatchDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPatientConnectBatchDO | null>(<any>null);
    }

    getBatchUserNames(): Observable<APIResponseOfIEnumerableOfString | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/getbatchusernames";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBatchUserNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBatchUserNames(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBatchUserNames(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfString | null>(<any>null);
    }

    getPatientConnectByBatchId(batchId: number): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/getconnectsbybatchid?";
        if (batchId === undefined || batchId === null)
            throw new Error("The parameter 'batchId' must be defined and cannot be null.");
        else
            url_ += "batchId=" + encodeURIComponent("" + batchId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectByBatchId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectByBatchId(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectByBatchId(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfPracticeWideConnectDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfPracticeWideConnectDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfPracticeWideConnectDO | null>(<any>null);
    }

    getOldestNextConnectDue(): Observable<APIResponseOfDateTime | null> {
        let url_ = this.baseUrl + "/api/patientconnect/practicewide/fromdate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOldestNextConnectDue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOldestNextConnectDue(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfDateTime | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfDateTime | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetOldestNextConnectDue(response: HttpResponseBase): Observable<APIResponseOfDateTime | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfDateTime.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfDateTime | null>(<any>null);
    }
}

@Injectable()
export class PCProgramsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getPrograms(): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        let url_ = this.baseUrl + "/api/PCPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPrograms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPrograms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPrograms(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfProgramDO | null>(<any>null);
    }

    saveProgram(updatedProgram: ProgramDO | null): Observable<APIResponseOfProgramDO | null> {
        let url_ = this.baseUrl + "/api/PCPrograms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedProgram);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveProgram(response: HttpResponseBase): Observable<APIResponseOfProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfProgramDO | null>(<any>null);
    }

    getReferralPrograms(): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getReferralPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferralPrograms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferralPrograms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferralPrograms(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfProgramDO | null>(<any>null);
    }

    getEnabledPrograms(): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getenabledprograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEnabledPrograms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEnabledPrograms(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEnabledPrograms(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfProgramDO | null>(<any>null);
    }

    getProgramsListOfType(type: number): Observable<APIResponseOfIEnumerableOfProgramListItemDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getprogramsoftype?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProgramsListOfType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramsListOfType(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfProgramListItemDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfProgramListItemDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProgramsListOfType(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfProgramListItemDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfProgramListItemDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfProgramListItemDO | null>(<any>null);
    }

    getProgramDefinition(id: number): Observable<APIResponseOfProgramDO | null> {
        let url_ = this.baseUrl + "/api/PCPrograms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProgramDefinition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramDefinition(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProgramDefinition(response: HttpResponseBase): Observable<APIResponseOfProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfProgramDO | null>(<any>null);
    }

    deleteProgram(deleteProgram: ProgramDO | null): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/pcmangementdata/deleteprogram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deleteProgram);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteProgram(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    getPatientConnectTypes(): Observable<APIResponseOfIEnumerableOfProgramTypeDO | null> {
        let url_ = this.baseUrl + "/api.patientconnect/getpatientconnecttypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectTypes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfProgramTypeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfProgramTypeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectTypes(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfProgramTypeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfProgramTypeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfProgramTypeDO | null>(<any>null);
    }

    getPcManagementData(): Observable<APIResponseOfPcManagementDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/pcmangementdata";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPcManagementData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPcManagementData(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfPcManagementDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfPcManagementDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPcManagementData(response: HttpResponseBase): Observable<APIResponseOfPcManagementDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfPcManagementDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfPcManagementDO | null>(<any>null);
    }

    getBookingTypes(): Observable<APIResponseOfIEnumerableOfSelectedBookingTypeDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getbookingtypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingTypes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfSelectedBookingTypeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfSelectedBookingTypeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookingTypes(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfSelectedBookingTypeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfSelectedBookingTypeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfSelectedBookingTypeDO | null>(<any>null);
    }

    getPatientConnectSMSTemplates(): Observable<APIResponseOfIEnumerableOfString | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getsmstemplates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectSMSTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectSMSTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectSMSTemplates(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfString | null>(<any>null);
    }

    getPatientConnectLetterTemplates(): Observable<APIResponseOfIEnumerableOfLetterTemplateDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getlettertemplates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectLetterTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectLetterTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfLetterTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfLetterTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectLetterTemplates(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfLetterTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfLetterTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfLetterTemplateDO | null>(<any>null);
    }

    getPatientConnectEmailTemplates(): Observable<APIResponseOfIEnumerableOfString | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getemailtemplates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectEmailTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectEmailTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectEmailTemplates(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfString | null>(<any>null);
    }

    getPatientConnectReplyList(): Observable<APIResponseOfIEnumerableOfListItemDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getreplycontentlist";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientConnectReplyList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientConnectReplyList(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfListItemDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfListItemDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientConnectReplyList(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfListItemDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfListItemDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfListItemDO | null>(<any>null);
    }

    getConnectsEffectedByProgramChange(programId: number): Observable<APIResponseOfEffectedConnectsOnProgramDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/connectseffected?";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined and cannot be null.");
        else
            url_ += "programId=" + encodeURIComponent("" + programId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConnectsEffectedByProgramChange(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConnectsEffectedByProgramChange(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfEffectedConnectsOnProgramDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfEffectedConnectsOnProgramDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetConnectsEffectedByProgramChange(response: HttpResponseBase): Observable<APIResponseOfEffectedConnectsOnProgramDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfEffectedConnectsOnProgramDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfEffectedConnectsOnProgramDO | null>(<any>null);
    }

    getPatientsOnProgram(query: PatientProgramOnProgramQuery | null): Observable<APIResponseOfPatientProgramOnProgramResponse | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getpatientsonprogram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientsOnProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientsOnProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfPatientProgramOnProgramResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfPatientProgramOnProgramResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientsOnProgram(response: HttpResponseBase): Observable<APIResponseOfPatientProgramOnProgramResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfPatientProgramOnProgramResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfPatientProgramOnProgramResponse | null>(<any>null);
    }

    getActivePatientConnectsCount(programId: number): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getpatientsonprogramcount?";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined and cannot be null.");
        else
            url_ += "programId=" + encodeURIComponent("" + programId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActivePatientConnectsCount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActivePatientConnectsCount(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetActivePatientConnectsCount(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    getPatientsMovingToProgramAlreadyOn(programIdCurrent: number, programIdMoving: number): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getpatientsmovingtoprogramalreadyon?";
        if (programIdCurrent === undefined || programIdCurrent === null)
            throw new Error("The parameter 'programIdCurrent' must be defined and cannot be null.");
        else
            url_ += "programIdCurrent=" + encodeURIComponent("" + programIdCurrent) + "&"; 
        if (programIdMoving === undefined || programIdMoving === null)
            throw new Error("The parameter 'programIdMoving' must be defined and cannot be null.");
        else
            url_ += "programIdMoving=" + encodeURIComponent("" + programIdMoving) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientsMovingToProgramAlreadyOn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientsMovingToProgramAlreadyOn(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientsMovingToProgramAlreadyOn(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    movePatientsToAnotherProgram(movingConnects: MovingConnectsDO | null): Observable<APIResponseOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patientconnect/movepatientstoanotherprogram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(movingConnects);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMovePatientsToAnotherProgram(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMovePatientsToAnotherProgram(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processMovePatientsToAnotherProgram(response: HttpResponseBase): Observable<APIResponseOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfInt32 | null>(<any>null);
    }

    getMovingPatientSteps(programIdCurrent: number, programIdMoving: number): Observable<APIResponseOfMovingConnectsDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/getmovingpatientsteps?";
        if (programIdCurrent === undefined || programIdCurrent === null)
            throw new Error("The parameter 'programIdCurrent' must be defined and cannot be null.");
        else
            url_ += "programIdCurrent=" + encodeURIComponent("" + programIdCurrent) + "&"; 
        if (programIdMoving === undefined || programIdMoving === null)
            throw new Error("The parameter 'programIdMoving' must be defined and cannot be null.");
        else
            url_ += "programIdMoving=" + encodeURIComponent("" + programIdMoving) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMovingPatientSteps(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMovingPatientSteps(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfMovingConnectsDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfMovingConnectsDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetMovingPatientSteps(response: HttpResponseBase): Observable<APIResponseOfMovingConnectsDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfMovingConnectsDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfMovingConnectsDO | null>(<any>null);
    }
}

@Injectable()
export class ReplyContentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getReplyContent(filter: ReplyContentFilterDO | null): Observable<APIResponseOfIEnumerableOfReplyContentDO | null> {
        let url_ = this.baseUrl + "/api/patientconnect/replycontent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReplyContent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReplyContent(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfIEnumerableOfReplyContentDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfIEnumerableOfReplyContentDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReplyContent(response: HttpResponseBase): Observable<APIResponseOfIEnumerableOfReplyContentDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfIEnumerableOfReplyContentDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfIEnumerableOfReplyContentDO | null>(<any>null);
    }

    updateReplyContent(replyContent: ReplyContentDO[] | null, username: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/patientconnect/updateReplyContent?";
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(replyContent);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateReplyContent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateReplyContent(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateReplyContent(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }
}

@Injectable()
export class PatientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getPatient(patientId: number): Observable<AddPatientApiRequestParams | null> {
        let url_ = this.baseUrl + "/api/patient/get?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined and cannot be null.");
        else
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatient(<any>response_);
                } catch (e) {
                    return <Observable<AddPatientApiRequestParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AddPatientApiRequestParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatient(response: HttpResponseBase): Observable<AddPatientApiRequestParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddPatientApiRequestParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddPatientApiRequestParams | null>(<any>null);
    }

    addPatient(value: AddPatientApiRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPatient(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddPatient(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    addPatientAlias(value: AddPatientAliasRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/addalias";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPatientAlias(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPatientAlias(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddPatientAlias(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    getdoctorid(value: GetDoctorRegisterNumberFromProviderNumberApiRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/getdoctorregisternumberfromprovidernumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetdoctorid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetdoctorid(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetdoctorid(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    getListItem(value: GetListItem | null): Observable<APIResponseOfGetListItemResult | null> {
        let url_ = this.baseUrl + "/api/patient/getlistitem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListItem(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetListItemResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetListItemResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetListItem(response: HttpResponseBase): Observable<APIResponseOfGetListItemResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetListItemResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetListItemResult | null>(<any>null);
    }

    getPatientNote(value: GetPatientNote | null): Observable<APIResponseOfGetPatientNoteResult | null> {
        let url_ = this.baseUrl + "/api/patient/getnote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientNote(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetPatientNoteResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetPatientNoteResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientNote(response: HttpResponseBase): Observable<APIResponseOfGetPatientNoteResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetPatientNoteResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetPatientNoteResult | null>(<any>null);
    }

    hl7item(value: GetHL7ItemMappingApiRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/gethl7itemmapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHl7item(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHl7item(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processHl7item(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    merge(parameters: AddPatientMergeRequest | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/merge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMerge(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMerge(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processMerge(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    unMerge(parameters: UnMergeHealthTrackPatientRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/unmerge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnMerge(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnMerge(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processUnMerge(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    addNextOfKin(value: NextOfKinApiRequestParams | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/nextofkin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddNextOfKin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNextOfKin(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddNextOfKin(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    addOrUpdatePatientMapping(parameters: AddOrUpdatePatientMapping | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/addorupdatepatientmapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdatePatientMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdatePatientMapping(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdatePatientMapping(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    moveMRNOntoPatient(parameters: MoveMRNOntoPatient | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/movemrnontopatient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMoveMRNOntoPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMoveMRNOntoPatient(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processMoveMRNOntoPatient(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    getPatientAddresses(parameters: GetPatientAddressesRequestParams | null): Observable<APIResponseOfAddressResponseOf | null> {
        let url_ = this.baseUrl + "/api/patient/address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPatientAddresses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPatientAddresses(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddressResponseOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddressResponseOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPatientAddresses(response: HttpResponseBase): Observable<APIResponseOfAddressResponseOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddressResponseOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddressResponseOf | null>(<any>null);
    }

    addOrUpdatePatientAddress(address: AddressResponse | null): Observable<APIResponseOfString | null> {
        let url_ = this.baseUrl + "/api/patient/addorupdateaddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(address);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdatePatientAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdatePatientAddress(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdatePatientAddress(response: HttpResponseBase): Observable<APIResponseOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfString | null>(<any>null);
    }

    getExternalFeed(parameters: GetExternalFeedRequestParams | null): Observable<APIResponseOfExternal_Feed_ConfigResponse | null> {
        let url_ = this.baseUrl + "/api/patient/getexternalfeed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExternalFeed(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExternalFeed(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfExternal_Feed_ConfigResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfExternal_Feed_ConfigResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetExternalFeed(response: HttpResponseBase): Observable<APIResponseOfExternal_Feed_ConfigResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfExternal_Feed_ConfigResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfExternal_Feed_ConfigResponse | null>(<any>null);
    }

    getGroupedFeeds(value: GetGroupedFeeds | null): Observable<APIResponseOfExternal_Feed_ConfigResponseOf | null> {
        let url_ = this.baseUrl + "/api/patient/getgroupedfeeds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupedFeeds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupedFeeds(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfExternal_Feed_ConfigResponseOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfExternal_Feed_ConfigResponseOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupedFeeds(response: HttpResponseBase): Observable<APIResponseOfExternal_Feed_ConfigResponseOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfExternal_Feed_ConfigResponseOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfExternal_Feed_ConfigResponseOf | null>(<any>null);
    }

    findHealthTrackPatient(parameters: FindHealthTrackPatientParameters | null): Observable<APIResponseOfNullableOfInt32 | null> {
        let url_ = this.baseUrl + "/api/patient/findpatient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindHealthTrackPatient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindHealthTrackPatient(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfNullableOfInt32 | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfNullableOfInt32 | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindHealthTrackPatient(response: HttpResponseBase): Observable<APIResponseOfNullableOfInt32 | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfNullableOfInt32.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfNullableOfInt32 | null>(<any>null);
    }

    findHealthTrackPatientMapping(parameters: FindHealthTrackPatientMappingRequestParams | null): Observable<APIResponseOfHL7_PatientMappingResponse | null> {
        let url_ = this.baseUrl + "/api/patient/findpatientmapping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindHealthTrackPatientMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindHealthTrackPatientMapping(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfHL7_PatientMappingResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfHL7_PatientMappingResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindHealthTrackPatientMapping(response: HttpResponseBase): Observable<APIResponseOfHL7_PatientMappingResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfHL7_PatientMappingResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfHL7_PatientMappingResponse | null>(<any>null);
    }

    findHealthTrackPatientMappingNoValidation(parameters: FindHealthTrackPatientMappingRequestParams | null): Observable<APIResponseOfHL7_PatientMappingResponse | null> {
        let url_ = this.baseUrl + "/api/patient/findpatientmappingnovalidation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(parameters);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindHealthTrackPatientMappingNoValidation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindHealthTrackPatientMappingNoValidation(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfHL7_PatientMappingResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfHL7_PatientMappingResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindHealthTrackPatientMappingNoValidation(response: HttpResponseBase): Observable<APIResponseOfHL7_PatientMappingResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfHL7_PatientMappingResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfHL7_PatientMappingResponse | null>(<any>null);
    }

    getAdmission(admissionId: number): Observable<AddAdmissionsApiRequestParams | null> {
        let url_ = this.baseUrl + "/api/admissions/get?";
        if (admissionId === undefined || admissionId === null)
            throw new Error("The parameter 'admissionId' must be defined and cannot be null.");
        else
            url_ += "admissionId=" + encodeURIComponent("" + admissionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAdmission(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAdmission(<any>response_);
                } catch (e) {
                    return <Observable<AddAdmissionsApiRequestParams | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AddAdmissionsApiRequestParams | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAdmission(response: HttpResponseBase): Observable<AddAdmissionsApiRequestParams | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddAdmissionsApiRequestParams.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddAdmissionsApiRequestParams | null>(<any>null);
    }
}

@Injectable()
export class PatientMembershipCardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdatePatientMembershipCard(value: AddOrUpdatePatientMembershipCard | null): Observable<APIResponseOfAddOrUpdatePatientMembershipCardResult | null> {
        let url_ = this.baseUrl + "/api/patientmembershipcard/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdatePatientMembershipCard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdatePatientMembershipCard(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdatePatientMembershipCardResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdatePatientMembershipCardResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdatePatientMembershipCard(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdatePatientMembershipCardResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdatePatientMembershipCardResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdatePatientMembershipCardResult | null>(<any>null);
    }
}

@Injectable()
export class PatientSearchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    patientSearch(value: PatientSearch | null): Observable<APIResponseOfPatientSearchResult | null> {
        let url_ = this.baseUrl + "/api/patientsearch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPatientSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPatientSearch(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfPatientSearchResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfPatientSearchResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processPatientSearch(response: HttpResponseBase): Observable<APIResponseOfPatientSearchResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfPatientSearchResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfPatientSearchResult | null>(<any>null);
    }
}

@Injectable()
export class QuestionnaireInstanceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    fetchInstance(instanceId: number): Observable<APIResponseOfQuestionnaireInstanceDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireInstance/FetchInstance?";
        if (instanceId === undefined || instanceId === null)
            throw new Error("The parameter 'instanceId' must be defined and cannot be null.");
        else
            url_ += "instanceId=" + encodeURIComponent("" + instanceId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchInstance(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchInstance(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfQuestionnaireInstanceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfQuestionnaireInstanceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchInstance(response: HttpResponseBase): Observable<APIResponseOfQuestionnaireInstanceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfQuestionnaireInstanceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfQuestionnaireInstanceDO | null>(<any>null);
    }

    saveInstance(instance: QuestionnaireInstanceDO | null, isCreateNew: boolean, username: string | null): Observable<APIResponseOfQuestionnaireInstanceDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireInstance/SaveInstance?";
        if (isCreateNew === undefined || isCreateNew === null)
            throw new Error("The parameter 'isCreateNew' must be defined and cannot be null.");
        else
            url_ += "isCreateNew=" + encodeURIComponent("" + isCreateNew) + "&"; 
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(instance);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveInstance(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveInstance(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfQuestionnaireInstanceDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfQuestionnaireInstanceDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveInstance(response: HttpResponseBase): Observable<APIResponseOfQuestionnaireInstanceDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfQuestionnaireInstanceDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfQuestionnaireInstanceDO | null>(<any>null);
    }
}

@Injectable()
export class QuestionnaireTemplateClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    fetchTemplate(templateId: number): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate/FetchTemplate?";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined and cannot be null.");
        else
            url_ += "templateId=" + encodeURIComponent("" + templateId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchTemplate(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchTemplate(response: HttpResponseBase): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfQuestionnaireTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfQuestionnaireTemplateDO | null>(<any>null);
    }

    listTemplates(templateType: number | null): Observable<APIResponseOfListOfQuestionnaireTemplateDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate/ListTemplates?";
        if (templateType === undefined)
            throw new Error("The parameter 'templateType' must be defined.");
        else
            url_ += "templateType=" + encodeURIComponent("" + templateType) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfQuestionnaireTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfQuestionnaireTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processListTemplates(response: HttpResponseBase): Observable<APIResponseOfListOfQuestionnaireTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfQuestionnaireTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfQuestionnaireTemplateDO | null>(<any>null);
    }

    saveTemplate(template: QuestionnaireTemplateDO | null, isCreateNew: boolean, username: string | null): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate/SaveTemplate?";
        if (isCreateNew === undefined || isCreateNew === null)
            throw new Error("The parameter 'isCreateNew' must be defined and cannot be null.");
        else
            url_ += "isCreateNew=" + encodeURIComponent("" + isCreateNew) + "&"; 
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(template);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveTemplate(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveTemplate(response: HttpResponseBase): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfQuestionnaireTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfQuestionnaireTemplateDO | null>(<any>null);
    }

    deleteTemplate(templateId: number, username: string | null): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate/DeleteTemplate?";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined and cannot be null.");
        else
            url_ += "templateId=" + encodeURIComponent("" + templateId) + "&"; 
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTemplate(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfQuestionnaireTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTemplate(response: HttpResponseBase): Observable<APIResponseOfQuestionnaireTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfQuestionnaireTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfQuestionnaireTemplateDO | null>(<any>null);
    }

    fetchTemplateSubRecordTypes(): Observable<APIResponseOfTemplateSubRecordTypesResponse | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate/FetchTemplateSubRecordTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchTemplateSubRecordTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchTemplateSubRecordTypes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTemplateSubRecordTypesResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTemplateSubRecordTypesResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchTemplateSubRecordTypes(response: HttpResponseBase): Observable<APIResponseOfTemplateSubRecordTypesResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTemplateSubRecordTypesResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTemplateSubRecordTypesResponse | null>(<any>null);
    }

    fetchTemplateSubRecordType(): Observable<SRTypeTitleCombo[] | null> {
        let url_ = this.baseUrl + "/api/QuestionnaireTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFetchTemplateSubRecordType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFetchTemplateSubRecordType(<any>response_);
                } catch (e) {
                    return <Observable<SRTypeTitleCombo[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SRTypeTitleCombo[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processFetchTemplateSubRecordType(response: HttpResponseBase): Observable<SRTypeTitleCombo[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SRTypeTitleCombo.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SRTypeTitleCombo[] | null>(<any>null);
    }
}

@Injectable()
export class ReferringDoctorClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getReferringDoctors(value: GetAllReferringDoctors | null): Observable<APIResponseOfGetAllReferringDoctorsResult | null> {
        let url_ = this.baseUrl + "/api/referringdoctor/getall";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferringDoctors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferringDoctors(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetAllReferringDoctorsResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetAllReferringDoctorsResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferringDoctors(response: HttpResponseBase): Observable<APIResponseOfGetAllReferringDoctorsResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetAllReferringDoctorsResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetAllReferringDoctorsResult | null>(<any>null);
    }

    addOrUpdateReferringDoctor(value: AddOrUpdateReferringDoctor | null): Observable<APIResponseOfAddOrUpdateReferringDoctorResult | null> {
        let url_ = this.baseUrl + "/api/referringdoctor/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateReferringDoctor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateReferringDoctor(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateReferringDoctorResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateReferringDoctorResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateReferringDoctor(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateReferringDoctorResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateReferringDoctorResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateReferringDoctorResult | null>(<any>null);
    }
}

@Injectable()
export class RequestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addNewRequest(value: AddNewRequest | null): Observable<APIResponseOfAddNewRequestResult | null> {
        let url_ = this.baseUrl + "/api/request/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddNewRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNewRequest(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddNewRequestResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddNewRequestResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddNewRequest(response: HttpResponseBase): Observable<APIResponseOfAddNewRequestResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddNewRequestResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddNewRequestResult | null>(<any>null);
    }

    findRequest(value: FindRequest | null): Observable<APIResponseOfFindRequestResult | null> {
        let url_ = this.baseUrl + "/api/request/find";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindRequest(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfFindRequestResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfFindRequestResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindRequest(response: HttpResponseBase): Observable<APIResponseOfFindRequestResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfFindRequestResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfFindRequestResult | null>(<any>null);
    }
}

@Injectable()
export class RolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAllRoles(): Observable<APIResponseOfRoleDOOf | null> {
        let url_ = this.baseUrl + "/api/roles/getall";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllRoles(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRoleDOOf | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRoleDOOf | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllRoles(response: HttpResponseBase): Observable<APIResponseOfRoleDOOf | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRoleDOOf.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRoleDOOf | null>(<any>null);
    }

    updateAllRoles(roles: RoleDO[] | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/roles/updateall";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(roles);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAllRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAllRoles(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAllRoles(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    getAllStaffForRolesAtLocations(request: GetStaffForRolesLocationsRequest | null): Observable<APIResponseOfListOfStaffDO | null> {
        let url_ = this.baseUrl + "/api/roles/staffRoleLocation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllStaffForRolesAtLocations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllStaffForRolesAtLocations(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfStaffDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfStaffDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllStaffForRolesAtLocations(response: HttpResponseBase): Observable<APIResponseOfListOfStaffDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfStaffDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfStaffDO | null>(<any>null);
    }
}

@Injectable()
export class RosterTemplateClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    init(): Observable<APIResponseOfRosterTemplateInit | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/Init";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInit(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterTemplateInit | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterTemplateInit | null>><any>_observableThrow(response_);
        }));
    }

    protected processInit(response: HttpResponseBase): Observable<APIResponseOfRosterTemplateInit | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterTemplateInit.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterTemplateInit | null>(<any>null);
    }

    getTemplatesForSet(setId: number): Observable<APIResponseOfListOfRosterTemplateDO | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/GetTemplates?";
        if (setId === undefined || setId === null)
            throw new Error("The parameter 'setId' must be defined and cannot be null.");
        else
            url_ += "setId=" + encodeURIComponent("" + setId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTemplatesForSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTemplatesForSet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfRosterTemplateDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfRosterTemplateDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTemplatesForSet(response: HttpResponseBase): Observable<APIResponseOfListOfRosterTemplateDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfRosterTemplateDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfRosterTemplateDO | null>(<any>null);
    }

    addNewRosterTemplateSet(setName: string | null, cycleLength: number, userPkId: string | null): Observable<APIResponseOfRosterTemplateSetDO | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/AddSet?";
        if (setName === undefined)
            throw new Error("The parameter 'setName' must be defined.");
        else
            url_ += "setName=" + encodeURIComponent("" + setName) + "&"; 
        if (cycleLength === undefined || cycleLength === null)
            throw new Error("The parameter 'cycleLength' must be defined and cannot be null.");
        else
            url_ += "cycleLength=" + encodeURIComponent("" + cycleLength) + "&"; 
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddNewRosterTemplateSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNewRosterTemplateSet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddNewRosterTemplateSet(response: HttpResponseBase): Observable<APIResponseOfRosterTemplateSetDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterTemplateSetDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterTemplateSetDO | null>(<any>null);
    }

    duplicateRosterTemplateSet(duplicateSetId: number, setName: string | null, cycleLength: number, userPkId: string | null): Observable<APIResponseOfRosterTemplateSetDO | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/DuplicateSet?";
        if (duplicateSetId === undefined || duplicateSetId === null)
            throw new Error("The parameter 'duplicateSetId' must be defined and cannot be null.");
        else
            url_ += "duplicateSetId=" + encodeURIComponent("" + duplicateSetId) + "&"; 
        if (setName === undefined)
            throw new Error("The parameter 'setName' must be defined.");
        else
            url_ += "setName=" + encodeURIComponent("" + setName) + "&"; 
        if (cycleLength === undefined || cycleLength === null)
            throw new Error("The parameter 'cycleLength' must be defined and cannot be null.");
        else
            url_ += "cycleLength=" + encodeURIComponent("" + cycleLength) + "&"; 
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDuplicateRosterTemplateSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDuplicateRosterTemplateSet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDuplicateRosterTemplateSet(response: HttpResponseBase): Observable<APIResponseOfRosterTemplateSetDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterTemplateSetDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterTemplateSetDO | null>(<any>null);
    }

    updateRosterTemplateSet(templateSet: RosterTemplateSetDO | null, userPkId: string | null): Observable<APIResponseOfRosterTemplateSetDO | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/UpdateSet?";
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(templateSet);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRosterTemplateSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRosterTemplateSet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterTemplateSetDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRosterTemplateSet(response: HttpResponseBase): Observable<APIResponseOfRosterTemplateSetDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterTemplateSetDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterTemplateSetDO | null>(<any>null);
    }

    deleteRosterTemplateSet(setId: number, userPkId: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/DeleteSet?";
        if (setId === undefined || setId === null)
            throw new Error("The parameter 'setId' must be defined and cannot be null.");
        else
            url_ += "setId=" + encodeURIComponent("" + setId) + "&"; 
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRosterTemplateSet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRosterTemplateSet(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRosterTemplateSet(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    saveRosterTemplates(request: RosterTemplatesSaveRequest | null): Observable<APIResponseOfRosterTemplatesSaveResult | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/SaveTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveRosterTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveRosterTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterTemplatesSaveResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterTemplatesSaveResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveRosterTemplates(response: HttpResponseBase): Observable<APIResponseOfRosterTemplatesSaveResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterTemplatesSaveResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterTemplatesSaveResult | null>(<any>null);
    }

    applyTemplates(setId: number, fromDate: Date, toDate: Date, includePublicHolidays: boolean, userPkId: string | null, userName: string | null, licenseUserId: number, cycleLength: number, startFromDay: number): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/Apply?";
        if (setId === undefined || setId === null)
            throw new Error("The parameter 'setId' must be defined and cannot be null.");
        else
            url_ += "setId=" + encodeURIComponent("" + setId) + "&"; 
        if (fromDate === undefined || fromDate === null)
            throw new Error("The parameter 'fromDate' must be defined and cannot be null.");
        else
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate === undefined || toDate === null)
            throw new Error("The parameter 'toDate' must be defined and cannot be null.");
        else
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        if (includePublicHolidays === undefined || includePublicHolidays === null)
            throw new Error("The parameter 'includePublicHolidays' must be defined and cannot be null.");
        else
            url_ += "includePublicHolidays=" + encodeURIComponent("" + includePublicHolidays) + "&"; 
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        if (userName === undefined)
            throw new Error("The parameter 'userName' must be defined.");
        else
            url_ += "userName=" + encodeURIComponent("" + userName) + "&"; 
        if (licenseUserId === undefined || licenseUserId === null)
            throw new Error("The parameter 'licenseUserId' must be defined and cannot be null.");
        else
            url_ += "licenseUserId=" + encodeURIComponent("" + licenseUserId) + "&"; 
        if (cycleLength === undefined || cycleLength === null)
            throw new Error("The parameter 'cycleLength' must be defined and cannot be null.");
        else
            url_ += "cycleLength=" + encodeURIComponent("" + cycleLength) + "&"; 
        if (startFromDay === undefined || startFromDay === null)
            throw new Error("The parameter 'startFromDay' must be defined and cannot be null.");
        else
            url_ += "startFromDay=" + encodeURIComponent("" + startFromDay) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplyTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplyTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processApplyTemplates(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    deleteTemplates(setId: number, fromDate: Date, toDate: Date, powerDelete: boolean, licenseUserId: number, userPkId: string | null): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/Delete?";
        if (setId === undefined || setId === null)
            throw new Error("The parameter 'setId' must be defined and cannot be null.");
        else
            url_ += "setId=" + encodeURIComponent("" + setId) + "&"; 
        if (fromDate === undefined || fromDate === null)
            throw new Error("The parameter 'fromDate' must be defined and cannot be null.");
        else
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate === undefined || toDate === null)
            throw new Error("The parameter 'toDate' must be defined and cannot be null.");
        else
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        if (powerDelete === undefined || powerDelete === null)
            throw new Error("The parameter 'powerDelete' must be defined and cannot be null.");
        else
            url_ += "powerDelete=" + encodeURIComponent("" + powerDelete) + "&"; 
        if (licenseUserId === undefined || licenseUserId === null)
            throw new Error("The parameter 'licenseUserId' must be defined and cannot be null.");
        else
            url_ += "licenseUserId=" + encodeURIComponent("" + licenseUserId) + "&"; 
        if (userPkId === undefined)
            throw new Error("The parameter 'userPkId' must be defined.");
        else
            url_ += "userPkId=" + encodeURIComponent("" + userPkId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTemplates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTemplates(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }

    getRoster(roster_ID: number): Observable<APIResponseOfRosterBookingDO | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/GetRoster?";
        if (roster_ID === undefined || roster_ID === null)
            throw new Error("The parameter 'roster_ID' must be defined and cannot be null.");
        else
            url_ += "roster_ID=" + encodeURIComponent("" + roster_ID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoster(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoster(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRosterBookingDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRosterBookingDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoster(response: HttpResponseBase): Observable<APIResponseOfRosterBookingDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRosterBookingDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRosterBookingDO | null>(<any>null);
    }

    splitRoster(roster_ID: number, newEndTime: Date, newDuration: number, user: string | null, pushEndTime: boolean): Observable<APIResponseOfBoolean | null> {
        let url_ = this.baseUrl + "/api/RosterTemplate/SplitRoster?";
        if (roster_ID === undefined || roster_ID === null)
            throw new Error("The parameter 'roster_ID' must be defined and cannot be null.");
        else
            url_ += "roster_ID=" + encodeURIComponent("" + roster_ID) + "&"; 
        if (newEndTime === undefined || newEndTime === null)
            throw new Error("The parameter 'newEndTime' must be defined and cannot be null.");
        else
            url_ += "newEndTime=" + encodeURIComponent(newEndTime ? "" + newEndTime.toJSON() : "") + "&"; 
        if (newDuration === undefined || newDuration === null)
            throw new Error("The parameter 'newDuration' must be defined and cannot be null.");
        else
            url_ += "newDuration=" + encodeURIComponent("" + newDuration) + "&"; 
        if (user === undefined)
            throw new Error("The parameter 'user' must be defined.");
        else
            url_ += "user=" + encodeURIComponent("" + user) + "&"; 
        if (pushEndTime === undefined || pushEndTime === null)
            throw new Error("The parameter 'pushEndTime' must be defined and cannot be null.");
        else
            url_ += "pushEndTime=" + encodeURIComponent("" + pushEndTime) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSplitRoster(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSplitRoster(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfBoolean | null>><any>_observableThrow(response_);
        }));
    }

    protected processSplitRoster(response: HttpResponseBase): Observable<APIResponseOfBoolean | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfBoolean.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfBoolean | null>(<any>null);
    }
}

@Injectable()
export class SingleSignOnClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getDataForToken(value: RetrieveDataForToken | null): Observable<APIResponseOfRetrieveDataForTokenResult | null> {
        let url_ = this.baseUrl + "/api/token/getData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDataForToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDataForToken(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfRetrieveDataForTokenResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfRetrieveDataForTokenResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDataForToken(response: HttpResponseBase): Observable<APIResponseOfRetrieveDataForTokenResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfRetrieveDataForTokenResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfRetrieveDataForTokenResult | null>(<any>null);
    }
}

@Injectable()
export class TaskClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    addOrUpdateTask(value: AddOrUpdateTask | null): Observable<APIResponseOfAddOrUpdateTaskResult | null> {
        let url_ = this.baseUrl + "/api/task/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateTask(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateTaskResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateTaskResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddOrUpdateTask(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateTaskResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateTaskResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateTaskResult | null>(<any>null);
    }
}

@Injectable()
export class TestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    status(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStatus(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processStatus(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    test(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processTest(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    testApiException(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/testexception";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestApiException(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestApiException(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processTestApiException(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable()
export class TriageClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getTriageBooking(bookingId: number): Observable<APIResponseOfTriageBookingDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetTriageBooking?";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined and cannot be null.");
        else
            url_ += "bookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTriageBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTriageBooking(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTriageBookingDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTriageBookingDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTriageBooking(response: HttpResponseBase): Observable<APIResponseOfTriageBookingDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTriageBookingDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTriageBookingDO | null>(<any>null);
    }

    getPurposes(): Observable<APIResponseOfListOfBookingTypeDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetPurposes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPurposes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPurposes(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfBookingTypeDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfBookingTypeDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetPurposes(response: HttpResponseBase): Observable<APIResponseOfListOfBookingTypeDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfBookingTypeDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfBookingTypeDO | null>(<any>null);
    }

    getWorkflowSteps(): Observable<APIResponseOfListOfString | null> {
        let url_ = this.baseUrl + "/api/Triage/GetWorkflowSteps";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkflowSteps(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkflowSteps(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfString | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfString | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkflowSteps(response: HttpResponseBase): Observable<APIResponseOfListOfString | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfString.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfString | null>(<any>null);
    }

    getTriageOptions(): Observable<APIResponseOfListOfTriageOptionDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetTriageOptions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTriageOptions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTriageOptions(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfTriageOptionDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfTriageOptionDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTriageOptions(response: HttpResponseBase): Observable<APIResponseOfListOfTriageOptionDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfTriageOptionDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfTriageOptionDO | null>(<any>null);
    }

    getReferrals(booking: TriageBookingDO | null): Observable<APIResponseOfListOfTriageReferralDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetReferrals";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(booking);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferrals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferrals(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfTriageReferralDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfTriageReferralDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReferrals(response: HttpResponseBase): Observable<APIResponseOfListOfTriageReferralDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfTriageReferralDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfTriageReferralDO | null>(<any>null);
    }

    getLocationsAndDoctors(): Observable<APIResponseOfListOfLocationWithDoctors | null> {
        let url_ = this.baseUrl + "/api/Triage/GetLocationsAndDoctors";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocationsAndDoctors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocationsAndDoctors(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfLocationWithDoctors | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfLocationWithDoctors | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLocationsAndDoctors(response: HttpResponseBase): Observable<APIResponseOfListOfLocationWithDoctors | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfLocationWithDoctors.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfLocationWithDoctors | null>(<any>null);
    }

    getAssociates(locationId: number): Observable<APIResponseOfListOfStaffDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetAssociates?";
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined and cannot be null.");
        else
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssociates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssociates(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfListOfStaffDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfListOfStaffDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssociates(response: HttpResponseBase): Observable<APIResponseOfListOfStaffDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfListOfStaffDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfListOfStaffDO | null>(<any>null);
    }

    saveTriageBookingAppointment(triageBookingAppointment: TriageBookingAppointmentDO | null, userId: string | null): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        let url_ = this.baseUrl + "/api/Triage/SaveTriageAppointment?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(triageBookingAppointment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveTriageBookingAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveTriageBookingAppointment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveTriageBookingAppointment(response: HttpResponseBase): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTriageBookingAppointmentDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTriageBookingAppointmentDO | null>(<any>null);
    }

    getTriageAppointment(appointmentId: number): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        let url_ = this.baseUrl + "/api/Triage/GetTriageAppointment?";
        if (appointmentId === undefined || appointmentId === null)
            throw new Error("The parameter 'appointmentId' must be defined and cannot be null.");
        else
            url_ += "appointmentId=" + encodeURIComponent("" + appointmentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTriageAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTriageAppointment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetTriageAppointment(response: HttpResponseBase): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTriageBookingAppointmentDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTriageBookingAppointmentDO | null>(<any>null);
    }

    updateTriageBookingAppointment(triageBookingAppointment: TriageBookingAppointmentDO | null, userId: string | null): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        let url_ = this.baseUrl + "/api/Triage/UpdateTriageAppointment?";
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(triageBookingAppointment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTriageBookingAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTriageBookingAppointment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTriageBookingAppointment(response: HttpResponseBase): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTriageBookingAppointmentDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTriageBookingAppointmentDO | null>(<any>null);
    }

    deleteTriageBookingAppointment(appointmentId: number, userId: string | null): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        let url_ = this.baseUrl + "/api/Triage/DeleteTriageAppointment?";
        if (appointmentId === undefined || appointmentId === null)
            throw new Error("The parameter 'appointmentId' must be defined and cannot be null.");
        else
            url_ += "appointmentId=" + encodeURIComponent("" + appointmentId) + "&"; 
        if (userId === undefined)
            throw new Error("The parameter 'userId' must be defined.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTriageBookingAppointment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTriageBookingAppointment(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfTriageBookingAppointmentDO | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTriageBookingAppointment(response: HttpResponseBase): Observable<APIResponseOfTriageBookingAppointmentDO | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfTriageBookingAppointmentDO.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfTriageBookingAppointmentDO | null>(<any>null);
    }
}

@Injectable()
export class TriageBookingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    findIncomingOrderByOrderNumber(value: AddOrUpdateTriageBooking | null): Observable<APIResponseOfAddOrUpdateTriageBookingResult | null> {
        let url_ = this.baseUrl + "/api/triagebooking/addorupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindIncomingOrderByOrderNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindIncomingOrderByOrderNumber(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateTriageBookingResult | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateTriageBookingResult | null>><any>_observableThrow(response_);
        }));
    }

    protected processFindIncomingOrderByOrderNumber(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateTriageBookingResult | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateTriageBookingResult.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateTriageBookingResult | null>(<any>null);
    }
}

@Injectable()
export class WindowLayoutClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getLayout(token: string | null | undefined, url: string | null | undefined, screenPrefix: string | null | undefined, correlationID: string | null | undefined): Observable<APIResponseOfGetWindowLayoutResponse | null> {
        let url_ = this.baseUrl + "/api/windowlayout?";
        if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&"; 
        if (url !== undefined)
            url_ += "url=" + encodeURIComponent("" + url) + "&"; 
        if (screenPrefix !== undefined)
            url_ += "screenPrefix=" + encodeURIComponent("" + screenPrefix) + "&"; 
        if (correlationID !== undefined)
            url_ += "correlationID=" + encodeURIComponent("" + correlationID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLayout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLayout(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfGetWindowLayoutResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfGetWindowLayoutResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLayout(response: HttpResponseBase): Observable<APIResponseOfGetWindowLayoutResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfGetWindowLayoutResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfGetWindowLayoutResponse | null>(<any>null);
    }

    saveLayout(value: AddOrUpdateWindowLayout | null): Observable<APIResponseOfAddOrUpdateWindowLayoutResponse | null> {
        let url_ = this.baseUrl + "/api/windowlayout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveLayout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveLayout(<any>response_);
                } catch (e) {
                    return <Observable<APIResponseOfAddOrUpdateWindowLayoutResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<APIResponseOfAddOrUpdateWindowLayoutResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processSaveLayout(response: HttpResponseBase): Observable<APIResponseOfAddOrUpdateWindowLayoutResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? APIResponseOfAddOrUpdateWindowLayoutResponse.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<APIResponseOfAddOrUpdateWindowLayoutResponse | null>(<any>null);
    }
}

export class CorrelatableRequestParams implements ICorrelatableRequestParams {
    correlationID?: string | null;

    constructor(data?: ICorrelatableRequestParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.correlationID = data["correlationID"] !== undefined ? data["correlationID"] : <any>null;
        }
    }

    static fromJS(data: any): CorrelatableRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new CorrelatableRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["correlationID"] = this.correlationID !== undefined ? this.correlationID : <any>null;
        return data; 
    }
}

export interface ICorrelatableRequestParams {
    correlationID?: string | null;
}

export class BaseRequestParams extends CorrelatableRequestParams implements IBaseRequestParams {
    propertiesToClear?: string[] | null;

    constructor(data?: IBaseRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["propertiesToClear"] && data["propertiesToClear"].constructor === Array) {
                this.propertiesToClear = [];
                for (let item of data["propertiesToClear"])
                    this.propertiesToClear.push(item);
            }
        }
    }

    static fromJS(data: any): BaseRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.propertiesToClear && this.propertiesToClear.constructor === Array) {
            data["propertiesToClear"] = [];
            for (let item of this.propertiesToClear)
                data["propertiesToClear"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBaseRequestParams extends ICorrelatableRequestParams {
    propertiesToClear?: string[] | null;
}

export class AddOrUpdateActivityLogParams extends BaseRequestParams implements IAddOrUpdateActivityLogParams {
    id!: number;
    correlation_ID?: string | null;
    correlation_Type?: string | null;
    dateOccurred?: Date | null;
    feed_ID?: number | null;
    raw_Patient_Firstname?: string | null;
    raw_Patient_DOB?: string | null;
    raw_Patient_AssigningAuthority?: string | null;
    raw_Patient_Identifier?: string | null;
    raw_Patient_Surname?: string | null;
    matched_HealthTrack_Patient_ID?: number | null;
    action?: string | null;
    message?: string | null;

    constructor(data?: IAddOrUpdateActivityLogParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.correlation_ID = data["correlation_ID"] !== undefined ? data["correlation_ID"] : <any>null;
            this.correlation_Type = data["correlation_Type"] !== undefined ? data["correlation_Type"] : <any>null;
            this.dateOccurred = data["dateOccurred"] ? new Date(data["dateOccurred"].toString()) : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.raw_Patient_Firstname = data["raw_Patient_Firstname"] !== undefined ? data["raw_Patient_Firstname"] : <any>null;
            this.raw_Patient_DOB = data["raw_Patient_DOB"] !== undefined ? data["raw_Patient_DOB"] : <any>null;
            this.raw_Patient_AssigningAuthority = data["raw_Patient_AssigningAuthority"] !== undefined ? data["raw_Patient_AssigningAuthority"] : <any>null;
            this.raw_Patient_Identifier = data["raw_Patient_Identifier"] !== undefined ? data["raw_Patient_Identifier"] : <any>null;
            this.raw_Patient_Surname = data["raw_Patient_Surname"] !== undefined ? data["raw_Patient_Surname"] : <any>null;
            this.matched_HealthTrack_Patient_ID = data["matched_HealthTrack_Patient_ID"] !== undefined ? data["matched_HealthTrack_Patient_ID"] : <any>null;
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateActivityLogParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateActivityLogParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["correlation_ID"] = this.correlation_ID !== undefined ? this.correlation_ID : <any>null;
        data["correlation_Type"] = this.correlation_Type !== undefined ? this.correlation_Type : <any>null;
        data["dateOccurred"] = this.dateOccurred ? this.dateOccurred.toISOString() : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["raw_Patient_Firstname"] = this.raw_Patient_Firstname !== undefined ? this.raw_Patient_Firstname : <any>null;
        data["raw_Patient_DOB"] = this.raw_Patient_DOB !== undefined ? this.raw_Patient_DOB : <any>null;
        data["raw_Patient_AssigningAuthority"] = this.raw_Patient_AssigningAuthority !== undefined ? this.raw_Patient_AssigningAuthority : <any>null;
        data["raw_Patient_Identifier"] = this.raw_Patient_Identifier !== undefined ? this.raw_Patient_Identifier : <any>null;
        data["raw_Patient_Surname"] = this.raw_Patient_Surname !== undefined ? this.raw_Patient_Surname : <any>null;
        data["matched_HealthTrack_Patient_ID"] = this.matched_HealthTrack_Patient_ID !== undefined ? this.matched_HealthTrack_Patient_ID : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateActivityLogParams extends IBaseRequestParams {
    id: number;
    correlation_ID?: string | null;
    correlation_Type?: string | null;
    dateOccurred?: Date | null;
    feed_ID?: number | null;
    raw_Patient_Firstname?: string | null;
    raw_Patient_DOB?: string | null;
    raw_Patient_AssigningAuthority?: string | null;
    raw_Patient_Identifier?: string | null;
    raw_Patient_Surname?: string | null;
    matched_HealthTrack_Patient_ID?: number | null;
    action?: string | null;
    message?: string | null;
}

export class AddOrUpdateActivityLog extends AddOrUpdateActivityLogParams implements IAddOrUpdateActivityLog {

    constructor(data?: IAddOrUpdateActivityLog) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateActivityLog {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateActivityLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateActivityLog extends IAddOrUpdateActivityLogParams {
}

export class ProvideErrorMessage implements IProvideErrorMessage {
    errorMessage?: string | null;

    constructor(data?: IProvideErrorMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.errorMessage = data["errorMessage"] !== undefined ? data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): ProvideErrorMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ProvideErrorMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data; 
    }
}

export interface IProvideErrorMessage {
    errorMessage?: string | null;
}

export class APIResponseOfAddOrUpdateActivityLogResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateActivityLogResult {
    data?: AddOrUpdateActivityLogResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateActivityLogResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateActivityLogResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateActivityLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateActivityLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateActivityLogResult extends IProvideErrorMessage {
    data?: IAddOrUpdateActivityLogResult | null;
}

export class AddOrUpdateActivityLogResult extends ProvideErrorMessage implements IAddOrUpdateActivityLogResult {
    id!: number;

    constructor(data?: IAddOrUpdateActivityLogResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateActivityLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateActivityLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateActivityLogResult extends IProvideErrorMessage {
    id: number;
}

export class AddOrUpdateAdmissionParams extends BaseRequestParams implements IAddOrUpdateAdmissionParams {
    mO_Admitting?: number | null;
    mO_Consultant?: number | null;
    mO_Surgeon?: number | null;
    modeOfSeparation?: number | null;
    nonCertifiedDays?: number | null;
    palliativeCareDays?: number | null;
    palliativeCareStatusCode?: number | null;
    hospitalBillingComplete?: boolean | null;
    patient_ID!: number;
    phiscoCountryOfBirth?: number | null;
    phiscoHealthInsuranceStatus?: number | null;
    phiscoLanguageSpokenAtHome?: number | null;
    preAdmissionAssessmentComplete?: boolean | null;
    readmissionWithin28Days?: number | null;
    referral_ID?: number | null;
    paymentModel?: string | null;
    mO_Attending?: number | null;
    hospitalStayBillingComplete?: boolean | null;
    invoiceToFeeContract?: number | null;
    mentalHealthLegalStatus?: number | null;
    mechanicalVentilationHrs?: number | null;
    leaveDays?: number | null;
    reportingComplete?: boolean | null;
    isTransferred?: boolean | null;
    iscState?: number | null;
    invoiceTo?: number | null;
    iscPaymentStatusOnSeparation?: number | null;
    iscLanguageSpokenAtHome?: number | null;
    iscIndigenousOrigin?: number | null;
    iscHealthInsuranceStatus?: number | null;
    iscDateOfFirstProcedure?: Date | null;
    iscCountryOfBirth?: number | null;
    invoiceToFundCompany?: number | null;
    iscMaritalStatus?: number | null;
    sameDayStatus?: number | null;
    totalPsychiatricCareDays?: number | null;
    submission_Status?: string | null;
    sourceOfReferral?: number | null;
    userLastModified_Discharge?: string | null;
    surgeonType?: string | null;
    svB_ChargeAmount?: number | null;
    svB_ChargeRaisedCde?: string | null;
    svB_FromDate?: Date | null;
    svB_NumberOfDays?: number | null;
    svB_ServiceCode?: string | null;
    svB_ServiceCodeTypeCode?: string | null;
    svB_ToDate?: Date | null;
    totalHospitalChargeAmount?: number | null;
    totalMedicalChargeAmount?: number | null;
    hospitalBillingClass?: string | null;
    urgencyOfAdmission?: number | null;
    userCreated_admission?: string | null;
    userCreated_Discharge?: string | null;
    userLastModified_admission?: string | null;
    hosp_TransferFrom?: string | null;
    dischargeIntention?: number | null;
    hosp_MRN?: string | null;
    consultingMOType?: string | null;
    compensationClaimCde?: number | null;
    codingComplete?: boolean | null;
    claimTypeCde?: string | null;
    attendingMOType?: string | null;
    adT_Ward?: number | null;
    adT_Unit?: number | null;
    hosp_MRN_Alt?: string | null;
    adT_Hospital_ID?: number | null;
    adT_Class?: number | null;
    adT_Bed?: string | null;
    contiguousClaimCode?: string | null;
    admittingMOType?: string | null;
    admission_State?: number | null;
    admission_Procedure_Description?: string | null;
    admission_Procedure_Code?: number | null;
    admission_Notes?: string | null;
    admission_Indication_Description?: string | null;
    admission_Indication_Code?: number | null;
    admission_Diagnosis_Description?: string | null;
    admission_Diagnosis_Code?: number | null;
    admission_Complications?: number | null;
    accommodation?: number | null;
    admissionType?: number | null;
    createdByUser?: boolean | null;
    adT_Status?: number | null;
    dateCreated_admission?: Date | null;
    hosp_AdmissionNum?: string | null;
    fundedBy?: number | null;
    date_ExpectedDischarge?: Date | null;
    facilityContractStatusCode?: number | null;
    episodeTypeCode?: number | null;
    episode_ID?: number | null;
    eligibilityLevel?: number | null;
    drType?: number | null;
    drgVersion?: string | null;
    drgCode?: string | null;
    discharge_Transfer?: number | null;
    discharge_To?: number | null;
    facilityTypeCode?: number | null;
    discharge_Notes?: string | null;
    discharge_Diagnosis_Description?: string | null;
    discharge_Diagnosis_Code?: number | null;
    deletionUser?: string | null;
    deletionDate?: Date | null;
    deleted?: boolean | null;
    dateTime_Discharge?: Date | null;
    dateTime_Admission?: Date | null;
    dateLastModified_Discharge?: Date | null;
    dateLastModified_admission?: Date | null;
    dateCreated_Discharge?: Date | null;
    discharge_Status?: string | null;
    feed_ID!: number;

    constructor(data?: IAddOrUpdateAdmissionParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.mO_Admitting = data["mO_Admitting"] !== undefined ? data["mO_Admitting"] : <any>null;
            this.mO_Consultant = data["mO_Consultant"] !== undefined ? data["mO_Consultant"] : <any>null;
            this.mO_Surgeon = data["mO_Surgeon"] !== undefined ? data["mO_Surgeon"] : <any>null;
            this.modeOfSeparation = data["modeOfSeparation"] !== undefined ? data["modeOfSeparation"] : <any>null;
            this.nonCertifiedDays = data["nonCertifiedDays"] !== undefined ? data["nonCertifiedDays"] : <any>null;
            this.palliativeCareDays = data["palliativeCareDays"] !== undefined ? data["palliativeCareDays"] : <any>null;
            this.palliativeCareStatusCode = data["palliativeCareStatusCode"] !== undefined ? data["palliativeCareStatusCode"] : <any>null;
            this.hospitalBillingComplete = data["hospitalBillingComplete"] !== undefined ? data["hospitalBillingComplete"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.phiscoCountryOfBirth = data["phiscoCountryOfBirth"] !== undefined ? data["phiscoCountryOfBirth"] : <any>null;
            this.phiscoHealthInsuranceStatus = data["phiscoHealthInsuranceStatus"] !== undefined ? data["phiscoHealthInsuranceStatus"] : <any>null;
            this.phiscoLanguageSpokenAtHome = data["phiscoLanguageSpokenAtHome"] !== undefined ? data["phiscoLanguageSpokenAtHome"] : <any>null;
            this.preAdmissionAssessmentComplete = data["preAdmissionAssessmentComplete"] !== undefined ? data["preAdmissionAssessmentComplete"] : <any>null;
            this.readmissionWithin28Days = data["readmissionWithin28Days"] !== undefined ? data["readmissionWithin28Days"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
            this.paymentModel = data["paymentModel"] !== undefined ? data["paymentModel"] : <any>null;
            this.mO_Attending = data["mO_Attending"] !== undefined ? data["mO_Attending"] : <any>null;
            this.hospitalStayBillingComplete = data["hospitalStayBillingComplete"] !== undefined ? data["hospitalStayBillingComplete"] : <any>null;
            this.invoiceToFeeContract = data["invoiceToFeeContract"] !== undefined ? data["invoiceToFeeContract"] : <any>null;
            this.mentalHealthLegalStatus = data["mentalHealthLegalStatus"] !== undefined ? data["mentalHealthLegalStatus"] : <any>null;
            this.mechanicalVentilationHrs = data["mechanicalVentilationHrs"] !== undefined ? data["mechanicalVentilationHrs"] : <any>null;
            this.leaveDays = data["leaveDays"] !== undefined ? data["leaveDays"] : <any>null;
            this.reportingComplete = data["reportingComplete"] !== undefined ? data["reportingComplete"] : <any>null;
            this.isTransferred = data["isTransferred"] !== undefined ? data["isTransferred"] : <any>null;
            this.iscState = data["iscState"] !== undefined ? data["iscState"] : <any>null;
            this.invoiceTo = data["invoiceTo"] !== undefined ? data["invoiceTo"] : <any>null;
            this.iscPaymentStatusOnSeparation = data["iscPaymentStatusOnSeparation"] !== undefined ? data["iscPaymentStatusOnSeparation"] : <any>null;
            this.iscLanguageSpokenAtHome = data["iscLanguageSpokenAtHome"] !== undefined ? data["iscLanguageSpokenAtHome"] : <any>null;
            this.iscIndigenousOrigin = data["iscIndigenousOrigin"] !== undefined ? data["iscIndigenousOrigin"] : <any>null;
            this.iscHealthInsuranceStatus = data["iscHealthInsuranceStatus"] !== undefined ? data["iscHealthInsuranceStatus"] : <any>null;
            this.iscDateOfFirstProcedure = data["iscDateOfFirstProcedure"] ? new Date(data["iscDateOfFirstProcedure"].toString()) : <any>null;
            this.iscCountryOfBirth = data["iscCountryOfBirth"] !== undefined ? data["iscCountryOfBirth"] : <any>null;
            this.invoiceToFundCompany = data["invoiceToFundCompany"] !== undefined ? data["invoiceToFundCompany"] : <any>null;
            this.iscMaritalStatus = data["iscMaritalStatus"] !== undefined ? data["iscMaritalStatus"] : <any>null;
            this.sameDayStatus = data["sameDayStatus"] !== undefined ? data["sameDayStatus"] : <any>null;
            this.totalPsychiatricCareDays = data["totalPsychiatricCareDays"] !== undefined ? data["totalPsychiatricCareDays"] : <any>null;
            this.submission_Status = data["submission_Status"] !== undefined ? data["submission_Status"] : <any>null;
            this.sourceOfReferral = data["sourceOfReferral"] !== undefined ? data["sourceOfReferral"] : <any>null;
            this.userLastModified_Discharge = data["userLastModified_Discharge"] !== undefined ? data["userLastModified_Discharge"] : <any>null;
            this.surgeonType = data["surgeonType"] !== undefined ? data["surgeonType"] : <any>null;
            this.svB_ChargeAmount = data["svB_ChargeAmount"] !== undefined ? data["svB_ChargeAmount"] : <any>null;
            this.svB_ChargeRaisedCde = data["svB_ChargeRaisedCde"] !== undefined ? data["svB_ChargeRaisedCde"] : <any>null;
            this.svB_FromDate = data["svB_FromDate"] ? new Date(data["svB_FromDate"].toString()) : <any>null;
            this.svB_NumberOfDays = data["svB_NumberOfDays"] !== undefined ? data["svB_NumberOfDays"] : <any>null;
            this.svB_ServiceCode = data["svB_ServiceCode"] !== undefined ? data["svB_ServiceCode"] : <any>null;
            this.svB_ServiceCodeTypeCode = data["svB_ServiceCodeTypeCode"] !== undefined ? data["svB_ServiceCodeTypeCode"] : <any>null;
            this.svB_ToDate = data["svB_ToDate"] ? new Date(data["svB_ToDate"].toString()) : <any>null;
            this.totalHospitalChargeAmount = data["totalHospitalChargeAmount"] !== undefined ? data["totalHospitalChargeAmount"] : <any>null;
            this.totalMedicalChargeAmount = data["totalMedicalChargeAmount"] !== undefined ? data["totalMedicalChargeAmount"] : <any>null;
            this.hospitalBillingClass = data["hospitalBillingClass"] !== undefined ? data["hospitalBillingClass"] : <any>null;
            this.urgencyOfAdmission = data["urgencyOfAdmission"] !== undefined ? data["urgencyOfAdmission"] : <any>null;
            this.userCreated_admission = data["userCreated_admission"] !== undefined ? data["userCreated_admission"] : <any>null;
            this.userCreated_Discharge = data["userCreated_Discharge"] !== undefined ? data["userCreated_Discharge"] : <any>null;
            this.userLastModified_admission = data["userLastModified_admission"] !== undefined ? data["userLastModified_admission"] : <any>null;
            this.hosp_TransferFrom = data["hosp_TransferFrom"] !== undefined ? data["hosp_TransferFrom"] : <any>null;
            this.dischargeIntention = data["dischargeIntention"] !== undefined ? data["dischargeIntention"] : <any>null;
            this.hosp_MRN = data["hosp_MRN"] !== undefined ? data["hosp_MRN"] : <any>null;
            this.consultingMOType = data["consultingMOType"] !== undefined ? data["consultingMOType"] : <any>null;
            this.compensationClaimCde = data["compensationClaimCde"] !== undefined ? data["compensationClaimCde"] : <any>null;
            this.codingComplete = data["codingComplete"] !== undefined ? data["codingComplete"] : <any>null;
            this.claimTypeCde = data["claimTypeCde"] !== undefined ? data["claimTypeCde"] : <any>null;
            this.attendingMOType = data["attendingMOType"] !== undefined ? data["attendingMOType"] : <any>null;
            this.adT_Ward = data["adT_Ward"] !== undefined ? data["adT_Ward"] : <any>null;
            this.adT_Unit = data["adT_Unit"] !== undefined ? data["adT_Unit"] : <any>null;
            this.hosp_MRN_Alt = data["hosp_MRN_Alt"] !== undefined ? data["hosp_MRN_Alt"] : <any>null;
            this.adT_Hospital_ID = data["adT_Hospital_ID"] !== undefined ? data["adT_Hospital_ID"] : <any>null;
            this.adT_Class = data["adT_Class"] !== undefined ? data["adT_Class"] : <any>null;
            this.adT_Bed = data["adT_Bed"] !== undefined ? data["adT_Bed"] : <any>null;
            this.contiguousClaimCode = data["contiguousClaimCode"] !== undefined ? data["contiguousClaimCode"] : <any>null;
            this.admittingMOType = data["admittingMOType"] !== undefined ? data["admittingMOType"] : <any>null;
            this.admission_State = data["admission_State"] !== undefined ? data["admission_State"] : <any>null;
            this.admission_Procedure_Description = data["admission_Procedure_Description"] !== undefined ? data["admission_Procedure_Description"] : <any>null;
            this.admission_Procedure_Code = data["admission_Procedure_Code"] !== undefined ? data["admission_Procedure_Code"] : <any>null;
            this.admission_Notes = data["admission_Notes"] !== undefined ? data["admission_Notes"] : <any>null;
            this.admission_Indication_Description = data["admission_Indication_Description"] !== undefined ? data["admission_Indication_Description"] : <any>null;
            this.admission_Indication_Code = data["admission_Indication_Code"] !== undefined ? data["admission_Indication_Code"] : <any>null;
            this.admission_Diagnosis_Description = data["admission_Diagnosis_Description"] !== undefined ? data["admission_Diagnosis_Description"] : <any>null;
            this.admission_Diagnosis_Code = data["admission_Diagnosis_Code"] !== undefined ? data["admission_Diagnosis_Code"] : <any>null;
            this.admission_Complications = data["admission_Complications"] !== undefined ? data["admission_Complications"] : <any>null;
            this.accommodation = data["accommodation"] !== undefined ? data["accommodation"] : <any>null;
            this.admissionType = data["admissionType"] !== undefined ? data["admissionType"] : <any>null;
            this.createdByUser = data["createdByUser"] !== undefined ? data["createdByUser"] : <any>null;
            this.adT_Status = data["adT_Status"] !== undefined ? data["adT_Status"] : <any>null;
            this.dateCreated_admission = data["dateCreated_admission"] ? new Date(data["dateCreated_admission"].toString()) : <any>null;
            this.hosp_AdmissionNum = data["hosp_AdmissionNum"] !== undefined ? data["hosp_AdmissionNum"] : <any>null;
            this.fundedBy = data["fundedBy"] !== undefined ? data["fundedBy"] : <any>null;
            this.date_ExpectedDischarge = data["date_ExpectedDischarge"] ? new Date(data["date_ExpectedDischarge"].toString()) : <any>null;
            this.facilityContractStatusCode = data["facilityContractStatusCode"] !== undefined ? data["facilityContractStatusCode"] : <any>null;
            this.episodeTypeCode = data["episodeTypeCode"] !== undefined ? data["episodeTypeCode"] : <any>null;
            this.episode_ID = data["episode_ID"] !== undefined ? data["episode_ID"] : <any>null;
            this.eligibilityLevel = data["eligibilityLevel"] !== undefined ? data["eligibilityLevel"] : <any>null;
            this.drType = data["drType"] !== undefined ? data["drType"] : <any>null;
            this.drgVersion = data["drgVersion"] !== undefined ? data["drgVersion"] : <any>null;
            this.drgCode = data["drgCode"] !== undefined ? data["drgCode"] : <any>null;
            this.discharge_Transfer = data["discharge_Transfer"] !== undefined ? data["discharge_Transfer"] : <any>null;
            this.discharge_To = data["discharge_To"] !== undefined ? data["discharge_To"] : <any>null;
            this.facilityTypeCode = data["facilityTypeCode"] !== undefined ? data["facilityTypeCode"] : <any>null;
            this.discharge_Notes = data["discharge_Notes"] !== undefined ? data["discharge_Notes"] : <any>null;
            this.discharge_Diagnosis_Description = data["discharge_Diagnosis_Description"] !== undefined ? data["discharge_Diagnosis_Description"] : <any>null;
            this.discharge_Diagnosis_Code = data["discharge_Diagnosis_Code"] !== undefined ? data["discharge_Diagnosis_Code"] : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.dateTime_Discharge = data["dateTime_Discharge"] ? new Date(data["dateTime_Discharge"].toString()) : <any>null;
            this.dateTime_Admission = data["dateTime_Admission"] ? new Date(data["dateTime_Admission"].toString()) : <any>null;
            this.dateLastModified_Discharge = data["dateLastModified_Discharge"] ? new Date(data["dateLastModified_Discharge"].toString()) : <any>null;
            this.dateLastModified_admission = data["dateLastModified_admission"] ? new Date(data["dateLastModified_admission"].toString()) : <any>null;
            this.dateCreated_Discharge = data["dateCreated_Discharge"] ? new Date(data["dateCreated_Discharge"].toString()) : <any>null;
            this.discharge_Status = data["discharge_Status"] !== undefined ? data["discharge_Status"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateAdmissionParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAdmissionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mO_Admitting"] = this.mO_Admitting !== undefined ? this.mO_Admitting : <any>null;
        data["mO_Consultant"] = this.mO_Consultant !== undefined ? this.mO_Consultant : <any>null;
        data["mO_Surgeon"] = this.mO_Surgeon !== undefined ? this.mO_Surgeon : <any>null;
        data["modeOfSeparation"] = this.modeOfSeparation !== undefined ? this.modeOfSeparation : <any>null;
        data["nonCertifiedDays"] = this.nonCertifiedDays !== undefined ? this.nonCertifiedDays : <any>null;
        data["palliativeCareDays"] = this.palliativeCareDays !== undefined ? this.palliativeCareDays : <any>null;
        data["palliativeCareStatusCode"] = this.palliativeCareStatusCode !== undefined ? this.palliativeCareStatusCode : <any>null;
        data["hospitalBillingComplete"] = this.hospitalBillingComplete !== undefined ? this.hospitalBillingComplete : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["phiscoCountryOfBirth"] = this.phiscoCountryOfBirth !== undefined ? this.phiscoCountryOfBirth : <any>null;
        data["phiscoHealthInsuranceStatus"] = this.phiscoHealthInsuranceStatus !== undefined ? this.phiscoHealthInsuranceStatus : <any>null;
        data["phiscoLanguageSpokenAtHome"] = this.phiscoLanguageSpokenAtHome !== undefined ? this.phiscoLanguageSpokenAtHome : <any>null;
        data["preAdmissionAssessmentComplete"] = this.preAdmissionAssessmentComplete !== undefined ? this.preAdmissionAssessmentComplete : <any>null;
        data["readmissionWithin28Days"] = this.readmissionWithin28Days !== undefined ? this.readmissionWithin28Days : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        data["paymentModel"] = this.paymentModel !== undefined ? this.paymentModel : <any>null;
        data["mO_Attending"] = this.mO_Attending !== undefined ? this.mO_Attending : <any>null;
        data["hospitalStayBillingComplete"] = this.hospitalStayBillingComplete !== undefined ? this.hospitalStayBillingComplete : <any>null;
        data["invoiceToFeeContract"] = this.invoiceToFeeContract !== undefined ? this.invoiceToFeeContract : <any>null;
        data["mentalHealthLegalStatus"] = this.mentalHealthLegalStatus !== undefined ? this.mentalHealthLegalStatus : <any>null;
        data["mechanicalVentilationHrs"] = this.mechanicalVentilationHrs !== undefined ? this.mechanicalVentilationHrs : <any>null;
        data["leaveDays"] = this.leaveDays !== undefined ? this.leaveDays : <any>null;
        data["reportingComplete"] = this.reportingComplete !== undefined ? this.reportingComplete : <any>null;
        data["isTransferred"] = this.isTransferred !== undefined ? this.isTransferred : <any>null;
        data["iscState"] = this.iscState !== undefined ? this.iscState : <any>null;
        data["invoiceTo"] = this.invoiceTo !== undefined ? this.invoiceTo : <any>null;
        data["iscPaymentStatusOnSeparation"] = this.iscPaymentStatusOnSeparation !== undefined ? this.iscPaymentStatusOnSeparation : <any>null;
        data["iscLanguageSpokenAtHome"] = this.iscLanguageSpokenAtHome !== undefined ? this.iscLanguageSpokenAtHome : <any>null;
        data["iscIndigenousOrigin"] = this.iscIndigenousOrigin !== undefined ? this.iscIndigenousOrigin : <any>null;
        data["iscHealthInsuranceStatus"] = this.iscHealthInsuranceStatus !== undefined ? this.iscHealthInsuranceStatus : <any>null;
        data["iscDateOfFirstProcedure"] = this.iscDateOfFirstProcedure ? this.iscDateOfFirstProcedure.toISOString() : <any>null;
        data["iscCountryOfBirth"] = this.iscCountryOfBirth !== undefined ? this.iscCountryOfBirth : <any>null;
        data["invoiceToFundCompany"] = this.invoiceToFundCompany !== undefined ? this.invoiceToFundCompany : <any>null;
        data["iscMaritalStatus"] = this.iscMaritalStatus !== undefined ? this.iscMaritalStatus : <any>null;
        data["sameDayStatus"] = this.sameDayStatus !== undefined ? this.sameDayStatus : <any>null;
        data["totalPsychiatricCareDays"] = this.totalPsychiatricCareDays !== undefined ? this.totalPsychiatricCareDays : <any>null;
        data["submission_Status"] = this.submission_Status !== undefined ? this.submission_Status : <any>null;
        data["sourceOfReferral"] = this.sourceOfReferral !== undefined ? this.sourceOfReferral : <any>null;
        data["userLastModified_Discharge"] = this.userLastModified_Discharge !== undefined ? this.userLastModified_Discharge : <any>null;
        data["surgeonType"] = this.surgeonType !== undefined ? this.surgeonType : <any>null;
        data["svB_ChargeAmount"] = this.svB_ChargeAmount !== undefined ? this.svB_ChargeAmount : <any>null;
        data["svB_ChargeRaisedCde"] = this.svB_ChargeRaisedCde !== undefined ? this.svB_ChargeRaisedCde : <any>null;
        data["svB_FromDate"] = this.svB_FromDate ? this.svB_FromDate.toISOString() : <any>null;
        data["svB_NumberOfDays"] = this.svB_NumberOfDays !== undefined ? this.svB_NumberOfDays : <any>null;
        data["svB_ServiceCode"] = this.svB_ServiceCode !== undefined ? this.svB_ServiceCode : <any>null;
        data["svB_ServiceCodeTypeCode"] = this.svB_ServiceCodeTypeCode !== undefined ? this.svB_ServiceCodeTypeCode : <any>null;
        data["svB_ToDate"] = this.svB_ToDate ? this.svB_ToDate.toISOString() : <any>null;
        data["totalHospitalChargeAmount"] = this.totalHospitalChargeAmount !== undefined ? this.totalHospitalChargeAmount : <any>null;
        data["totalMedicalChargeAmount"] = this.totalMedicalChargeAmount !== undefined ? this.totalMedicalChargeAmount : <any>null;
        data["hospitalBillingClass"] = this.hospitalBillingClass !== undefined ? this.hospitalBillingClass : <any>null;
        data["urgencyOfAdmission"] = this.urgencyOfAdmission !== undefined ? this.urgencyOfAdmission : <any>null;
        data["userCreated_admission"] = this.userCreated_admission !== undefined ? this.userCreated_admission : <any>null;
        data["userCreated_Discharge"] = this.userCreated_Discharge !== undefined ? this.userCreated_Discharge : <any>null;
        data["userLastModified_admission"] = this.userLastModified_admission !== undefined ? this.userLastModified_admission : <any>null;
        data["hosp_TransferFrom"] = this.hosp_TransferFrom !== undefined ? this.hosp_TransferFrom : <any>null;
        data["dischargeIntention"] = this.dischargeIntention !== undefined ? this.dischargeIntention : <any>null;
        data["hosp_MRN"] = this.hosp_MRN !== undefined ? this.hosp_MRN : <any>null;
        data["consultingMOType"] = this.consultingMOType !== undefined ? this.consultingMOType : <any>null;
        data["compensationClaimCde"] = this.compensationClaimCde !== undefined ? this.compensationClaimCde : <any>null;
        data["codingComplete"] = this.codingComplete !== undefined ? this.codingComplete : <any>null;
        data["claimTypeCde"] = this.claimTypeCde !== undefined ? this.claimTypeCde : <any>null;
        data["attendingMOType"] = this.attendingMOType !== undefined ? this.attendingMOType : <any>null;
        data["adT_Ward"] = this.adT_Ward !== undefined ? this.adT_Ward : <any>null;
        data["adT_Unit"] = this.adT_Unit !== undefined ? this.adT_Unit : <any>null;
        data["hosp_MRN_Alt"] = this.hosp_MRN_Alt !== undefined ? this.hosp_MRN_Alt : <any>null;
        data["adT_Hospital_ID"] = this.adT_Hospital_ID !== undefined ? this.adT_Hospital_ID : <any>null;
        data["adT_Class"] = this.adT_Class !== undefined ? this.adT_Class : <any>null;
        data["adT_Bed"] = this.adT_Bed !== undefined ? this.adT_Bed : <any>null;
        data["contiguousClaimCode"] = this.contiguousClaimCode !== undefined ? this.contiguousClaimCode : <any>null;
        data["admittingMOType"] = this.admittingMOType !== undefined ? this.admittingMOType : <any>null;
        data["admission_State"] = this.admission_State !== undefined ? this.admission_State : <any>null;
        data["admission_Procedure_Description"] = this.admission_Procedure_Description !== undefined ? this.admission_Procedure_Description : <any>null;
        data["admission_Procedure_Code"] = this.admission_Procedure_Code !== undefined ? this.admission_Procedure_Code : <any>null;
        data["admission_Notes"] = this.admission_Notes !== undefined ? this.admission_Notes : <any>null;
        data["admission_Indication_Description"] = this.admission_Indication_Description !== undefined ? this.admission_Indication_Description : <any>null;
        data["admission_Indication_Code"] = this.admission_Indication_Code !== undefined ? this.admission_Indication_Code : <any>null;
        data["admission_Diagnosis_Description"] = this.admission_Diagnosis_Description !== undefined ? this.admission_Diagnosis_Description : <any>null;
        data["admission_Diagnosis_Code"] = this.admission_Diagnosis_Code !== undefined ? this.admission_Diagnosis_Code : <any>null;
        data["admission_Complications"] = this.admission_Complications !== undefined ? this.admission_Complications : <any>null;
        data["accommodation"] = this.accommodation !== undefined ? this.accommodation : <any>null;
        data["admissionType"] = this.admissionType !== undefined ? this.admissionType : <any>null;
        data["createdByUser"] = this.createdByUser !== undefined ? this.createdByUser : <any>null;
        data["adT_Status"] = this.adT_Status !== undefined ? this.adT_Status : <any>null;
        data["dateCreated_admission"] = this.dateCreated_admission ? this.dateCreated_admission.toISOString() : <any>null;
        data["hosp_AdmissionNum"] = this.hosp_AdmissionNum !== undefined ? this.hosp_AdmissionNum : <any>null;
        data["fundedBy"] = this.fundedBy !== undefined ? this.fundedBy : <any>null;
        data["date_ExpectedDischarge"] = this.date_ExpectedDischarge ? this.date_ExpectedDischarge.toISOString() : <any>null;
        data["facilityContractStatusCode"] = this.facilityContractStatusCode !== undefined ? this.facilityContractStatusCode : <any>null;
        data["episodeTypeCode"] = this.episodeTypeCode !== undefined ? this.episodeTypeCode : <any>null;
        data["episode_ID"] = this.episode_ID !== undefined ? this.episode_ID : <any>null;
        data["eligibilityLevel"] = this.eligibilityLevel !== undefined ? this.eligibilityLevel : <any>null;
        data["drType"] = this.drType !== undefined ? this.drType : <any>null;
        data["drgVersion"] = this.drgVersion !== undefined ? this.drgVersion : <any>null;
        data["drgCode"] = this.drgCode !== undefined ? this.drgCode : <any>null;
        data["discharge_Transfer"] = this.discharge_Transfer !== undefined ? this.discharge_Transfer : <any>null;
        data["discharge_To"] = this.discharge_To !== undefined ? this.discharge_To : <any>null;
        data["facilityTypeCode"] = this.facilityTypeCode !== undefined ? this.facilityTypeCode : <any>null;
        data["discharge_Notes"] = this.discharge_Notes !== undefined ? this.discharge_Notes : <any>null;
        data["discharge_Diagnosis_Description"] = this.discharge_Diagnosis_Description !== undefined ? this.discharge_Diagnosis_Description : <any>null;
        data["discharge_Diagnosis_Code"] = this.discharge_Diagnosis_Code !== undefined ? this.discharge_Diagnosis_Code : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["dateTime_Discharge"] = this.dateTime_Discharge ? this.dateTime_Discharge.toISOString() : <any>null;
        data["dateTime_Admission"] = this.dateTime_Admission ? this.dateTime_Admission.toISOString() : <any>null;
        data["dateLastModified_Discharge"] = this.dateLastModified_Discharge ? this.dateLastModified_Discharge.toISOString() : <any>null;
        data["dateLastModified_admission"] = this.dateLastModified_admission ? this.dateLastModified_admission.toISOString() : <any>null;
        data["dateCreated_Discharge"] = this.dateCreated_Discharge ? this.dateCreated_Discharge.toISOString() : <any>null;
        data["discharge_Status"] = this.discharge_Status !== undefined ? this.discharge_Status : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAdmissionParams extends IBaseRequestParams {
    mO_Admitting?: number | null;
    mO_Consultant?: number | null;
    mO_Surgeon?: number | null;
    modeOfSeparation?: number | null;
    nonCertifiedDays?: number | null;
    palliativeCareDays?: number | null;
    palliativeCareStatusCode?: number | null;
    hospitalBillingComplete?: boolean | null;
    patient_ID: number;
    phiscoCountryOfBirth?: number | null;
    phiscoHealthInsuranceStatus?: number | null;
    phiscoLanguageSpokenAtHome?: number | null;
    preAdmissionAssessmentComplete?: boolean | null;
    readmissionWithin28Days?: number | null;
    referral_ID?: number | null;
    paymentModel?: string | null;
    mO_Attending?: number | null;
    hospitalStayBillingComplete?: boolean | null;
    invoiceToFeeContract?: number | null;
    mentalHealthLegalStatus?: number | null;
    mechanicalVentilationHrs?: number | null;
    leaveDays?: number | null;
    reportingComplete?: boolean | null;
    isTransferred?: boolean | null;
    iscState?: number | null;
    invoiceTo?: number | null;
    iscPaymentStatusOnSeparation?: number | null;
    iscLanguageSpokenAtHome?: number | null;
    iscIndigenousOrigin?: number | null;
    iscHealthInsuranceStatus?: number | null;
    iscDateOfFirstProcedure?: Date | null;
    iscCountryOfBirth?: number | null;
    invoiceToFundCompany?: number | null;
    iscMaritalStatus?: number | null;
    sameDayStatus?: number | null;
    totalPsychiatricCareDays?: number | null;
    submission_Status?: string | null;
    sourceOfReferral?: number | null;
    userLastModified_Discharge?: string | null;
    surgeonType?: string | null;
    svB_ChargeAmount?: number | null;
    svB_ChargeRaisedCde?: string | null;
    svB_FromDate?: Date | null;
    svB_NumberOfDays?: number | null;
    svB_ServiceCode?: string | null;
    svB_ServiceCodeTypeCode?: string | null;
    svB_ToDate?: Date | null;
    totalHospitalChargeAmount?: number | null;
    totalMedicalChargeAmount?: number | null;
    hospitalBillingClass?: string | null;
    urgencyOfAdmission?: number | null;
    userCreated_admission?: string | null;
    userCreated_Discharge?: string | null;
    userLastModified_admission?: string | null;
    hosp_TransferFrom?: string | null;
    dischargeIntention?: number | null;
    hosp_MRN?: string | null;
    consultingMOType?: string | null;
    compensationClaimCde?: number | null;
    codingComplete?: boolean | null;
    claimTypeCde?: string | null;
    attendingMOType?: string | null;
    adT_Ward?: number | null;
    adT_Unit?: number | null;
    hosp_MRN_Alt?: string | null;
    adT_Hospital_ID?: number | null;
    adT_Class?: number | null;
    adT_Bed?: string | null;
    contiguousClaimCode?: string | null;
    admittingMOType?: string | null;
    admission_State?: number | null;
    admission_Procedure_Description?: string | null;
    admission_Procedure_Code?: number | null;
    admission_Notes?: string | null;
    admission_Indication_Description?: string | null;
    admission_Indication_Code?: number | null;
    admission_Diagnosis_Description?: string | null;
    admission_Diagnosis_Code?: number | null;
    admission_Complications?: number | null;
    accommodation?: number | null;
    admissionType?: number | null;
    createdByUser?: boolean | null;
    adT_Status?: number | null;
    dateCreated_admission?: Date | null;
    hosp_AdmissionNum?: string | null;
    fundedBy?: number | null;
    date_ExpectedDischarge?: Date | null;
    facilityContractStatusCode?: number | null;
    episodeTypeCode?: number | null;
    episode_ID?: number | null;
    eligibilityLevel?: number | null;
    drType?: number | null;
    drgVersion?: string | null;
    drgCode?: string | null;
    discharge_Transfer?: number | null;
    discharge_To?: number | null;
    facilityTypeCode?: number | null;
    discharge_Notes?: string | null;
    discharge_Diagnosis_Description?: string | null;
    discharge_Diagnosis_Code?: number | null;
    deletionUser?: string | null;
    deletionDate?: Date | null;
    deleted?: boolean | null;
    dateTime_Discharge?: Date | null;
    dateTime_Admission?: Date | null;
    dateLastModified_Discharge?: Date | null;
    dateLastModified_admission?: Date | null;
    dateCreated_Discharge?: Date | null;
    discharge_Status?: string | null;
    feed_ID: number;
}

export class AddOrUpdateAdmission extends AddOrUpdateAdmissionParams implements IAddOrUpdateAdmission {

    constructor(data?: IAddOrUpdateAdmission) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateAdmission {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAdmission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAdmission extends IAddOrUpdateAdmissionParams {
}

export class APIResponseOfAddOrUpdateAdmissionResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateAdmissionResult {
    data?: AddOrUpdateAdmissionResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateAdmissionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateAdmissionResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateAdmissionResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateAdmissionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateAdmissionResult extends IProvideErrorMessage {
    data?: IAddOrUpdateAdmissionResult | null;
}

export class AddOrUpdateAdmissionResult extends ProvideErrorMessage implements IAddOrUpdateAdmissionResult {
    admission_ID!: number;

    constructor(data?: IAddOrUpdateAdmissionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateAdmissionResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAdmissionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAdmissionResult extends IProvideErrorMessage {
    admission_ID: number;
}

export class CancelAdmissionParams extends BaseRequestParams implements ICancelAdmissionParams {
    hosp_AdmissionNum?: string | null;
    patient_ID!: number;
    feed_ID!: number;

    constructor(data?: ICancelAdmissionParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.hosp_AdmissionNum = data["hosp_AdmissionNum"] !== undefined ? data["hosp_AdmissionNum"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
        }
    }

    static fromJS(data: any): CancelAdmissionParams {
        data = typeof data === 'object' ? data : {};
        let result = new CancelAdmissionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hosp_AdmissionNum"] = this.hosp_AdmissionNum !== undefined ? this.hosp_AdmissionNum : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICancelAdmissionParams extends IBaseRequestParams {
    hosp_AdmissionNum?: string | null;
    patient_ID: number;
    feed_ID: number;
}

export class CancelAdmission extends CancelAdmissionParams implements ICancelAdmission {

    constructor(data?: ICancelAdmission) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): CancelAdmission {
        data = typeof data === 'object' ? data : {};
        let result = new CancelAdmission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICancelAdmission extends ICancelAdmissionParams {
}

export class APIResponseOfCancelAdmissionResult extends ProvideErrorMessage implements IAPIResponseOfCancelAdmissionResult {
    data?: CancelAdmissionResult | null;

    constructor(data?: IAPIResponseOfCancelAdmissionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? CancelAdmissionResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfCancelAdmissionResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfCancelAdmissionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfCancelAdmissionResult extends IProvideErrorMessage {
    data?: ICancelAdmissionResult | null;
}

export class CancelAdmissionResult extends ProvideErrorMessage implements ICancelAdmissionResult {
    success!: boolean;

    constructor(data?: ICancelAdmissionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
        }
    }

    static fromJS(data: any): CancelAdmissionResult {
        data = typeof data === 'object' ? data : {};
        let result = new CancelAdmissionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICancelAdmissionResult extends IProvideErrorMessage {
    success: boolean;
}

export class MoveAdmissionOntoPatientParams extends BaseRequestParams implements IMoveAdmissionOntoPatientParams {
    feed_ID!: number;
    admissionToMove?: string | null;
    target_Patient_ID!: number;

    constructor(data?: IMoveAdmissionOntoPatientParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.admissionToMove = data["admissionToMove"] !== undefined ? data["admissionToMove"] : <any>null;
            this.target_Patient_ID = data["target_Patient_ID"] !== undefined ? data["target_Patient_ID"] : <any>null;
        }
    }

    static fromJS(data: any): MoveAdmissionOntoPatientParams {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAdmissionOntoPatientParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["admissionToMove"] = this.admissionToMove !== undefined ? this.admissionToMove : <any>null;
        data["target_Patient_ID"] = this.target_Patient_ID !== undefined ? this.target_Patient_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IMoveAdmissionOntoPatientParams extends IBaseRequestParams {
    feed_ID: number;
    admissionToMove?: string | null;
    target_Patient_ID: number;
}

export class MoveAdmissionOntoPatient extends MoveAdmissionOntoPatientParams implements IMoveAdmissionOntoPatient {

    constructor(data?: IMoveAdmissionOntoPatient) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): MoveAdmissionOntoPatient {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAdmissionOntoPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMoveAdmissionOntoPatient extends IMoveAdmissionOntoPatientParams {
}

export class APIResponseOfMoveAdmissionOntoPatientResult extends ProvideErrorMessage implements IAPIResponseOfMoveAdmissionOntoPatientResult {
    data?: MoveAdmissionOntoPatientResult | null;

    constructor(data?: IAPIResponseOfMoveAdmissionOntoPatientResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? MoveAdmissionOntoPatientResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfMoveAdmissionOntoPatientResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfMoveAdmissionOntoPatientResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfMoveAdmissionOntoPatientResult extends IProvideErrorMessage {
    data?: IMoveAdmissionOntoPatientResult | null;
}

export class MoveAdmissionOntoPatientResult extends ProvideErrorMessage implements IMoveAdmissionOntoPatientResult {
    admission_ID!: number;

    constructor(data?: IMoveAdmissionOntoPatientResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
        }
    }

    static fromJS(data: any): MoveAdmissionOntoPatientResult {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAdmissionOntoPatientResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IMoveAdmissionOntoPatientResult extends IProvideErrorMessage {
    admission_ID: number;
}

export class AddOrUpdateAlertParams extends BaseRequestParams implements IAddOrUpdateAlertParams {
    alert_ID?: number | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    dueDate?: Date | null;
    endDate?: Date | null;
    message?: string | null;
    patient_ID!: number;
    role?: number | null;
    source?: number | null;
    source_ID?: number | null;
    startDate?: Date | null;
    type!: number;
    user_ID?: string | null;
    userCreated?: string | null;
    userLastModified?: string | null;

    constructor(data?: IAddOrUpdateAlertParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.alert_ID = data["alert_ID"] !== undefined ? data["alert_ID"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.source_ID = data["source_ID"] !== undefined ? data["source_ID"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.user_ID = data["user_ID"] !== undefined ? data["user_ID"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateAlertParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAlertParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alert_ID"] = this.alert_ID !== undefined ? this.alert_ID : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["source_ID"] = this.source_ID !== undefined ? this.source_ID : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["user_ID"] = this.user_ID !== undefined ? this.user_ID : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAlertParams extends IBaseRequestParams {
    alert_ID?: number | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    dueDate?: Date | null;
    endDate?: Date | null;
    message?: string | null;
    patient_ID: number;
    role?: number | null;
    source?: number | null;
    source_ID?: number | null;
    startDate?: Date | null;
    type: number;
    user_ID?: string | null;
    userCreated?: string | null;
    userLastModified?: string | null;
}

export class AddOrUpdateAlert extends AddOrUpdateAlertParams implements IAddOrUpdateAlert {

    constructor(data?: IAddOrUpdateAlert) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateAlert {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAlert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAlert extends IAddOrUpdateAlertParams {
}

export class APIResponseOfAddOrUpdateAlertResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateAlertResult {
    data?: AddOrUpdateAlertResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateAlertResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateAlertResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateAlertResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateAlertResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateAlertResult extends IProvideErrorMessage {
    data?: IAddOrUpdateAlertResult | null;
}

export class AddOrUpdateAlertResult extends ProvideErrorMessage implements IAddOrUpdateAlertResult {
    success!: boolean;
    alert_ID!: number;

    constructor(data?: IAddOrUpdateAlertResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            this.alert_ID = data["alert_ID"] !== undefined ? data["alert_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateAlertResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateAlertResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["alert_ID"] = this.alert_ID !== undefined ? this.alert_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateAlertResult extends IProvideErrorMessage {
    success: boolean;
    alert_ID: number;
}

export class DeleteAlertParams extends BaseRequestParams implements IDeleteAlertParams {
    alert_ID?: number | null;
    patient_ID?: number | null;
    type?: number | null;
    source?: number | null;
    source_ID?: number | null;
    user_ID?: string | null;
    definitionUser_ID?: string | null;
    definitionUserManage?: boolean | null;
    definitionSourcesOtherThan?: string[] | null;

    constructor(data?: IDeleteAlertParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.alert_ID = data["alert_ID"] !== undefined ? data["alert_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.source_ID = data["source_ID"] !== undefined ? data["source_ID"] : <any>null;
            this.user_ID = data["user_ID"] !== undefined ? data["user_ID"] : <any>null;
            this.definitionUser_ID = data["definitionUser_ID"] !== undefined ? data["definitionUser_ID"] : <any>null;
            this.definitionUserManage = data["definitionUserManage"] !== undefined ? data["definitionUserManage"] : <any>null;
            if (data["definitionSourcesOtherThan"] && data["definitionSourcesOtherThan"].constructor === Array) {
                this.definitionSourcesOtherThan = [];
                for (let item of data["definitionSourcesOtherThan"])
                    this.definitionSourcesOtherThan.push(item);
            }
        }
    }

    static fromJS(data: any): DeleteAlertParams {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAlertParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alert_ID"] = this.alert_ID !== undefined ? this.alert_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["source_ID"] = this.source_ID !== undefined ? this.source_ID : <any>null;
        data["user_ID"] = this.user_ID !== undefined ? this.user_ID : <any>null;
        data["definitionUser_ID"] = this.definitionUser_ID !== undefined ? this.definitionUser_ID : <any>null;
        data["definitionUserManage"] = this.definitionUserManage !== undefined ? this.definitionUserManage : <any>null;
        if (this.definitionSourcesOtherThan && this.definitionSourcesOtherThan.constructor === Array) {
            data["definitionSourcesOtherThan"] = [];
            for (let item of this.definitionSourcesOtherThan)
                data["definitionSourcesOtherThan"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteAlertParams extends IBaseRequestParams {
    alert_ID?: number | null;
    patient_ID?: number | null;
    type?: number | null;
    source?: number | null;
    source_ID?: number | null;
    user_ID?: string | null;
    definitionUser_ID?: string | null;
    definitionUserManage?: boolean | null;
    definitionSourcesOtherThan?: string[] | null;
}

export class DeleteAlert extends DeleteAlertParams implements IDeleteAlert {

    constructor(data?: IDeleteAlert) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): DeleteAlert {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAlert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteAlert extends IDeleteAlertParams {
}

export class APIResponseOfDeleteAlertResult extends ProvideErrorMessage implements IAPIResponseOfDeleteAlertResult {
    data?: DeleteAlertResult | null;

    constructor(data?: IAPIResponseOfDeleteAlertResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? DeleteAlertResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfDeleteAlertResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfDeleteAlertResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfDeleteAlertResult extends IProvideErrorMessage {
    data?: IDeleteAlertResult | null;
}

export class DeleteAlertResult extends ProvideErrorMessage implements IDeleteAlertResult {
    success!: boolean;
    alert_IDs?: number[] | null;

    constructor(data?: IDeleteAlertResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            if (data["alert_IDs"] && data["alert_IDs"].constructor === Array) {
                this.alert_IDs = [];
                for (let item of data["alert_IDs"])
                    this.alert_IDs.push(item);
            }
        }
    }

    static fromJS(data: any): DeleteAlertResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAlertResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (this.alert_IDs && this.alert_IDs.constructor === Array) {
            data["alert_IDs"] = [];
            for (let item of this.alert_IDs)
                data["alert_IDs"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteAlertResult extends IProvideErrorMessage {
    success: boolean;
    alert_IDs?: number[] | null;
}

export class FindAlertDefinitionParams extends BaseRequestParams implements IFindAlertDefinitionParams {
    source?: string | null;
    user_ID?: string | null;
    userManage?: boolean | null;

    constructor(data?: IFindAlertDefinitionParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.user_ID = data["user_ID"] !== undefined ? data["user_ID"] : <any>null;
            this.userManage = data["userManage"] !== undefined ? data["userManage"] : <any>null;
        }
    }

    static fromJS(data: any): FindAlertDefinitionParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindAlertDefinitionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["user_ID"] = this.user_ID !== undefined ? this.user_ID : <any>null;
        data["userManage"] = this.userManage !== undefined ? this.userManage : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindAlertDefinitionParams extends IBaseRequestParams {
    source?: string | null;
    user_ID?: string | null;
    userManage?: boolean | null;
}

export class FindAlertDefinition extends FindAlertDefinitionParams implements IFindAlertDefinition {

    constructor(data?: IFindAlertDefinition) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindAlertDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new FindAlertDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindAlertDefinition extends IFindAlertDefinitionParams {
}

export class APIResponseOfFindAlertDefinitionResult extends ProvideErrorMessage implements IAPIResponseOfFindAlertDefinitionResult {
    data?: FindAlertDefinitionResult | null;

    constructor(data?: IAPIResponseOfFindAlertDefinitionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindAlertDefinitionResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindAlertDefinitionResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindAlertDefinitionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindAlertDefinitionResult extends IProvideErrorMessage {
    data?: IFindAlertDefinitionResult | null;
}

export class FindAlertDefinitionResult extends ProvideErrorMessage implements IFindAlertDefinitionResult {
    success!: boolean;
    alertAction?: number | null;
    alertEnabled!: boolean;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    source?: string | null;
    diaryAlert!: boolean;
    diaryAlertStyle?: number | null;
    displayOrder!: number;
    displayPopupNonDoctors?: boolean | null;
    endDateModifier!: number;
    isGrouped?: boolean | null;
    message?: string | null;
    role?: number | null;
    startDateModifier!: number;
    type!: number;
    useEndDateModifier!: boolean;
    user_ID?: string | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    userManage!: boolean;
    useStartDateModifier!: boolean;

    constructor(data?: IFindAlertDefinitionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            this.alertAction = data["alertAction"] !== undefined ? data["alertAction"] : <any>null;
            this.alertEnabled = data["alertEnabled"] !== undefined ? data["alertEnabled"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.diaryAlert = data["diaryAlert"] !== undefined ? data["diaryAlert"] : <any>null;
            this.diaryAlertStyle = data["diaryAlertStyle"] !== undefined ? data["diaryAlertStyle"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
            this.displayPopupNonDoctors = data["displayPopupNonDoctors"] !== undefined ? data["displayPopupNonDoctors"] : <any>null;
            this.endDateModifier = data["endDateModifier"] !== undefined ? data["endDateModifier"] : <any>null;
            this.isGrouped = data["isGrouped"] !== undefined ? data["isGrouped"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
            this.startDateModifier = data["startDateModifier"] !== undefined ? data["startDateModifier"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.useEndDateModifier = data["useEndDateModifier"] !== undefined ? data["useEndDateModifier"] : <any>null;
            this.user_ID = data["user_ID"] !== undefined ? data["user_ID"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.userManage = data["userManage"] !== undefined ? data["userManage"] : <any>null;
            this.useStartDateModifier = data["useStartDateModifier"] !== undefined ? data["useStartDateModifier"] : <any>null;
        }
    }

    static fromJS(data: any): FindAlertDefinitionResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindAlertDefinitionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["alertAction"] = this.alertAction !== undefined ? this.alertAction : <any>null;
        data["alertEnabled"] = this.alertEnabled !== undefined ? this.alertEnabled : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["diaryAlert"] = this.diaryAlert !== undefined ? this.diaryAlert : <any>null;
        data["diaryAlertStyle"] = this.diaryAlertStyle !== undefined ? this.diaryAlertStyle : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        data["displayPopupNonDoctors"] = this.displayPopupNonDoctors !== undefined ? this.displayPopupNonDoctors : <any>null;
        data["endDateModifier"] = this.endDateModifier !== undefined ? this.endDateModifier : <any>null;
        data["isGrouped"] = this.isGrouped !== undefined ? this.isGrouped : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["startDateModifier"] = this.startDateModifier !== undefined ? this.startDateModifier : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["useEndDateModifier"] = this.useEndDateModifier !== undefined ? this.useEndDateModifier : <any>null;
        data["user_ID"] = this.user_ID !== undefined ? this.user_ID : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["userManage"] = this.userManage !== undefined ? this.userManage : <any>null;
        data["useStartDateModifier"] = this.useStartDateModifier !== undefined ? this.useStartDateModifier : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindAlertDefinitionResult extends IProvideErrorMessage {
    success: boolean;
    alertAction?: number | null;
    alertEnabled: boolean;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    source?: string | null;
    diaryAlert: boolean;
    diaryAlertStyle?: number | null;
    displayOrder: number;
    displayPopupNonDoctors?: boolean | null;
    endDateModifier: number;
    isGrouped?: boolean | null;
    message?: string | null;
    role?: number | null;
    startDateModifier: number;
    type: number;
    useEndDateModifier: boolean;
    user_ID?: string | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    userManage: boolean;
    useStartDateModifier: boolean;
}

export class APIResponseOfIEnumerableOfAnnotationToolDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfAnnotationToolDO {
    data?: AnnotationToolDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfAnnotationToolDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(AnnotationToolDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfAnnotationToolDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfAnnotationToolDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfAnnotationToolDO extends IProvideErrorMessage {
    data?: IAnnotationToolDO[] | null;
}

export class AnnotationToolDO implements IAnnotationToolDO {
    id!: number;
    toolDescription?: string | null;
    units?: string | null;
    dataType?: string | null;

    constructor(data?: IAnnotationToolDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.toolDescription = data["toolDescription"] !== undefined ? data["toolDescription"] : <any>null;
            this.units = data["units"] !== undefined ? data["units"] : <any>null;
            this.dataType = data["dataType"] !== undefined ? data["dataType"] : <any>null;
        }
    }

    static fromJS(data: any): AnnotationToolDO {
        data = typeof data === 'object' ? data : {};
        let result = new AnnotationToolDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["toolDescription"] = this.toolDescription !== undefined ? this.toolDescription : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        return data; 
    }
}

export interface IAnnotationToolDO {
    id: number;
    toolDescription?: string | null;
    units?: string | null;
    dataType?: string | null;
}

export class APIResponseOfEquipmentTransactionDO extends ProvideErrorMessage implements IAPIResponseOfEquipmentTransactionDO {
    data?: EquipmentTransactionDO | null;

    constructor(data?: IAPIResponseOfEquipmentTransactionDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? EquipmentTransactionDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfEquipmentTransactionDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfEquipmentTransactionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfEquipmentTransactionDO extends IProvideErrorMessage {
    data?: IEquipmentTransactionDO | null;
}

export class EquipmentTransactionDO implements IEquipmentTransactionDO {
    equipmentType?: InventoryCategoryDO[] | null;
    manufacturer?: InventoryCompanyDO | null;
    model?: string | null;
    transactionID!: number;
    equipmentID!: number;
    equipmentNumber?: string | null;
    serialNumber?: string | null;
    patientID!: number;
    mrn?: string | null;
    patientName?: string | null;
    issuingDate!: Date;
    returnDate?: Date | null;
    dependencyLevel!: number;
    paymentStatus!: number;
    fundingSource!: number;
    notes?: string | null;

    constructor(data?: IEquipmentTransactionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.equipmentType) {
                this.equipmentType = [];
                for (let i = 0; i < data.equipmentType.length; i++) {
                    let item = data.equipmentType[i];
                    this.equipmentType[i] = item && !(<any>item).toJSON ? new InventoryCategoryDO(item) : <InventoryCategoryDO>item;
                }
            }
            this.manufacturer = data.manufacturer && !(<any>data.manufacturer).toJSON ? new InventoryCompanyDO(data.manufacturer) : <InventoryCompanyDO>this.manufacturer; 
        }
    }

    init(data?: any) {
        if (data) {
            if (data["equipmentType"] && data["equipmentType"].constructor === Array) {
                this.equipmentType = [];
                for (let item of data["equipmentType"])
                    this.equipmentType.push(InventoryCategoryDO.fromJS(item));
            }
            this.manufacturer = data["manufacturer"] ? InventoryCompanyDO.fromJS(data["manufacturer"]) : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            this.transactionID = data["transactionID"] !== undefined ? data["transactionID"] : <any>null;
            this.equipmentID = data["equipmentID"] !== undefined ? data["equipmentID"] : <any>null;
            this.equipmentNumber = data["equipmentNumber"] !== undefined ? data["equipmentNumber"] : <any>null;
            this.serialNumber = data["serialNumber"] !== undefined ? data["serialNumber"] : <any>null;
            this.patientID = data["patientID"] !== undefined ? data["patientID"] : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.issuingDate = data["issuingDate"] ? new Date(data["issuingDate"].toString()) : <any>null;
            this.returnDate = data["returnDate"] ? new Date(data["returnDate"].toString()) : <any>null;
            this.dependencyLevel = data["dependencyLevel"] !== undefined ? data["dependencyLevel"] : <any>null;
            this.paymentStatus = data["paymentStatus"] !== undefined ? data["paymentStatus"] : <any>null;
            this.fundingSource = data["fundingSource"] !== undefined ? data["fundingSource"] : <any>null;
            this.notes = data["notes"] !== undefined ? data["notes"] : <any>null;
        }
    }

    static fromJS(data: any): EquipmentTransactionDO {
        data = typeof data === 'object' ? data : {};
        let result = new EquipmentTransactionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.equipmentType && this.equipmentType.constructor === Array) {
            data["equipmentType"] = [];
            for (let item of this.equipmentType)
                data["equipmentType"].push(item.toJSON());
        }
        data["manufacturer"] = this.manufacturer ? this.manufacturer.toJSON() : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["transactionID"] = this.transactionID !== undefined ? this.transactionID : <any>null;
        data["equipmentID"] = this.equipmentID !== undefined ? this.equipmentID : <any>null;
        data["equipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["patientID"] = this.patientID !== undefined ? this.patientID : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["issuingDate"] = this.issuingDate ? this.issuingDate.toISOString() : <any>null;
        data["returnDate"] = this.returnDate ? this.returnDate.toISOString() : <any>null;
        data["dependencyLevel"] = this.dependencyLevel !== undefined ? this.dependencyLevel : <any>null;
        data["paymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : <any>null;
        data["fundingSource"] = this.fundingSource !== undefined ? this.fundingSource : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        return data; 
    }
}

export interface IEquipmentTransactionDO {
    equipmentType?: IInventoryCategoryDO[] | null;
    manufacturer?: IInventoryCompanyDO | null;
    model?: string | null;
    transactionID: number;
    equipmentID: number;
    equipmentNumber?: string | null;
    serialNumber?: string | null;
    patientID: number;
    mrn?: string | null;
    patientName?: string | null;
    issuingDate: Date;
    returnDate?: Date | null;
    dependencyLevel: number;
    paymentStatus: number;
    fundingSource: number;
    notes?: string | null;
}

export class InventoryCategoryDO implements IInventoryCategoryDO {
    categoryId!: number;
    categoryName?: string | null;
    parentCategory!: number;

    constructor(data?: IInventoryCategoryDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryId = data["categoryId"] !== undefined ? data["categoryId"] : <any>null;
            this.categoryName = data["categoryName"] !== undefined ? data["categoryName"] : <any>null;
            this.parentCategory = data["parentCategory"] !== undefined ? data["parentCategory"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryCategoryDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryCategoryDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["categoryName"] = this.categoryName !== undefined ? this.categoryName : <any>null;
        data["parentCategory"] = this.parentCategory !== undefined ? this.parentCategory : <any>null;
        return data; 
    }
}

export interface IInventoryCategoryDO {
    categoryId: number;
    categoryName?: string | null;
    parentCategory: number;
}

export class InventoryCompanyDO implements IInventoryCompanyDO {
    company_ID!: number;
    companyName?: string | null;

    constructor(data?: IInventoryCompanyDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryCompanyDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryCompanyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        return data; 
    }
}

export interface IInventoryCompanyDO {
    company_ID: number;
    companyName?: string | null;
}

export class APIResponseOfListOfEquipmentTransactionDO extends ProvideErrorMessage implements IAPIResponseOfListOfEquipmentTransactionDO {
    data?: EquipmentTransactionDO[] | null;

    constructor(data?: IAPIResponseOfListOfEquipmentTransactionDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(EquipmentTransactionDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfEquipmentTransactionDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfEquipmentTransactionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfEquipmentTransactionDO extends IProvideErrorMessage {
    data?: IEquipmentTransactionDO[] | null;
}

export class APIResponseOfDeleteTransactionResponseDO extends ProvideErrorMessage implements IAPIResponseOfDeleteTransactionResponseDO {
    data?: DeleteTransactionResponseDO | null;

    constructor(data?: IAPIResponseOfDeleteTransactionResponseDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? DeleteTransactionResponseDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfDeleteTransactionResponseDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfDeleteTransactionResponseDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfDeleteTransactionResponseDO extends IProvideErrorMessage {
    data?: IDeleteTransactionResponseDO | null;
}

export class DeleteTransactionResponseDO implements IDeleteTransactionResponseDO {
    equipmentReturned!: boolean;

    constructor(data?: IDeleteTransactionResponseDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.equipmentReturned = data["equipmentReturned"] !== undefined ? data["equipmentReturned"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteTransactionResponseDO {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTransactionResponseDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["equipmentReturned"] = this.equipmentReturned !== undefined ? this.equipmentReturned : <any>null;
        return data; 
    }
}

export interface IDeleteTransactionResponseDO {
    equipmentReturned: boolean;
}

export class APIResponseOfListOfAssetDeviceDO extends ProvideErrorMessage implements IAPIResponseOfListOfAssetDeviceDO {
    data?: AssetDeviceDO[] | null;

    constructor(data?: IAPIResponseOfListOfAssetDeviceDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(AssetDeviceDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfAssetDeviceDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfAssetDeviceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfAssetDeviceDO extends IProvideErrorMessage {
    data?: IAssetDeviceDO[] | null;
}

export class AssetDeviceDO implements IAssetDeviceDO {
    equipment_ID!: number;
    equipmentNumber?: string | null;
    serialNumber?: string | null;
    product_ID!: number;
    commissionDate!: Date;
    status!: PAPEquipmentStatus;
    serviceInterval!: number;
    lastServiceDate?: Date | null;
    nextServiceDate!: Date;
    calibrationInterval?: number | null;
    lastCalibrationDate?: Date | null;
    nextCalibrationDate?: Date | null;
    notes?: string | null;
    createdDate!: Date;
    createdUser?: string | null;
    lastModifiedDate!: Date;
    lastModifiedUser?: string | null;
    deleted!: boolean;
    deletedDate?: Date | null;
    deletedUser?: string | null;
    manufacturer?: InventoryCompanyDO | null;
    suppliers?: InventoryCompanyDO[] | null;
    equipmentType?: InventoryCategoryDO[] | null;
    model?: string | null;
    description?: string | null;
    transactionId?: number | null;
    transactionDate?: Date | null;
    lastLoan?: AssetLastLoanedPatient | null;
    location?: string | null;
    purpose!: EquipmentPurpose;

    constructor(data?: IAssetDeviceDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.manufacturer = data.manufacturer && !(<any>data.manufacturer).toJSON ? new InventoryCompanyDO(data.manufacturer) : <InventoryCompanyDO>this.manufacturer; 
            if (data.suppliers) {
                this.suppliers = [];
                for (let i = 0; i < data.suppliers.length; i++) {
                    let item = data.suppliers[i];
                    this.suppliers[i] = item && !(<any>item).toJSON ? new InventoryCompanyDO(item) : <InventoryCompanyDO>item;
                }
            }
            if (data.equipmentType) {
                this.equipmentType = [];
                for (let i = 0; i < data.equipmentType.length; i++) {
                    let item = data.equipmentType[i];
                    this.equipmentType[i] = item && !(<any>item).toJSON ? new InventoryCategoryDO(item) : <InventoryCategoryDO>item;
                }
            }
            this.lastLoan = data.lastLoan && !(<any>data.lastLoan).toJSON ? new AssetLastLoanedPatient(data.lastLoan) : <AssetLastLoanedPatient>this.lastLoan; 
        }
    }

    init(data?: any) {
        if (data) {
            this.equipment_ID = data["equipment_ID"] !== undefined ? data["equipment_ID"] : <any>null;
            this.equipmentNumber = data["equipmentNumber"] !== undefined ? data["equipmentNumber"] : <any>null;
            this.serialNumber = data["serialNumber"] !== undefined ? data["serialNumber"] : <any>null;
            this.product_ID = data["product_ID"] !== undefined ? data["product_ID"] : <any>null;
            this.commissionDate = data["commissionDate"] ? new Date(data["commissionDate"].toString()) : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.serviceInterval = data["serviceInterval"] !== undefined ? data["serviceInterval"] : <any>null;
            this.lastServiceDate = data["lastServiceDate"] ? new Date(data["lastServiceDate"].toString()) : <any>null;
            this.nextServiceDate = data["nextServiceDate"] ? new Date(data["nextServiceDate"].toString()) : <any>null;
            this.calibrationInterval = data["calibrationInterval"] !== undefined ? data["calibrationInterval"] : <any>null;
            this.lastCalibrationDate = data["lastCalibrationDate"] ? new Date(data["lastCalibrationDate"].toString()) : <any>null;
            this.nextCalibrationDate = data["nextCalibrationDate"] ? new Date(data["nextCalibrationDate"].toString()) : <any>null;
            this.notes = data["notes"] !== undefined ? data["notes"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            this.createdUser = data["createdUser"] !== undefined ? data["createdUser"] : <any>null;
            this.lastModifiedDate = data["lastModifiedDate"] ? new Date(data["lastModifiedDate"].toString()) : <any>null;
            this.lastModifiedUser = data["lastModifiedUser"] !== undefined ? data["lastModifiedUser"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletedDate = data["deletedDate"] ? new Date(data["deletedDate"].toString()) : <any>null;
            this.deletedUser = data["deletedUser"] !== undefined ? data["deletedUser"] : <any>null;
            this.manufacturer = data["manufacturer"] ? InventoryCompanyDO.fromJS(data["manufacturer"]) : <any>null;
            if (data["suppliers"] && data["suppliers"].constructor === Array) {
                this.suppliers = [];
                for (let item of data["suppliers"])
                    this.suppliers.push(InventoryCompanyDO.fromJS(item));
            }
            if (data["equipmentType"] && data["equipmentType"].constructor === Array) {
                this.equipmentType = [];
                for (let item of data["equipmentType"])
                    this.equipmentType.push(InventoryCategoryDO.fromJS(item));
            }
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.transactionId = data["transactionId"] !== undefined ? data["transactionId"] : <any>null;
            this.transactionDate = data["transactionDate"] ? new Date(data["transactionDate"].toString()) : <any>null;
            this.lastLoan = data["lastLoan"] ? AssetLastLoanedPatient.fromJS(data["lastLoan"]) : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
            this.purpose = data["purpose"] !== undefined ? data["purpose"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDeviceDO {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDeviceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["equipment_ID"] = this.equipment_ID !== undefined ? this.equipment_ID : <any>null;
        data["equipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["product_ID"] = this.product_ID !== undefined ? this.product_ID : <any>null;
        data["commissionDate"] = this.commissionDate ? this.commissionDate.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["serviceInterval"] = this.serviceInterval !== undefined ? this.serviceInterval : <any>null;
        data["lastServiceDate"] = this.lastServiceDate ? this.lastServiceDate.toISOString() : <any>null;
        data["nextServiceDate"] = this.nextServiceDate ? this.nextServiceDate.toISOString() : <any>null;
        data["calibrationInterval"] = this.calibrationInterval !== undefined ? this.calibrationInterval : <any>null;
        data["lastCalibrationDate"] = this.lastCalibrationDate ? this.lastCalibrationDate.toISOString() : <any>null;
        data["nextCalibrationDate"] = this.nextCalibrationDate ? this.nextCalibrationDate.toISOString() : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["createdUser"] = this.createdUser !== undefined ? this.createdUser : <any>null;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : <any>null;
        data["lastModifiedUser"] = this.lastModifiedUser !== undefined ? this.lastModifiedUser : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : <any>null;
        data["deletedUser"] = this.deletedUser !== undefined ? this.deletedUser : <any>null;
        data["manufacturer"] = this.manufacturer ? this.manufacturer.toJSON() : <any>null;
        if (this.suppliers && this.suppliers.constructor === Array) {
            data["suppliers"] = [];
            for (let item of this.suppliers)
                data["suppliers"].push(item.toJSON());
        }
        if (this.equipmentType && this.equipmentType.constructor === Array) {
            data["equipmentType"] = [];
            for (let item of this.equipmentType)
                data["equipmentType"].push(item.toJSON());
        }
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["transactionId"] = this.transactionId !== undefined ? this.transactionId : <any>null;
        data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : <any>null;
        data["lastLoan"] = this.lastLoan ? this.lastLoan.toJSON() : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["purpose"] = this.purpose !== undefined ? this.purpose : <any>null;
        return data; 
    }
}

export interface IAssetDeviceDO {
    equipment_ID: number;
    equipmentNumber?: string | null;
    serialNumber?: string | null;
    product_ID: number;
    commissionDate: Date;
    status: PAPEquipmentStatus;
    serviceInterval: number;
    lastServiceDate?: Date | null;
    nextServiceDate: Date;
    calibrationInterval?: number | null;
    lastCalibrationDate?: Date | null;
    nextCalibrationDate?: Date | null;
    notes?: string | null;
    createdDate: Date;
    createdUser?: string | null;
    lastModifiedDate: Date;
    lastModifiedUser?: string | null;
    deleted: boolean;
    deletedDate?: Date | null;
    deletedUser?: string | null;
    manufacturer?: IInventoryCompanyDO | null;
    suppliers?: IInventoryCompanyDO[] | null;
    equipmentType?: IInventoryCategoryDO[] | null;
    model?: string | null;
    description?: string | null;
    transactionId?: number | null;
    transactionDate?: Date | null;
    lastLoan?: IAssetLastLoanedPatient | null;
    location?: string | null;
    purpose: EquipmentPurpose;
}

export enum PAPEquipmentStatus {
    InStock = 1, 
    Issued = 2, 
    Retired = 3, 
    InMaintenance = 4, 
    CurrentAssets = 5, 
}

export class AssetLastLoanedPatient implements IAssetLastLoanedPatient {
    fullName?: string | null;
    displayDetails?: string | null;
    patient_ID?: number | null;
    patient_MRN?: string | null;
    dob?: Date | null;

    constructor(data?: IAssetLastLoanedPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : <any>null;
            this.displayDetails = data["displayDetails"] !== undefined ? data["displayDetails"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.patient_MRN = data["patient_MRN"] !== undefined ? data["patient_MRN"] : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AssetLastLoanedPatient {
        data = typeof data === 'object' ? data : {};
        let result = new AssetLastLoanedPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["displayDetails"] = this.displayDetails !== undefined ? this.displayDetails : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["patient_MRN"] = this.patient_MRN !== undefined ? this.patient_MRN : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        return data; 
    }
}

export interface IAssetLastLoanedPatient {
    fullName?: string | null;
    displayDetails?: string | null;
    patient_ID?: number | null;
    patient_MRN?: string | null;
    dob?: Date | null;
}

export enum EquipmentPurpose {
    Loanable = 1, 
    Fixed = 2, 
    Mobile = 3, 
}

export class APIResponseOfAssetDeviceDO extends ProvideErrorMessage implements IAPIResponseOfAssetDeviceDO {
    data?: AssetDeviceDO | null;

    constructor(data?: IAPIResponseOfAssetDeviceDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AssetDeviceDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAssetDeviceDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAssetDeviceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAssetDeviceDO extends IProvideErrorMessage {
    data?: IAssetDeviceDO | null;
}

export class PAPManagementSearchDO implements IPAPManagementSearchDO {
    searchBefore!: boolean;
    inputDate?: Date | null;
    inputDate2?: Date | null;
    equipmentType?: InventoryCategoryDO | null;
    manufacturer?: InventoryCompanyDO | null;
    model?: string | null;
    status?: number | null;
    mustBeAvailable!: boolean;
    paymentStatus?: number | null;
    dependencyLevel?: number | null;
    patientID?: number | null;
    equipmentID?: number | null;

    constructor(data?: IPAPManagementSearchDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.equipmentType = data.equipmentType && !(<any>data.equipmentType).toJSON ? new InventoryCategoryDO(data.equipmentType) : <InventoryCategoryDO>this.equipmentType; 
            this.manufacturer = data.manufacturer && !(<any>data.manufacturer).toJSON ? new InventoryCompanyDO(data.manufacturer) : <InventoryCompanyDO>this.manufacturer; 
        }
    }

    init(data?: any) {
        if (data) {
            this.searchBefore = data["searchBefore"] !== undefined ? data["searchBefore"] : <any>null;
            this.inputDate = data["inputDate"] ? new Date(data["inputDate"].toString()) : <any>null;
            this.inputDate2 = data["inputDate2"] ? new Date(data["inputDate2"].toString()) : <any>null;
            this.equipmentType = data["equipmentType"] ? InventoryCategoryDO.fromJS(data["equipmentType"]) : <any>null;
            this.manufacturer = data["manufacturer"] ? InventoryCompanyDO.fromJS(data["manufacturer"]) : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.mustBeAvailable = data["mustBeAvailable"] !== undefined ? data["mustBeAvailable"] : <any>null;
            this.paymentStatus = data["paymentStatus"] !== undefined ? data["paymentStatus"] : <any>null;
            this.dependencyLevel = data["dependencyLevel"] !== undefined ? data["dependencyLevel"] : <any>null;
            this.patientID = data["patientID"] !== undefined ? data["patientID"] : <any>null;
            this.equipmentID = data["equipmentID"] !== undefined ? data["equipmentID"] : <any>null;
        }
    }

    static fromJS(data: any): PAPManagementSearchDO {
        data = typeof data === 'object' ? data : {};
        let result = new PAPManagementSearchDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchBefore"] = this.searchBefore !== undefined ? this.searchBefore : <any>null;
        data["inputDate"] = this.inputDate ? this.inputDate.toISOString() : <any>null;
        data["inputDate2"] = this.inputDate2 ? this.inputDate2.toISOString() : <any>null;
        data["equipmentType"] = this.equipmentType ? this.equipmentType.toJSON() : <any>null;
        data["manufacturer"] = this.manufacturer ? this.manufacturer.toJSON() : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["mustBeAvailable"] = this.mustBeAvailable !== undefined ? this.mustBeAvailable : <any>null;
        data["paymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : <any>null;
        data["dependencyLevel"] = this.dependencyLevel !== undefined ? this.dependencyLevel : <any>null;
        data["patientID"] = this.patientID !== undefined ? this.patientID : <any>null;
        data["equipmentID"] = this.equipmentID !== undefined ? this.equipmentID : <any>null;
        return data; 
    }
}

export interface IPAPManagementSearchDO {
    searchBefore: boolean;
    inputDate?: Date | null;
    inputDate2?: Date | null;
    equipmentType?: IInventoryCategoryDO | null;
    manufacturer?: IInventoryCompanyDO | null;
    model?: string | null;
    status?: number | null;
    mustBeAvailable: boolean;
    paymentStatus?: number | null;
    dependencyLevel?: number | null;
    patientID?: number | null;
    equipmentID?: number | null;
}

export class APIResponseOfListOfInventoryCategoryDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryCategoryDO {
    data?: InventoryCategoryDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryCategoryDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryCategoryDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryCategoryDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryCategoryDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryCategoryDO extends IProvideErrorMessage {
    data?: IInventoryCategoryDO[] | null;
}

export class APIResponseOfListOfInventoryCompanyDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryCompanyDO {
    data?: InventoryCompanyDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryCompanyDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryCompanyDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryCompanyDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryCompanyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryCompanyDO extends IProvideErrorMessage {
    data?: IInventoryCompanyDO[] | null;
}

export class APIResponseOfListOfPAPSearchModel extends ProvideErrorMessage implements IAPIResponseOfListOfPAPSearchModel {
    data?: PAPSearchModel[] | null;

    constructor(data?: IAPIResponseOfListOfPAPSearchModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PAPSearchModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfPAPSearchModel {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfPAPSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfPAPSearchModel extends IProvideErrorMessage {
    data?: IPAPSearchModel[] | null;
}

export class PAPSearchModel implements IPAPSearchModel {
    model?: string | null;
    models?: PAPModel[] | null;

    constructor(data?: IPAPSearchModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.models) {
                this.models = [];
                for (let i = 0; i < data.models.length; i++) {
                    let item = data.models[i];
                    this.models[i] = item && !(<any>item).toJSON ? new PAPModel(item) : <PAPModel>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            if (data["models"] && data["models"].constructor === Array) {
                this.models = [];
                for (let item of data["models"])
                    this.models.push(PAPModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PAPSearchModel {
        data = typeof data === 'object' ? data : {};
        let result = new PAPSearchModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["model"] = this.model !== undefined ? this.model : <any>null;
        if (this.models && this.models.constructor === Array) {
            data["models"] = [];
            for (let item of this.models)
                data["models"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPAPSearchModel {
    model?: string | null;
    models?: IPAPModel[] | null;
}

export class PAPModel implements IPAPModel {
    productId!: number;
    model?: string | null;
    equipmentType?: InventoryCategoryDO[] | null;
    manufacturer?: InventoryCompanyDO | null;

    constructor(data?: IPAPModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.equipmentType) {
                this.equipmentType = [];
                for (let i = 0; i < data.equipmentType.length; i++) {
                    let item = data.equipmentType[i];
                    this.equipmentType[i] = item && !(<any>item).toJSON ? new InventoryCategoryDO(item) : <InventoryCategoryDO>item;
                }
            }
            this.manufacturer = data.manufacturer && !(<any>data.manufacturer).toJSON ? new InventoryCompanyDO(data.manufacturer) : <InventoryCompanyDO>this.manufacturer; 
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"] !== undefined ? data["productId"] : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            if (data["equipmentType"] && data["equipmentType"].constructor === Array) {
                this.equipmentType = [];
                for (let item of data["equipmentType"])
                    this.equipmentType.push(InventoryCategoryDO.fromJS(item));
            }
            this.manufacturer = data["manufacturer"] ? InventoryCompanyDO.fromJS(data["manufacturer"]) : <any>null;
        }
    }

    static fromJS(data: any): PAPModel {
        data = typeof data === 'object' ? data : {};
        let result = new PAPModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        if (this.equipmentType && this.equipmentType.constructor === Array) {
            data["equipmentType"] = [];
            for (let item of this.equipmentType)
                data["equipmentType"].push(item.toJSON());
        }
        data["manufacturer"] = this.manufacturer ? this.manufacturer.toJSON() : <any>null;
        return data; 
    }
}

export interface IPAPModel {
    productId: number;
    model?: string | null;
    equipmentType?: IInventoryCategoryDO[] | null;
    manufacturer?: IInventoryCompanyDO | null;
}

export class APIResponseOfListOfPAPFundingSource extends ProvideErrorMessage implements IAPIResponseOfListOfPAPFundingSource {
    data?: PAPFundingSource[] | null;

    constructor(data?: IAPIResponseOfListOfPAPFundingSource) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PAPFundingSource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfPAPFundingSource {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfPAPFundingSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfPAPFundingSource extends IProvideErrorMessage {
    data?: IPAPFundingSource[] | null;
}

export class PAPFundingSource implements IPAPFundingSource {
    sourceId!: number;
    sourceName?: string | null;

    constructor(data?: IPAPFundingSource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sourceId = data["sourceId"] !== undefined ? data["sourceId"] : <any>null;
            this.sourceName = data["sourceName"] !== undefined ? data["sourceName"] : <any>null;
        }
    }

    static fromJS(data: any): PAPFundingSource {
        data = typeof data === 'object' ? data : {};
        let result = new PAPFundingSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceId"] = this.sourceId !== undefined ? this.sourceId : <any>null;
        data["sourceName"] = this.sourceName !== undefined ? this.sourceName : <any>null;
        return data; 
    }
}

export interface IPAPFundingSource {
    sourceId: number;
    sourceName?: string | null;
}

export class APIResponseOfListOfPAPPaymentStatus extends ProvideErrorMessage implements IAPIResponseOfListOfPAPPaymentStatus {
    data?: PAPPaymentStatus[] | null;

    constructor(data?: IAPIResponseOfListOfPAPPaymentStatus) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PAPPaymentStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfPAPPaymentStatus {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfPAPPaymentStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfPAPPaymentStatus extends IProvideErrorMessage {
    data?: IPAPPaymentStatus[] | null;
}

export class PAPPaymentStatus implements IPAPPaymentStatus {
    statusId!: number;
    statusName?: string | null;

    constructor(data?: IPAPPaymentStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusId = data["statusId"] !== undefined ? data["statusId"] : <any>null;
            this.statusName = data["statusName"] !== undefined ? data["statusName"] : <any>null;
        }
    }

    static fromJS(data: any): PAPPaymentStatus {
        data = typeof data === 'object' ? data : {};
        let result = new PAPPaymentStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusId"] = this.statusId !== undefined ? this.statusId : <any>null;
        data["statusName"] = this.statusName !== undefined ? this.statusName : <any>null;
        return data; 
    }
}

export interface IPAPPaymentStatus {
    statusId: number;
    statusName?: string | null;
}

export class APIResponseOfAssetLastLoanedPatient extends ProvideErrorMessage implements IAPIResponseOfAssetLastLoanedPatient {
    data?: AssetLastLoanedPatient | null;

    constructor(data?: IAPIResponseOfAssetLastLoanedPatient) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AssetLastLoanedPatient.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAssetLastLoanedPatient {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAssetLastLoanedPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAssetLastLoanedPatient extends IProvideErrorMessage {
    data?: IAssetLastLoanedPatient | null;
}

export class APIResponseOfListOfInventoryCompanyDetailsDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryCompanyDetailsDO {
    data?: InventoryCompanyDetailsDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryCompanyDetailsDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryCompanyDetailsDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryCompanyDetailsDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryCompanyDetailsDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryCompanyDetailsDO extends IProvideErrorMessage {
    data?: IInventoryCompanyDetailsDO[] | null;
}

export class InventoryCompanyDetailsDO implements IInventoryCompanyDetailsDO {
    company_ID!: number;
    companyName?: string | null;
    companyPhone?: string | null;
    companyEmail?: string | null;
    companyAddress?: string | null;

    constructor(data?: IInventoryCompanyDetailsDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.companyPhone = data["companyPhone"] !== undefined ? data["companyPhone"] : <any>null;
            this.companyEmail = data["companyEmail"] !== undefined ? data["companyEmail"] : <any>null;
            this.companyAddress = data["companyAddress"] !== undefined ? data["companyAddress"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryCompanyDetailsDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryCompanyDetailsDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["companyPhone"] = this.companyPhone !== undefined ? this.companyPhone : <any>null;
        data["companyEmail"] = this.companyEmail !== undefined ? this.companyEmail : <any>null;
        data["companyAddress"] = this.companyAddress !== undefined ? this.companyAddress : <any>null;
        return data; 
    }
}

export interface IInventoryCompanyDetailsDO {
    company_ID: number;
    companyName?: string | null;
    companyPhone?: string | null;
    companyEmail?: string | null;
    companyAddress?: string | null;
}

export class APIResponseOfInventoryCategoryDO extends ProvideErrorMessage implements IAPIResponseOfInventoryCategoryDO {
    data?: InventoryCategoryDO | null;

    constructor(data?: IAPIResponseOfInventoryCategoryDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? InventoryCategoryDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfInventoryCategoryDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfInventoryCategoryDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfInventoryCategoryDO extends IProvideErrorMessage {
    data?: IInventoryCategoryDO | null;
}

export class InventoryProductDO implements IInventoryProductDO {
    productId!: number;
    model?: string | null;
    description?: string | null;
    manufacturer?: string | null;
    manufacturerCompany?: InventoryCompanyDO | null;
    primarySupplier?: InventoryCompanyDO | null;
    secondarySupplier?: InventoryCompanyDO | null;
    deletedOn?: Date | null;
    deletedBy?: string | null;
    lastModifiedOn!: Date;
    lastModifiedBy?: string | null;
    createdOn!: Date;
    createdBy?: string | null;
    additionalDescription?: string | null;
    categories?: InventoryCategoryDO[] | null;

    constructor(data?: IInventoryProductDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.manufacturerCompany = data.manufacturerCompany && !(<any>data.manufacturerCompany).toJSON ? new InventoryCompanyDO(data.manufacturerCompany) : <InventoryCompanyDO>this.manufacturerCompany; 
            this.primarySupplier = data.primarySupplier && !(<any>data.primarySupplier).toJSON ? new InventoryCompanyDO(data.primarySupplier) : <InventoryCompanyDO>this.primarySupplier; 
            this.secondarySupplier = data.secondarySupplier && !(<any>data.secondarySupplier).toJSON ? new InventoryCompanyDO(data.secondarySupplier) : <InventoryCompanyDO>this.secondarySupplier; 
            if (data.categories) {
                this.categories = [];
                for (let i = 0; i < data.categories.length; i++) {
                    let item = data.categories[i];
                    this.categories[i] = item && !(<any>item).toJSON ? new InventoryCategoryDO(item) : <InventoryCategoryDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"] !== undefined ? data["productId"] : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.manufacturer = data["manufacturer"] !== undefined ? data["manufacturer"] : <any>null;
            this.manufacturerCompany = data["manufacturerCompany"] ? InventoryCompanyDO.fromJS(data["manufacturerCompany"]) : <any>null;
            this.primarySupplier = data["primarySupplier"] ? InventoryCompanyDO.fromJS(data["primarySupplier"]) : <any>null;
            this.secondarySupplier = data["secondarySupplier"] ? InventoryCompanyDO.fromJS(data["secondarySupplier"]) : <any>null;
            this.deletedOn = data["deletedOn"] ? new Date(data["deletedOn"].toString()) : <any>null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : <any>null;
            this.lastModifiedOn = data["lastModifiedOn"] ? new Date(data["lastModifiedOn"].toString()) : <any>null;
            this.lastModifiedBy = data["lastModifiedBy"] !== undefined ? data["lastModifiedBy"] : <any>null;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : <any>null;
            this.additionalDescription = data["additionalDescription"] !== undefined ? data["additionalDescription"] : <any>null;
            if (data["categories"] && data["categories"].constructor === Array) {
                this.categories = [];
                for (let item of data["categories"])
                    this.categories.push(InventoryCategoryDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryProductDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryProductDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["manufacturer"] = this.manufacturer !== undefined ? this.manufacturer : <any>null;
        data["manufacturerCompany"] = this.manufacturerCompany ? this.manufacturerCompany.toJSON() : <any>null;
        data["primarySupplier"] = this.primarySupplier ? this.primarySupplier.toJSON() : <any>null;
        data["secondarySupplier"] = this.secondarySupplier ? this.secondarySupplier.toJSON() : <any>null;
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : <any>null;
        data["lastModifiedOn"] = this.lastModifiedOn ? this.lastModifiedOn.toISOString() : <any>null;
        data["lastModifiedBy"] = this.lastModifiedBy !== undefined ? this.lastModifiedBy : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["additionalDescription"] = this.additionalDescription !== undefined ? this.additionalDescription : <any>null;
        if (this.categories && this.categories.constructor === Array) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInventoryProductDO {
    productId: number;
    model?: string | null;
    description?: string | null;
    manufacturer?: string | null;
    manufacturerCompany?: IInventoryCompanyDO | null;
    primarySupplier?: IInventoryCompanyDO | null;
    secondarySupplier?: IInventoryCompanyDO | null;
    deletedOn?: Date | null;
    deletedBy?: string | null;
    lastModifiedOn: Date;
    lastModifiedBy?: string | null;
    createdOn: Date;
    createdBy?: string | null;
    additionalDescription?: string | null;
    categories?: IInventoryCategoryDO[] | null;
}

export class APIResponseOfInventoryProductDO extends ProvideErrorMessage implements IAPIResponseOfInventoryProductDO {
    data?: InventoryProductDO | null;

    constructor(data?: IAPIResponseOfInventoryProductDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? InventoryProductDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfInventoryProductDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfInventoryProductDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfInventoryProductDO extends IProvideErrorMessage {
    data?: IInventoryProductDO | null;
}

export class APIResponseOfListOfInventoryProductDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryProductDO {
    data?: InventoryProductDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryProductDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryProductDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryProductDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryProductDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryProductDO extends IProvideErrorMessage {
    data?: IInventoryProductDO[] | null;
}

export class APIResponseOfListOfInventoryCategoryClosureDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryCategoryClosureDO {
    data?: InventoryCategoryClosureDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryCategoryClosureDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryCategoryClosureDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryCategoryClosureDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryCategoryClosureDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryCategoryClosureDO extends IProvideErrorMessage {
    data?: IInventoryCategoryClosureDO[] | null;
}

export class InventoryCategoryClosureDO implements IInventoryCategoryClosureDO {
    parentId!: number;
    childId!: number;
    depth!: number;

    constructor(data?: IInventoryCategoryClosureDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : <any>null;
            this.childId = data["childId"] !== undefined ? data["childId"] : <any>null;
            this.depth = data["depth"] !== undefined ? data["depth"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryCategoryClosureDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryCategoryClosureDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["childId"] = this.childId !== undefined ? this.childId : <any>null;
        data["depth"] = this.depth !== undefined ? this.depth : <any>null;
        return data; 
    }
}

export interface IInventoryCategoryClosureDO {
    parentId: number;
    childId: number;
    depth: number;
}

export class APIResponseOfListOfInventoryProductCategoryDO extends ProvideErrorMessage implements IAPIResponseOfListOfInventoryProductCategoryDO {
    data?: InventoryProductCategoryDO[] | null;

    constructor(data?: IAPIResponseOfListOfInventoryProductCategoryDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(InventoryProductCategoryDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfInventoryProductCategoryDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfInventoryProductCategoryDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfInventoryProductCategoryDO extends IProvideErrorMessage {
    data?: IInventoryProductCategoryDO[] | null;
}

export class InventoryProductCategoryDO implements IInventoryProductCategoryDO {
    inventoryCategoryId!: number;
    productId!: number;
    categoryId!: number;

    constructor(data?: IInventoryProductCategoryDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inventoryCategoryId = data["inventoryCategoryId"] !== undefined ? data["inventoryCategoryId"] : <any>null;
            this.productId = data["productId"] !== undefined ? data["productId"] : <any>null;
            this.categoryId = data["categoryId"] !== undefined ? data["categoryId"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryProductCategoryDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryProductCategoryDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inventoryCategoryId"] = this.inventoryCategoryId !== undefined ? this.inventoryCategoryId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        return data; 
    }
}

export interface IInventoryProductCategoryDO {
    inventoryCategoryId: number;
    productId: number;
    categoryId: number;
}

export class InventoryProductFilterDO implements IInventoryProductFilterDO {
    searchTerm?: string | null;
    searchCategory_ID?: number | null;

    constructor(data?: IInventoryProductFilterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchTerm = data["searchTerm"] !== undefined ? data["searchTerm"] : <any>null;
            this.searchCategory_ID = data["searchCategory_ID"] !== undefined ? data["searchCategory_ID"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryProductFilterDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryProductFilterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchTerm"] = this.searchTerm !== undefined ? this.searchTerm : <any>null;
        data["searchCategory_ID"] = this.searchCategory_ID !== undefined ? this.searchCategory_ID : <any>null;
        return data; 
    }
}

export interface IInventoryProductFilterDO {
    searchTerm?: string | null;
    searchCategory_ID?: number | null;
}

export class InventoryCategoryFilterDO implements IInventoryCategoryFilterDO {
    searchTerm?: string | null;

    constructor(data?: IInventoryCategoryFilterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchTerm = data["searchTerm"] !== undefined ? data["searchTerm"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryCategoryFilterDO {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryCategoryFilterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchTerm"] = this.searchTerm !== undefined ? this.searchTerm : <any>null;
        return data; 
    }
}

export interface IInventoryCategoryFilterDO {
    searchTerm?: string | null;
}

export class BookingFilter implements IBookingFilter {
    doctorId!: number;
    locationId!: number;
    fromDate?: DateTimeDO | null;
    toDate?: DateTimeDO | null;
    includeDeleted!: boolean;

    constructor(data?: IBookingFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.fromDate = data.fromDate && !(<any>data.fromDate).toJSON ? new DateTimeDO(data.fromDate) : <DateTimeDO>this.fromDate; 
            this.toDate = data.toDate && !(<any>data.toDate).toJSON ? new DateTimeDO(data.toDate) : <DateTimeDO>this.toDate; 
        }
    }

    init(data?: any) {
        if (data) {
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.fromDate = data["fromDate"] ? DateTimeDO.fromJS(data["fromDate"]) : <any>null;
            this.toDate = data["toDate"] ? DateTimeDO.fromJS(data["toDate"]) : <any>null;
            this.includeDeleted = data["includeDeleted"] !== undefined ? data["includeDeleted"] : <any>null;
        }
    }

    static fromJS(data: any): BookingFilter {
        data = typeof data === 'object' ? data : {};
        let result = new BookingFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["fromDate"] = this.fromDate ? this.fromDate.toJSON() : <any>null;
        data["toDate"] = this.toDate ? this.toDate.toJSON() : <any>null;
        data["includeDeleted"] = this.includeDeleted !== undefined ? this.includeDeleted : <any>null;
        return data; 
    }
}

export interface IBookingFilter {
    doctorId: number;
    locationId: number;
    fromDate?: IDateTimeDO | null;
    toDate?: IDateTimeDO | null;
    includeDeleted: boolean;
}

export class DateTimeDO implements IDateTimeDO {
    day!: number;
    month!: number;
    year!: number;
    hours!: number;
    minutes!: number;

    constructor(data?: IDateTimeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.day = data["day"] !== undefined ? data["day"] : <any>null;
            this.month = data["month"] !== undefined ? data["month"] : <any>null;
            this.year = data["year"] !== undefined ? data["year"] : <any>null;
            this.hours = data["hours"] !== undefined ? data["hours"] : <any>null;
            this.minutes = data["minutes"] !== undefined ? data["minutes"] : <any>null;
        }
    }

    static fromJS(data: any): DateTimeDO {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day !== undefined ? this.day : <any>null;
        data["month"] = this.month !== undefined ? this.month : <any>null;
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["hours"] = this.hours !== undefined ? this.hours : <any>null;
        data["minutes"] = this.minutes !== undefined ? this.minutes : <any>null;
        return data; 
    }
}

export interface IDateTimeDO {
    day: number;
    month: number;
    year: number;
    hours: number;
    minutes: number;
}

export class APIResponseOfListOfBillWorksheetItem extends ProvideErrorMessage implements IAPIResponseOfListOfBillWorksheetItem {
    data?: BillWorksheetItem[] | null;

    constructor(data?: IAPIResponseOfListOfBillWorksheetItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(BillWorksheetItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfBillWorksheetItem {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfBillWorksheetItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfBillWorksheetItem extends IProvideErrorMessage {
    data?: IBillWorksheetItem[] | null;
}

export class BillWorksheetItem implements IBillWorksheetItem {
    claimId!: number;
    bookingId!: number;
    bookingType?: string | null;
    patientId!: number;
    patientDisplayName?: string | null;
    patientDateOfBirth?: DateTimeDO | null;
    doctorId!: number;
    doctorDisplayName?: string | null;
    bookingDate?: DateTimeDO | null;
    status!: WorksheetClaimStatus;
    statusDisplayName?: string | null;
    locationId!: number;
    locationDisplayName?: string | null;
    insurer?: string | null;
    insurerId!: number;
    companyId?: number | null;
    invoiceTo?: string | null;
    insurerPolicyNumber?: string | null;
    insurerCardNumber?: string | null;
    feeTableId?: number | null;
    claimSent!: boolean;
    method?: string | null;
    insurerDefaultMethod?: string | null;
    applicationNumber?: string | null;
    serviceId?: number | null;
    serviceCode?: string | null;
    insurerCode?: string | null;
    description?: string | null;
    billPracticeFee!: boolean;
    fullFee?: number | null;
    cover?: number | null;
    coverFee?: number | null;
    coPayment?: number | null;
    coPaymentOverride?: number | null;
    excess?: number | null;
    insurerDefaultCover?: number | null;
    deleted!: boolean;
    invoiceNo_Patient?: number | null;
    invoiceNo_HealthInsurer?: number | null;
    patientNoCharge!: boolean;
    insurerNoCharge!: boolean;
    claimNotes?: string | null;
    serviceReason?: string | null;
    accRelated!: boolean;
    dateTimePatientDateOfBirth?: Date | null;
    dateTimeBookingDate?: Date | null;
    services?: string | null;
    bookingNotes?: string | null;

    constructor(data?: IBillWorksheetItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patientDateOfBirth = data.patientDateOfBirth && !(<any>data.patientDateOfBirth).toJSON ? new DateTimeDO(data.patientDateOfBirth) : <DateTimeDO>this.patientDateOfBirth; 
            this.bookingDate = data.bookingDate && !(<any>data.bookingDate).toJSON ? new DateTimeDO(data.bookingDate) : <DateTimeDO>this.bookingDate; 
        }
    }

    init(data?: any) {
        if (data) {
            this.claimId = data["claimId"] !== undefined ? data["claimId"] : <any>null;
            this.bookingId = data["bookingId"] !== undefined ? data["bookingId"] : <any>null;
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.patientDisplayName = data["patientDisplayName"] !== undefined ? data["patientDisplayName"] : <any>null;
            this.patientDateOfBirth = data["patientDateOfBirth"] ? DateTimeDO.fromJS(data["patientDateOfBirth"]) : <any>null;
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.doctorDisplayName = data["doctorDisplayName"] !== undefined ? data["doctorDisplayName"] : <any>null;
            this.bookingDate = data["bookingDate"] ? DateTimeDO.fromJS(data["bookingDate"]) : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.statusDisplayName = data["statusDisplayName"] !== undefined ? data["statusDisplayName"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.locationDisplayName = data["locationDisplayName"] !== undefined ? data["locationDisplayName"] : <any>null;
            this.insurer = data["insurer"] !== undefined ? data["insurer"] : <any>null;
            this.insurerId = data["insurerId"] !== undefined ? data["insurerId"] : <any>null;
            this.companyId = data["companyId"] !== undefined ? data["companyId"] : <any>null;
            this.invoiceTo = data["invoiceTo"] !== undefined ? data["invoiceTo"] : <any>null;
            this.insurerPolicyNumber = data["insurerPolicyNumber"] !== undefined ? data["insurerPolicyNumber"] : <any>null;
            this.insurerCardNumber = data["insurerCardNumber"] !== undefined ? data["insurerCardNumber"] : <any>null;
            this.feeTableId = data["feeTableId"] !== undefined ? data["feeTableId"] : <any>null;
            this.claimSent = data["claimSent"] !== undefined ? data["claimSent"] : <any>null;
            this.method = data["method"] !== undefined ? data["method"] : <any>null;
            this.insurerDefaultMethod = data["insurerDefaultMethod"] !== undefined ? data["insurerDefaultMethod"] : <any>null;
            this.applicationNumber = data["applicationNumber"] !== undefined ? data["applicationNumber"] : <any>null;
            this.serviceId = data["serviceId"] !== undefined ? data["serviceId"] : <any>null;
            this.serviceCode = data["serviceCode"] !== undefined ? data["serviceCode"] : <any>null;
            this.insurerCode = data["insurerCode"] !== undefined ? data["insurerCode"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.billPracticeFee = data["billPracticeFee"] !== undefined ? data["billPracticeFee"] : <any>null;
            this.fullFee = data["fullFee"] !== undefined ? data["fullFee"] : <any>null;
            this.cover = data["cover"] !== undefined ? data["cover"] : <any>null;
            this.coverFee = data["coverFee"] !== undefined ? data["coverFee"] : <any>null;
            this.coPayment = data["coPayment"] !== undefined ? data["coPayment"] : <any>null;
            this.coPaymentOverride = data["coPaymentOverride"] !== undefined ? data["coPaymentOverride"] : <any>null;
            this.excess = data["excess"] !== undefined ? data["excess"] : <any>null;
            this.insurerDefaultCover = data["insurerDefaultCover"] !== undefined ? data["insurerDefaultCover"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.invoiceNo_Patient = data["invoiceNo_Patient"] !== undefined ? data["invoiceNo_Patient"] : <any>null;
            this.invoiceNo_HealthInsurer = data["invoiceNo_HealthInsurer"] !== undefined ? data["invoiceNo_HealthInsurer"] : <any>null;
            this.patientNoCharge = data["patientNoCharge"] !== undefined ? data["patientNoCharge"] : <any>null;
            this.insurerNoCharge = data["insurerNoCharge"] !== undefined ? data["insurerNoCharge"] : <any>null;
            this.claimNotes = data["claimNotes"] !== undefined ? data["claimNotes"] : <any>null;
            this.serviceReason = data["serviceReason"] !== undefined ? data["serviceReason"] : <any>null;
            this.accRelated = data["accRelated"] !== undefined ? data["accRelated"] : <any>null;
            this.dateTimePatientDateOfBirth = data["dateTimePatientDateOfBirth"] ? new Date(data["dateTimePatientDateOfBirth"].toString()) : <any>null;
            this.dateTimeBookingDate = data["dateTimeBookingDate"] ? new Date(data["dateTimeBookingDate"].toString()) : <any>null;
            this.services = data["services"] !== undefined ? data["services"] : <any>null;
            this.bookingNotes = data["bookingNotes"] !== undefined ? data["bookingNotes"] : <any>null;
        }
    }

    static fromJS(data: any): BillWorksheetItem {
        data = typeof data === 'object' ? data : {};
        let result = new BillWorksheetItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["claimId"] = this.claimId !== undefined ? this.claimId : <any>null;
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : <any>null;
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["patientDisplayName"] = this.patientDisplayName !== undefined ? this.patientDisplayName : <any>null;
        data["patientDateOfBirth"] = this.patientDateOfBirth ? this.patientDateOfBirth.toJSON() : <any>null;
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["doctorDisplayName"] = this.doctorDisplayName !== undefined ? this.doctorDisplayName : <any>null;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toJSON() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["statusDisplayName"] = this.statusDisplayName !== undefined ? this.statusDisplayName : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["locationDisplayName"] = this.locationDisplayName !== undefined ? this.locationDisplayName : <any>null;
        data["insurer"] = this.insurer !== undefined ? this.insurer : <any>null;
        data["insurerId"] = this.insurerId !== undefined ? this.insurerId : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["invoiceTo"] = this.invoiceTo !== undefined ? this.invoiceTo : <any>null;
        data["insurerPolicyNumber"] = this.insurerPolicyNumber !== undefined ? this.insurerPolicyNumber : <any>null;
        data["insurerCardNumber"] = this.insurerCardNumber !== undefined ? this.insurerCardNumber : <any>null;
        data["feeTableId"] = this.feeTableId !== undefined ? this.feeTableId : <any>null;
        data["claimSent"] = this.claimSent !== undefined ? this.claimSent : <any>null;
        data["method"] = this.method !== undefined ? this.method : <any>null;
        data["insurerDefaultMethod"] = this.insurerDefaultMethod !== undefined ? this.insurerDefaultMethod : <any>null;
        data["applicationNumber"] = this.applicationNumber !== undefined ? this.applicationNumber : <any>null;
        data["serviceId"] = this.serviceId !== undefined ? this.serviceId : <any>null;
        data["serviceCode"] = this.serviceCode !== undefined ? this.serviceCode : <any>null;
        data["insurerCode"] = this.insurerCode !== undefined ? this.insurerCode : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["billPracticeFee"] = this.billPracticeFee !== undefined ? this.billPracticeFee : <any>null;
        data["fullFee"] = this.fullFee !== undefined ? this.fullFee : <any>null;
        data["cover"] = this.cover !== undefined ? this.cover : <any>null;
        data["coverFee"] = this.coverFee !== undefined ? this.coverFee : <any>null;
        data["coPayment"] = this.coPayment !== undefined ? this.coPayment : <any>null;
        data["coPaymentOverride"] = this.coPaymentOverride !== undefined ? this.coPaymentOverride : <any>null;
        data["excess"] = this.excess !== undefined ? this.excess : <any>null;
        data["insurerDefaultCover"] = this.insurerDefaultCover !== undefined ? this.insurerDefaultCover : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["invoiceNo_Patient"] = this.invoiceNo_Patient !== undefined ? this.invoiceNo_Patient : <any>null;
        data["invoiceNo_HealthInsurer"] = this.invoiceNo_HealthInsurer !== undefined ? this.invoiceNo_HealthInsurer : <any>null;
        data["patientNoCharge"] = this.patientNoCharge !== undefined ? this.patientNoCharge : <any>null;
        data["insurerNoCharge"] = this.insurerNoCharge !== undefined ? this.insurerNoCharge : <any>null;
        data["claimNotes"] = this.claimNotes !== undefined ? this.claimNotes : <any>null;
        data["serviceReason"] = this.serviceReason !== undefined ? this.serviceReason : <any>null;
        data["accRelated"] = this.accRelated !== undefined ? this.accRelated : <any>null;
        data["dateTimePatientDateOfBirth"] = this.dateTimePatientDateOfBirth ? this.dateTimePatientDateOfBirth.toISOString() : <any>null;
        data["dateTimeBookingDate"] = this.dateTimeBookingDate ? this.dateTimeBookingDate.toISOString() : <any>null;
        data["services"] = this.services !== undefined ? this.services : <any>null;
        data["bookingNotes"] = this.bookingNotes !== undefined ? this.bookingNotes : <any>null;
        return data; 
    }
}

export interface IBillWorksheetItem {
    claimId: number;
    bookingId: number;
    bookingType?: string | null;
    patientId: number;
    patientDisplayName?: string | null;
    patientDateOfBirth?: IDateTimeDO | null;
    doctorId: number;
    doctorDisplayName?: string | null;
    bookingDate?: IDateTimeDO | null;
    status: WorksheetClaimStatus;
    statusDisplayName?: string | null;
    locationId: number;
    locationDisplayName?: string | null;
    insurer?: string | null;
    insurerId: number;
    companyId?: number | null;
    invoiceTo?: string | null;
    insurerPolicyNumber?: string | null;
    insurerCardNumber?: string | null;
    feeTableId?: number | null;
    claimSent: boolean;
    method?: string | null;
    insurerDefaultMethod?: string | null;
    applicationNumber?: string | null;
    serviceId?: number | null;
    serviceCode?: string | null;
    insurerCode?: string | null;
    description?: string | null;
    billPracticeFee: boolean;
    fullFee?: number | null;
    cover?: number | null;
    coverFee?: number | null;
    coPayment?: number | null;
    coPaymentOverride?: number | null;
    excess?: number | null;
    insurerDefaultCover?: number | null;
    deleted: boolean;
    invoiceNo_Patient?: number | null;
    invoiceNo_HealthInsurer?: number | null;
    patientNoCharge: boolean;
    insurerNoCharge: boolean;
    claimNotes?: string | null;
    serviceReason?: string | null;
    accRelated: boolean;
    dateTimePatientDateOfBirth?: Date | null;
    dateTimeBookingDate?: Date | null;
    services?: string | null;
    bookingNotes?: string | null;
}

export enum WorksheetClaimStatus {
    Booking = 66, 
    Complete = 67, 
    PendingHealthInsurerInvoice = 72, 
    Coded = 79, 
    PendingPatientInvoice = 80, 
    Unknown = 85, 
    Waiting = 87, 
}

export class APIResponseOfInt32 extends ProvideErrorMessage implements IAPIResponseOfInt32 {
    data!: number;

    constructor(data?: IAPIResponseOfInt32) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfInt32 extends IProvideErrorMessage {
    data: number;
}

export class APIResponseOfBoolean extends ProvideErrorMessage implements IAPIResponseOfBoolean {
    data!: boolean;

    constructor(data?: IAPIResponseOfBoolean) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfBoolean extends IProvideErrorMessage {
    data: boolean;
}

export class APIResponseOfBillWorksheetItem extends ProvideErrorMessage implements IAPIResponseOfBillWorksheetItem {
    data?: BillWorksheetItem | null;

    constructor(data?: IAPIResponseOfBillWorksheetItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? BillWorksheetItem.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfBillWorksheetItem {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfBillWorksheetItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfBillWorksheetItem extends IProvideErrorMessage {
    data?: IBillWorksheetItem | null;
}

export class APIResponseOfUpdateHealthfundResponse extends ProvideErrorMessage implements IAPIResponseOfUpdateHealthfundResponse {
    data?: UpdateHealthfundResponse | null;

    constructor(data?: IAPIResponseOfUpdateHealthfundResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? UpdateHealthfundResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfUpdateHealthfundResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfUpdateHealthfundResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfUpdateHealthfundResponse extends IProvideErrorMessage {
    data?: IUpdateHealthfundResponse | null;
}

export class UpdateHealthfundResponse implements IUpdateHealthfundResponse {
    items?: BillWorksheetItem[] | null;
    errorMessage?: string | null;

    constructor(data?: IUpdateHealthfundResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new BillWorksheetItem(item) : <BillWorksheetItem>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BillWorksheetItem.fromJS(item));
            }
            this.errorMessage = data["errorMessage"] !== undefined ? data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateHealthfundResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateHealthfundResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data; 
    }
}

export interface IUpdateHealthfundResponse {
    items?: IBillWorksheetItem[] | null;
    errorMessage?: string | null;
}

export class APIResponseOfBillWorksheetAuditInfo extends ProvideErrorMessage implements IAPIResponseOfBillWorksheetAuditInfo {
    data?: BillWorksheetAuditInfo | null;

    constructor(data?: IAPIResponseOfBillWorksheetAuditInfo) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? BillWorksheetAuditInfo.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfBillWorksheetAuditInfo {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfBillWorksheetAuditInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfBillWorksheetAuditInfo extends IProvideErrorMessage {
    data?: IBillWorksheetAuditInfo | null;
}

export class BillWorksheetAuditInfo implements IBillWorksheetAuditInfo {
    claimId!: number;
    userLastModified?: string | null;
    dateLastModified?: DateTimeDO | null;
    userCreated?: string | null;
    dateCreated?: DateTimeDO | null;
    userDeleted?: string | null;
    dateDeleted?: DateTimeDO | null;
    userBooking?: string | null;
    dateBooking?: DateTimeDO | null;
    userCoded?: string | null;
    dateCoded?: DateTimeDO | null;
    userWaiting?: string | null;
    dateWaiting?: DateTimeDO | null;
    userPendingPatient?: string | null;
    datePendingPatient?: DateTimeDO | null;
    userPendingHI?: string | null;
    datePendingHI?: DateTimeDO | null;
    userComplete?: string | null;
    dateComplete?: DateTimeDO | null;
    invoiceNoPatient?: number | null;
    invoiceNoInsurer?: number | null;

    constructor(data?: IBillWorksheetAuditInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.dateLastModified = data.dateLastModified && !(<any>data.dateLastModified).toJSON ? new DateTimeDO(data.dateLastModified) : <DateTimeDO>this.dateLastModified; 
            this.dateCreated = data.dateCreated && !(<any>data.dateCreated).toJSON ? new DateTimeDO(data.dateCreated) : <DateTimeDO>this.dateCreated; 
            this.dateDeleted = data.dateDeleted && !(<any>data.dateDeleted).toJSON ? new DateTimeDO(data.dateDeleted) : <DateTimeDO>this.dateDeleted; 
            this.dateBooking = data.dateBooking && !(<any>data.dateBooking).toJSON ? new DateTimeDO(data.dateBooking) : <DateTimeDO>this.dateBooking; 
            this.dateCoded = data.dateCoded && !(<any>data.dateCoded).toJSON ? new DateTimeDO(data.dateCoded) : <DateTimeDO>this.dateCoded; 
            this.dateWaiting = data.dateWaiting && !(<any>data.dateWaiting).toJSON ? new DateTimeDO(data.dateWaiting) : <DateTimeDO>this.dateWaiting; 
            this.datePendingPatient = data.datePendingPatient && !(<any>data.datePendingPatient).toJSON ? new DateTimeDO(data.datePendingPatient) : <DateTimeDO>this.datePendingPatient; 
            this.datePendingHI = data.datePendingHI && !(<any>data.datePendingHI).toJSON ? new DateTimeDO(data.datePendingHI) : <DateTimeDO>this.datePendingHI; 
            this.dateComplete = data.dateComplete && !(<any>data.dateComplete).toJSON ? new DateTimeDO(data.dateComplete) : <DateTimeDO>this.dateComplete; 
        }
    }

    init(data?: any) {
        if (data) {
            this.claimId = data["claimId"] !== undefined ? data["claimId"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? DateTimeDO.fromJS(data["dateLastModified"]) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? DateTimeDO.fromJS(data["dateCreated"]) : <any>null;
            this.userDeleted = data["userDeleted"] !== undefined ? data["userDeleted"] : <any>null;
            this.dateDeleted = data["dateDeleted"] ? DateTimeDO.fromJS(data["dateDeleted"]) : <any>null;
            this.userBooking = data["userBooking"] !== undefined ? data["userBooking"] : <any>null;
            this.dateBooking = data["dateBooking"] ? DateTimeDO.fromJS(data["dateBooking"]) : <any>null;
            this.userCoded = data["userCoded"] !== undefined ? data["userCoded"] : <any>null;
            this.dateCoded = data["dateCoded"] ? DateTimeDO.fromJS(data["dateCoded"]) : <any>null;
            this.userWaiting = data["userWaiting"] !== undefined ? data["userWaiting"] : <any>null;
            this.dateWaiting = data["dateWaiting"] ? DateTimeDO.fromJS(data["dateWaiting"]) : <any>null;
            this.userPendingPatient = data["userPendingPatient"] !== undefined ? data["userPendingPatient"] : <any>null;
            this.datePendingPatient = data["datePendingPatient"] ? DateTimeDO.fromJS(data["datePendingPatient"]) : <any>null;
            this.userPendingHI = data["userPendingHI"] !== undefined ? data["userPendingHI"] : <any>null;
            this.datePendingHI = data["datePendingHI"] ? DateTimeDO.fromJS(data["datePendingHI"]) : <any>null;
            this.userComplete = data["userComplete"] !== undefined ? data["userComplete"] : <any>null;
            this.dateComplete = data["dateComplete"] ? DateTimeDO.fromJS(data["dateComplete"]) : <any>null;
            this.invoiceNoPatient = data["invoiceNoPatient"] !== undefined ? data["invoiceNoPatient"] : <any>null;
            this.invoiceNoInsurer = data["invoiceNoInsurer"] !== undefined ? data["invoiceNoInsurer"] : <any>null;
        }
    }

    static fromJS(data: any): BillWorksheetAuditInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BillWorksheetAuditInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["claimId"] = this.claimId !== undefined ? this.claimId : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toJSON() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toJSON() : <any>null;
        data["userDeleted"] = this.userDeleted !== undefined ? this.userDeleted : <any>null;
        data["dateDeleted"] = this.dateDeleted ? this.dateDeleted.toJSON() : <any>null;
        data["userBooking"] = this.userBooking !== undefined ? this.userBooking : <any>null;
        data["dateBooking"] = this.dateBooking ? this.dateBooking.toJSON() : <any>null;
        data["userCoded"] = this.userCoded !== undefined ? this.userCoded : <any>null;
        data["dateCoded"] = this.dateCoded ? this.dateCoded.toJSON() : <any>null;
        data["userWaiting"] = this.userWaiting !== undefined ? this.userWaiting : <any>null;
        data["dateWaiting"] = this.dateWaiting ? this.dateWaiting.toJSON() : <any>null;
        data["userPendingPatient"] = this.userPendingPatient !== undefined ? this.userPendingPatient : <any>null;
        data["datePendingPatient"] = this.datePendingPatient ? this.datePendingPatient.toJSON() : <any>null;
        data["userPendingHI"] = this.userPendingHI !== undefined ? this.userPendingHI : <any>null;
        data["datePendingHI"] = this.datePendingHI ? this.datePendingHI.toJSON() : <any>null;
        data["userComplete"] = this.userComplete !== undefined ? this.userComplete : <any>null;
        data["dateComplete"] = this.dateComplete ? this.dateComplete.toJSON() : <any>null;
        data["invoiceNoPatient"] = this.invoiceNoPatient !== undefined ? this.invoiceNoPatient : <any>null;
        data["invoiceNoInsurer"] = this.invoiceNoInsurer !== undefined ? this.invoiceNoInsurer : <any>null;
        return data; 
    }
}

export interface IBillWorksheetAuditInfo {
    claimId: number;
    userLastModified?: string | null;
    dateLastModified?: IDateTimeDO | null;
    userCreated?: string | null;
    dateCreated?: IDateTimeDO | null;
    userDeleted?: string | null;
    dateDeleted?: IDateTimeDO | null;
    userBooking?: string | null;
    dateBooking?: IDateTimeDO | null;
    userCoded?: string | null;
    dateCoded?: IDateTimeDO | null;
    userWaiting?: string | null;
    dateWaiting?: IDateTimeDO | null;
    userPendingPatient?: string | null;
    datePendingPatient?: IDateTimeDO | null;
    userPendingHI?: string | null;
    datePendingHI?: IDateTimeDO | null;
    userComplete?: string | null;
    dateComplete?: IDateTimeDO | null;
    invoiceNoPatient?: number | null;
    invoiceNoInsurer?: number | null;
}

export class APIResponseOfFeeTableBillItems extends ProvideErrorMessage implements IAPIResponseOfFeeTableBillItems {
    data?: FeeTableBillItems | null;

    constructor(data?: IAPIResponseOfFeeTableBillItems) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FeeTableBillItems.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFeeTableBillItems {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFeeTableBillItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFeeTableBillItems extends IProvideErrorMessage {
    data?: IFeeTableBillItems | null;
}

export class FeeTableBillItems implements IFeeTableBillItems {
    feeTableId?: number | null;
    billItems?: BillItemHealthFundFee[] | null;

    constructor(data?: IFeeTableBillItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.billItems) {
                this.billItems = [];
                for (let i = 0; i < data.billItems.length; i++) {
                    let item = data.billItems[i];
                    this.billItems[i] = item && !(<any>item).toJSON ? new BillItemHealthFundFee(item) : <BillItemHealthFundFee>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feeTableId = data["feeTableId"] !== undefined ? data["feeTableId"] : <any>null;
            if (data["billItems"] && data["billItems"].constructor === Array) {
                this.billItems = [];
                for (let item of data["billItems"])
                    this.billItems.push(BillItemHealthFundFee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FeeTableBillItems {
        data = typeof data === 'object' ? data : {};
        let result = new FeeTableBillItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feeTableId"] = this.feeTableId !== undefined ? this.feeTableId : <any>null;
        if (this.billItems && this.billItems.constructor === Array) {
            data["billItems"] = [];
            for (let item of this.billItems)
                data["billItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFeeTableBillItems {
    feeTableId?: number | null;
    billItems?: IBillItemHealthFundFee[] | null;
}

export class BillItemHealthFundFee implements IBillItemHealthFundFee {
    itemNumDisp?: string | null;
    healthFundCode?: string | null;
    fullFee?: number | null;
    practiceFee?: number | null;
    displayFee!: number;
    description?: string | null;

    constructor(data?: IBillItemHealthFundFee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemNumDisp = data["itemNumDisp"] !== undefined ? data["itemNumDisp"] : <any>null;
            this.healthFundCode = data["healthFundCode"] !== undefined ? data["healthFundCode"] : <any>null;
            this.fullFee = data["fullFee"] !== undefined ? data["fullFee"] : <any>null;
            this.practiceFee = data["practiceFee"] !== undefined ? data["practiceFee"] : <any>null;
            this.displayFee = data["displayFee"] !== undefined ? data["displayFee"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): BillItemHealthFundFee {
        data = typeof data === 'object' ? data : {};
        let result = new BillItemHealthFundFee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemNumDisp"] = this.itemNumDisp !== undefined ? this.itemNumDisp : <any>null;
        data["healthFundCode"] = this.healthFundCode !== undefined ? this.healthFundCode : <any>null;
        data["fullFee"] = this.fullFee !== undefined ? this.fullFee : <any>null;
        data["practiceFee"] = this.practiceFee !== undefined ? this.practiceFee : <any>null;
        data["displayFee"] = this.displayFee !== undefined ? this.displayFee : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IBillItemHealthFundFee {
    itemNumDisp?: string | null;
    healthFundCode?: string | null;
    fullFee?: number | null;
    practiceFee?: number | null;
    displayFee: number;
    description?: string | null;
}

export class AddBookingApiRequestParams extends BaseRequestParams implements IAddBookingApiRequestParams {
    admission_ID?: number | null;
    associate?: number | null;
    availableToExternal?: number | null;
    billingType?: number | null;
    billLocation_ID?: number | null;
    billTo?: number | null;
    booking_ID?: number | null;
    bookingPriority?: number | null;
    calculatedPatientDistance?: number | null;
    category?: number | null;
    cntBookingChange?: number | null;
    contactNumber?: string | null;
    ctimestamp?: string | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    dateTimeArrived?: Date | null;
    dateTimeClosed?: Date | null;
    dateTimeCompleted?: Date | null;
    dateTimeConfirmed?: Date | null;
    dateTimeEnd?: Date | null;
    dateTimeInSession?: Date | null;
    dateTimeNoShowed?: Date | null;
    dateTimeOutSession?: Date | null;
    dateTimePreviousBooking?: Date | null;
    dateTimeSeen?: Date | null;
    dateTimeStart?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionReason?: string | null;
    deletionUser?: string | null;
    drIDActual?: number | null;
    drIDBooked?: number | null;
    duration?: number | null;
    episode_ID?: number | null;
    firstname?: string | null;
    followUpDetails?: string | null;
    heldInvoiceno?: number | null;
    hospitalBillingClass?: string | null;
    inpatientBooking?: boolean | null;
    inpatientWard?: string | null;
    isFirstBooking?: boolean | null;
    lastInvoiceID?: number | null;
    link_ID?: number | null;
    location_ID?: number | null;
    note_ID?: number | null;
    patient_ID?: number | null;
    paymentClass?: number | null;
    paymentClassDateUpdated?: Date | null;
    paymentClassUserUpdated?: string | null;
    preventSMSReminder?: boolean | null;
    programAttachedTo?: number | null;
    provNum_ID?: number | null;
    publishToRepository?: boolean | null;
    quoteNo?: number | null;
    rcIdentifier1?: string | null;
    rcIdentifier2?: number | null;
    referral_ID?: number | null;
    requestEarlier?: boolean | null;
    resource_ID?: number | null;
    room_ID?: number | null;
    selectedDeletionReason?: number | null;
    selectedStaff1?: number | null;
    selectedStaff2?: number | null;
    selectedStaff3?: number | null;
    selectedStaff4?: number | null;
    status?: string | null;
    surname?: string | null;
    transport?: number | null;
    transportDate?: Date | null;
    triageOptions?: number | null;
    triageType?: string | null;
    type?: string | null;
    unregistered?: boolean | null;
    urgent?: boolean | null;
    userArrived?: string | null;
    userClosed?: string | null;
    userConfirmed?: string | null;
    userCreated?: string | null;
    userInSession?: string | null;
    userLastModified?: string | null;
    userNoShowed?: string | null;
    userOutSession?: string | null;

    constructor(data?: IAddBookingApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
            this.associate = data["associate"] !== undefined ? data["associate"] : <any>null;
            this.availableToExternal = data["availableToExternal"] !== undefined ? data["availableToExternal"] : <any>null;
            this.billingType = data["billingType"] !== undefined ? data["billingType"] : <any>null;
            this.billLocation_ID = data["billLocation_ID"] !== undefined ? data["billLocation_ID"] : <any>null;
            this.billTo = data["billTo"] !== undefined ? data["billTo"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.bookingPriority = data["bookingPriority"] !== undefined ? data["bookingPriority"] : <any>null;
            this.calculatedPatientDistance = data["calculatedPatientDistance"] !== undefined ? data["calculatedPatientDistance"] : <any>null;
            this.category = data["category"] !== undefined ? data["category"] : <any>null;
            this.cntBookingChange = data["cntBookingChange"] !== undefined ? data["cntBookingChange"] : <any>null;
            this.contactNumber = data["contactNumber"] !== undefined ? data["contactNumber"] : <any>null;
            this.ctimestamp = data["ctimestamp"] !== undefined ? data["ctimestamp"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.dateTimeArrived = data["dateTimeArrived"] ? new Date(data["dateTimeArrived"].toString()) : <any>null;
            this.dateTimeClosed = data["dateTimeClosed"] ? new Date(data["dateTimeClosed"].toString()) : <any>null;
            this.dateTimeCompleted = data["dateTimeCompleted"] ? new Date(data["dateTimeCompleted"].toString()) : <any>null;
            this.dateTimeConfirmed = data["dateTimeConfirmed"] ? new Date(data["dateTimeConfirmed"].toString()) : <any>null;
            this.dateTimeEnd = data["dateTimeEnd"] ? new Date(data["dateTimeEnd"].toString()) : <any>null;
            this.dateTimeInSession = data["dateTimeInSession"] ? new Date(data["dateTimeInSession"].toString()) : <any>null;
            this.dateTimeNoShowed = data["dateTimeNoShowed"] ? new Date(data["dateTimeNoShowed"].toString()) : <any>null;
            this.dateTimeOutSession = data["dateTimeOutSession"] ? new Date(data["dateTimeOutSession"].toString()) : <any>null;
            this.dateTimePreviousBooking = data["dateTimePreviousBooking"] ? new Date(data["dateTimePreviousBooking"].toString()) : <any>null;
            this.dateTimeSeen = data["dateTimeSeen"] ? new Date(data["dateTimeSeen"].toString()) : <any>null;
            this.dateTimeStart = data["dateTimeStart"] ? new Date(data["dateTimeStart"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.drIDActual = data["drIDActual"] !== undefined ? data["drIDActual"] : <any>null;
            this.drIDBooked = data["drIDBooked"] !== undefined ? data["drIDBooked"] : <any>null;
            this.duration = data["duration"] !== undefined ? data["duration"] : <any>null;
            this.episode_ID = data["episode_ID"] !== undefined ? data["episode_ID"] : <any>null;
            this.firstname = data["firstname"] !== undefined ? data["firstname"] : <any>null;
            this.followUpDetails = data["followUpDetails"] !== undefined ? data["followUpDetails"] : <any>null;
            this.heldInvoiceno = data["heldInvoiceno"] !== undefined ? data["heldInvoiceno"] : <any>null;
            this.hospitalBillingClass = data["hospitalBillingClass"] !== undefined ? data["hospitalBillingClass"] : <any>null;
            this.inpatientBooking = data["inpatientBooking"] !== undefined ? data["inpatientBooking"] : <any>null;
            this.inpatientWard = data["inpatientWard"] !== undefined ? data["inpatientWard"] : <any>null;
            this.isFirstBooking = data["isFirstBooking"] !== undefined ? data["isFirstBooking"] : <any>null;
            this.lastInvoiceID = data["lastInvoiceID"] !== undefined ? data["lastInvoiceID"] : <any>null;
            this.link_ID = data["link_ID"] !== undefined ? data["link_ID"] : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.paymentClass = data["paymentClass"] !== undefined ? data["paymentClass"] : <any>null;
            this.paymentClassDateUpdated = data["paymentClassDateUpdated"] ? new Date(data["paymentClassDateUpdated"].toString()) : <any>null;
            this.paymentClassUserUpdated = data["paymentClassUserUpdated"] !== undefined ? data["paymentClassUserUpdated"] : <any>null;
            this.preventSMSReminder = data["preventSMSReminder"] !== undefined ? data["preventSMSReminder"] : <any>null;
            this.programAttachedTo = data["programAttachedTo"] !== undefined ? data["programAttachedTo"] : <any>null;
            this.provNum_ID = data["provNum_ID"] !== undefined ? data["provNum_ID"] : <any>null;
            this.publishToRepository = data["publishToRepository"] !== undefined ? data["publishToRepository"] : <any>null;
            this.quoteNo = data["quoteNo"] !== undefined ? data["quoteNo"] : <any>null;
            this.rcIdentifier1 = data["rcIdentifier1"] !== undefined ? data["rcIdentifier1"] : <any>null;
            this.rcIdentifier2 = data["rcIdentifier2"] !== undefined ? data["rcIdentifier2"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
            this.requestEarlier = data["requestEarlier"] !== undefined ? data["requestEarlier"] : <any>null;
            this.resource_ID = data["resource_ID"] !== undefined ? data["resource_ID"] : <any>null;
            this.room_ID = data["room_ID"] !== undefined ? data["room_ID"] : <any>null;
            this.selectedDeletionReason = data["selectedDeletionReason"] !== undefined ? data["selectedDeletionReason"] : <any>null;
            this.selectedStaff1 = data["selectedStaff1"] !== undefined ? data["selectedStaff1"] : <any>null;
            this.selectedStaff2 = data["selectedStaff2"] !== undefined ? data["selectedStaff2"] : <any>null;
            this.selectedStaff3 = data["selectedStaff3"] !== undefined ? data["selectedStaff3"] : <any>null;
            this.selectedStaff4 = data["selectedStaff4"] !== undefined ? data["selectedStaff4"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.transport = data["transport"] !== undefined ? data["transport"] : <any>null;
            this.transportDate = data["transportDate"] ? new Date(data["transportDate"].toString()) : <any>null;
            this.triageOptions = data["triageOptions"] !== undefined ? data["triageOptions"] : <any>null;
            this.triageType = data["triageType"] !== undefined ? data["triageType"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.unregistered = data["unregistered"] !== undefined ? data["unregistered"] : <any>null;
            this.urgent = data["urgent"] !== undefined ? data["urgent"] : <any>null;
            this.userArrived = data["userArrived"] !== undefined ? data["userArrived"] : <any>null;
            this.userClosed = data["userClosed"] !== undefined ? data["userClosed"] : <any>null;
            this.userConfirmed = data["userConfirmed"] !== undefined ? data["userConfirmed"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userInSession = data["userInSession"] !== undefined ? data["userInSession"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.userNoShowed = data["userNoShowed"] !== undefined ? data["userNoShowed"] : <any>null;
            this.userOutSession = data["userOutSession"] !== undefined ? data["userOutSession"] : <any>null;
        }
    }

    static fromJS(data: any): AddBookingApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddBookingApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        data["associate"] = this.associate !== undefined ? this.associate : <any>null;
        data["availableToExternal"] = this.availableToExternal !== undefined ? this.availableToExternal : <any>null;
        data["billingType"] = this.billingType !== undefined ? this.billingType : <any>null;
        data["billLocation_ID"] = this.billLocation_ID !== undefined ? this.billLocation_ID : <any>null;
        data["billTo"] = this.billTo !== undefined ? this.billTo : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["bookingPriority"] = this.bookingPriority !== undefined ? this.bookingPriority : <any>null;
        data["calculatedPatientDistance"] = this.calculatedPatientDistance !== undefined ? this.calculatedPatientDistance : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["cntBookingChange"] = this.cntBookingChange !== undefined ? this.cntBookingChange : <any>null;
        data["contactNumber"] = this.contactNumber !== undefined ? this.contactNumber : <any>null;
        data["ctimestamp"] = this.ctimestamp !== undefined ? this.ctimestamp : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["dateTimeArrived"] = this.dateTimeArrived ? this.dateTimeArrived.toISOString() : <any>null;
        data["dateTimeClosed"] = this.dateTimeClosed ? this.dateTimeClosed.toISOString() : <any>null;
        data["dateTimeCompleted"] = this.dateTimeCompleted ? this.dateTimeCompleted.toISOString() : <any>null;
        data["dateTimeConfirmed"] = this.dateTimeConfirmed ? this.dateTimeConfirmed.toISOString() : <any>null;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>null;
        data["dateTimeInSession"] = this.dateTimeInSession ? this.dateTimeInSession.toISOString() : <any>null;
        data["dateTimeNoShowed"] = this.dateTimeNoShowed ? this.dateTimeNoShowed.toISOString() : <any>null;
        data["dateTimeOutSession"] = this.dateTimeOutSession ? this.dateTimeOutSession.toISOString() : <any>null;
        data["dateTimePreviousBooking"] = this.dateTimePreviousBooking ? this.dateTimePreviousBooking.toISOString() : <any>null;
        data["dateTimeSeen"] = this.dateTimeSeen ? this.dateTimeSeen.toISOString() : <any>null;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["drIDActual"] = this.drIDActual !== undefined ? this.drIDActual : <any>null;
        data["drIDBooked"] = this.drIDBooked !== undefined ? this.drIDBooked : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["episode_ID"] = this.episode_ID !== undefined ? this.episode_ID : <any>null;
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["followUpDetails"] = this.followUpDetails !== undefined ? this.followUpDetails : <any>null;
        data["heldInvoiceno"] = this.heldInvoiceno !== undefined ? this.heldInvoiceno : <any>null;
        data["hospitalBillingClass"] = this.hospitalBillingClass !== undefined ? this.hospitalBillingClass : <any>null;
        data["inpatientBooking"] = this.inpatientBooking !== undefined ? this.inpatientBooking : <any>null;
        data["inpatientWard"] = this.inpatientWard !== undefined ? this.inpatientWard : <any>null;
        data["isFirstBooking"] = this.isFirstBooking !== undefined ? this.isFirstBooking : <any>null;
        data["lastInvoiceID"] = this.lastInvoiceID !== undefined ? this.lastInvoiceID : <any>null;
        data["link_ID"] = this.link_ID !== undefined ? this.link_ID : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["paymentClass"] = this.paymentClass !== undefined ? this.paymentClass : <any>null;
        data["paymentClassDateUpdated"] = this.paymentClassDateUpdated ? this.paymentClassDateUpdated.toISOString() : <any>null;
        data["paymentClassUserUpdated"] = this.paymentClassUserUpdated !== undefined ? this.paymentClassUserUpdated : <any>null;
        data["preventSMSReminder"] = this.preventSMSReminder !== undefined ? this.preventSMSReminder : <any>null;
        data["programAttachedTo"] = this.programAttachedTo !== undefined ? this.programAttachedTo : <any>null;
        data["provNum_ID"] = this.provNum_ID !== undefined ? this.provNum_ID : <any>null;
        data["publishToRepository"] = this.publishToRepository !== undefined ? this.publishToRepository : <any>null;
        data["quoteNo"] = this.quoteNo !== undefined ? this.quoteNo : <any>null;
        data["rcIdentifier1"] = this.rcIdentifier1 !== undefined ? this.rcIdentifier1 : <any>null;
        data["rcIdentifier2"] = this.rcIdentifier2 !== undefined ? this.rcIdentifier2 : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        data["requestEarlier"] = this.requestEarlier !== undefined ? this.requestEarlier : <any>null;
        data["resource_ID"] = this.resource_ID !== undefined ? this.resource_ID : <any>null;
        data["room_ID"] = this.room_ID !== undefined ? this.room_ID : <any>null;
        data["selectedDeletionReason"] = this.selectedDeletionReason !== undefined ? this.selectedDeletionReason : <any>null;
        data["selectedStaff1"] = this.selectedStaff1 !== undefined ? this.selectedStaff1 : <any>null;
        data["selectedStaff2"] = this.selectedStaff2 !== undefined ? this.selectedStaff2 : <any>null;
        data["selectedStaff3"] = this.selectedStaff3 !== undefined ? this.selectedStaff3 : <any>null;
        data["selectedStaff4"] = this.selectedStaff4 !== undefined ? this.selectedStaff4 : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["transportDate"] = this.transportDate ? this.transportDate.toISOString() : <any>null;
        data["triageOptions"] = this.triageOptions !== undefined ? this.triageOptions : <any>null;
        data["triageType"] = this.triageType !== undefined ? this.triageType : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["unregistered"] = this.unregistered !== undefined ? this.unregistered : <any>null;
        data["urgent"] = this.urgent !== undefined ? this.urgent : <any>null;
        data["userArrived"] = this.userArrived !== undefined ? this.userArrived : <any>null;
        data["userClosed"] = this.userClosed !== undefined ? this.userClosed : <any>null;
        data["userConfirmed"] = this.userConfirmed !== undefined ? this.userConfirmed : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userInSession"] = this.userInSession !== undefined ? this.userInSession : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["userNoShowed"] = this.userNoShowed !== undefined ? this.userNoShowed : <any>null;
        data["userOutSession"] = this.userOutSession !== undefined ? this.userOutSession : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddBookingApiRequestParams extends IBaseRequestParams {
    admission_ID?: number | null;
    associate?: number | null;
    availableToExternal?: number | null;
    billingType?: number | null;
    billLocation_ID?: number | null;
    billTo?: number | null;
    booking_ID?: number | null;
    bookingPriority?: number | null;
    calculatedPatientDistance?: number | null;
    category?: number | null;
    cntBookingChange?: number | null;
    contactNumber?: string | null;
    ctimestamp?: string | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    dateTimeArrived?: Date | null;
    dateTimeClosed?: Date | null;
    dateTimeCompleted?: Date | null;
    dateTimeConfirmed?: Date | null;
    dateTimeEnd?: Date | null;
    dateTimeInSession?: Date | null;
    dateTimeNoShowed?: Date | null;
    dateTimeOutSession?: Date | null;
    dateTimePreviousBooking?: Date | null;
    dateTimeSeen?: Date | null;
    dateTimeStart?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionReason?: string | null;
    deletionUser?: string | null;
    drIDActual?: number | null;
    drIDBooked?: number | null;
    duration?: number | null;
    episode_ID?: number | null;
    firstname?: string | null;
    followUpDetails?: string | null;
    heldInvoiceno?: number | null;
    hospitalBillingClass?: string | null;
    inpatientBooking?: boolean | null;
    inpatientWard?: string | null;
    isFirstBooking?: boolean | null;
    lastInvoiceID?: number | null;
    link_ID?: number | null;
    location_ID?: number | null;
    note_ID?: number | null;
    patient_ID?: number | null;
    paymentClass?: number | null;
    paymentClassDateUpdated?: Date | null;
    paymentClassUserUpdated?: string | null;
    preventSMSReminder?: boolean | null;
    programAttachedTo?: number | null;
    provNum_ID?: number | null;
    publishToRepository?: boolean | null;
    quoteNo?: number | null;
    rcIdentifier1?: string | null;
    rcIdentifier2?: number | null;
    referral_ID?: number | null;
    requestEarlier?: boolean | null;
    resource_ID?: number | null;
    room_ID?: number | null;
    selectedDeletionReason?: number | null;
    selectedStaff1?: number | null;
    selectedStaff2?: number | null;
    selectedStaff3?: number | null;
    selectedStaff4?: number | null;
    status?: string | null;
    surname?: string | null;
    transport?: number | null;
    transportDate?: Date | null;
    triageOptions?: number | null;
    triageType?: string | null;
    type?: string | null;
    unregistered?: boolean | null;
    urgent?: boolean | null;
    userArrived?: string | null;
    userClosed?: string | null;
    userConfirmed?: string | null;
    userCreated?: string | null;
    userInSession?: string | null;
    userLastModified?: string | null;
    userNoShowed?: string | null;
    userOutSession?: string | null;
}

export class APIResponseOfString extends ProvideErrorMessage implements IAPIResponseOfString {
    data?: string | null;

    constructor(data?: IAPIResponseOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfString extends IProvideErrorMessage {
    data?: string | null;
}

export class FindHealthTrackBookingRequestParameters extends BaseRequestParams implements IFindHealthTrackBookingRequestParameters {
    feedID!: number;
    remoteBookingID?: string | null;

    constructor(data?: IFindHealthTrackBookingRequestParameters) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
            this.remoteBookingID = data["remoteBookingID"] !== undefined ? data["remoteBookingID"] : <any>null;
        }
    }

    static fromJS(data: any): FindHealthTrackBookingRequestParameters {
        data = typeof data === 'object' ? data : {};
        let result = new FindHealthTrackBookingRequestParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        data["remoteBookingID"] = this.remoteBookingID !== undefined ? this.remoteBookingID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindHealthTrackBookingRequestParameters extends IBaseRequestParams {
    feedID: number;
    remoteBookingID?: string | null;
}

export class APIResponseOfNullableOfInt32 extends ProvideErrorMessage implements IAPIResponseOfNullableOfInt32 {
    data?: number | null;

    constructor(data?: IAPIResponseOfNullableOfInt32) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfNullableOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfNullableOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfNullableOfInt32 extends IProvideErrorMessage {
    data?: number | null;
}

export class AddOrUpdateBookingMappingRequestParams extends BaseRequestParams implements IAddOrUpdateBookingMappingRequestParams {
    feed_ID!: number;
    remoteBooking_ID?: string | null;
    localBooking_ID?: number | null;
    owner?: boolean | null;
    dateCreated?: Date | null;
    dateModified?: Date | null;

    constructor(data?: IAddOrUpdateBookingMappingRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.remoteBooking_ID = data["remoteBooking_ID"] !== undefined ? data["remoteBooking_ID"] : <any>null;
            this.localBooking_ID = data["localBooking_ID"] !== undefined ? data["localBooking_ID"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateModified = data["dateModified"] ? new Date(data["dateModified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateBookingMappingRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateBookingMappingRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["remoteBooking_ID"] = this.remoteBooking_ID !== undefined ? this.remoteBooking_ID : <any>null;
        data["localBooking_ID"] = this.localBooking_ID !== undefined ? this.localBooking_ID : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateBookingMappingRequestParams extends IBaseRequestParams {
    feed_ID: number;
    remoteBooking_ID?: string | null;
    localBooking_ID?: number | null;
    owner?: boolean | null;
    dateCreated?: Date | null;
    dateModified?: Date | null;
}

export class GetBookingMappingParams extends BaseRequestParams implements IGetBookingMappingParams {
    feed_ID?: number | null;
    localBooking_ID?: number | null;
    remoteBooking_ID?: string | null;

    constructor(data?: IGetBookingMappingParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.localBooking_ID = data["localBooking_ID"] !== undefined ? data["localBooking_ID"] : <any>null;
            this.remoteBooking_ID = data["remoteBooking_ID"] !== undefined ? data["remoteBooking_ID"] : <any>null;
        }
    }

    static fromJS(data: any): GetBookingMappingParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingMappingParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["localBooking_ID"] = this.localBooking_ID !== undefined ? this.localBooking_ID : <any>null;
        data["remoteBooking_ID"] = this.remoteBooking_ID !== undefined ? this.remoteBooking_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetBookingMappingParams extends IBaseRequestParams {
    feed_ID?: number | null;
    localBooking_ID?: number | null;
    remoteBooking_ID?: string | null;
}

export class GetBookingMapping extends GetBookingMappingParams implements IGetBookingMapping {

    constructor(data?: IGetBookingMapping) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetBookingMapping {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetBookingMapping extends IGetBookingMappingParams {
}

export class APIResponseOfGetBookingMappingResult extends ProvideErrorMessage implements IAPIResponseOfGetBookingMappingResult {
    data?: GetBookingMappingResult | null;

    constructor(data?: IAPIResponseOfGetBookingMappingResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetBookingMappingResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetBookingMappingResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetBookingMappingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetBookingMappingResult extends IProvideErrorMessage {
    data?: IGetBookingMappingResult | null;
}

export class GetBookingMappingResult extends ProvideErrorMessage implements IGetBookingMappingResult {
    bookingMappings?: GetBookingMappingRow[] | null;

    constructor(data?: IGetBookingMappingResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["bookingMappings"] && data["bookingMappings"].constructor === Array) {
                this.bookingMappings = [];
                for (let item of data["bookingMappings"])
                    this.bookingMappings.push(GetBookingMappingRow.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingMappingResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingMappingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.bookingMappings && this.bookingMappings.constructor === Array) {
            data["bookingMappings"] = [];
            for (let item of this.bookingMappings)
                data["bookingMappings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetBookingMappingResult extends IProvideErrorMessage {
    bookingMappings?: IGetBookingMappingRow[] | null;
}

export class GetBookingMappingRow implements IGetBookingMappingRow {
    feed_ID!: number;
    remoteBooking_ID?: string | null;
    localBooking_ID!: number;
    owner!: boolean;
    dateCreated!: Date;
    dateModified!: Date;

    constructor(data?: IGetBookingMappingRow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.remoteBooking_ID = data["remoteBooking_ID"] !== undefined ? data["remoteBooking_ID"] : <any>null;
            this.localBooking_ID = data["localBooking_ID"] !== undefined ? data["localBooking_ID"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateModified = data["dateModified"] ? new Date(data["dateModified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetBookingMappingRow {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingMappingRow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["remoteBooking_ID"] = this.remoteBooking_ID !== undefined ? this.remoteBooking_ID : <any>null;
        data["localBooking_ID"] = this.localBooking_ID !== undefined ? this.localBooking_ID : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        return data; 
    }
}

export interface IGetBookingMappingRow {
    feed_ID: number;
    remoteBooking_ID?: string | null;
    localBooking_ID: number;
    owner: boolean;
    dateCreated: Date;
    dateModified: Date;
}

export class GetAllRequestableBookingTypesParams extends CorrelatableRequestParams implements IGetAllRequestableBookingTypesParams {
    departmentId!: number;

    constructor(data?: IGetAllRequestableBookingTypesParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.departmentId = data["departmentId"] !== undefined ? data["departmentId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllRequestableBookingTypesParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRequestableBookingTypesParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId !== undefined ? this.departmentId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllRequestableBookingTypesParams extends ICorrelatableRequestParams {
    departmentId: number;
}

export class GetAllRequestableBookingTypes extends GetAllRequestableBookingTypesParams implements IGetAllRequestableBookingTypes {

    constructor(data?: IGetAllRequestableBookingTypes) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetAllRequestableBookingTypes {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRequestableBookingTypes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllRequestableBookingTypes extends IGetAllRequestableBookingTypesParams {
}

export class APIResponseOfGetAllRequestableBookingTypesResult extends ProvideErrorMessage implements IAPIResponseOfGetAllRequestableBookingTypesResult {
    data?: GetAllRequestableBookingTypesResult | null;

    constructor(data?: IAPIResponseOfGetAllRequestableBookingTypesResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllRequestableBookingTypesResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllRequestableBookingTypesResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllRequestableBookingTypesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllRequestableBookingTypesResult extends IProvideErrorMessage {
    data?: IGetAllRequestableBookingTypesResult | null;
}

export class GetAllRequestableBookingTypesResult extends ProvideErrorMessage implements IGetAllRequestableBookingTypesResult {
    results?: RequestAbleBookingType[] | null;

    constructor(data?: IGetAllRequestableBookingTypesResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(RequestAbleBookingType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllRequestableBookingTypesResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRequestableBookingTypesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllRequestableBookingTypesResult extends IProvideErrorMessage {
    results?: IRequestAbleBookingType[] | null;
}

export class RequestAbleBookingType implements IRequestAbleBookingType {
    bookingType?: string | null;
    diaryName?: string | null;
    longName?: string | null;

    constructor(data?: IRequestAbleBookingType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
            this.diaryName = data["diaryName"] !== undefined ? data["diaryName"] : <any>null;
            this.longName = data["longName"] !== undefined ? data["longName"] : <any>null;
        }
    }

    static fromJS(data: any): RequestAbleBookingType {
        data = typeof data === 'object' ? data : {};
        let result = new RequestAbleBookingType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        data["diaryName"] = this.diaryName !== undefined ? this.diaryName : <any>null;
        data["longName"] = this.longName !== undefined ? this.longName : <any>null;
        return data; 
    }
}

export interface IRequestAbleBookingType {
    bookingType?: string | null;
    diaryName?: string | null;
    longName?: string | null;
}

export class APIResponseOfCardiacContainerDO extends ProvideErrorMessage implements IAPIResponseOfCardiacContainerDO {
    data?: CardiacContainerDO | null;

    constructor(data?: IAPIResponseOfCardiacContainerDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? CardiacContainerDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfCardiacContainerDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfCardiacContainerDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfCardiacContainerDO extends IProvideErrorMessage {
    data?: ICardiacContainerDO | null;
}

export class CardiacContainerDO implements ICardiacContainerDO {
    containerId?: number | null;
    patient_ID!: number;
    testDate?: DateTimeDO | null;
    dateCreated?: DateTimeDO | null;
    recordSubCategory!: number;
    generateResult?: CoronaryResultDO | null;
    cVersion!: number;
    normalisedResults?: NormalisedResult[] | null;
    locationId!: number;
    procedureEndDate?: DateTimeDO | null;
    procedure?: number | null;
    heartRate?: number | null;
    bloodPressureSystolic?: number | null;
    bloodPressureDiastolic?: number | null;
    height?: number | null;
    weight?: number | null;
    bmi?: number | null;
    bsa?: number | null;
    bsaFormula?: number | null;
    staffUsed?: StaffUsedDO[] | null;
    indications?: number[] | null;
    indicationsDetails?: string | null;
    riskFactors?: number[] | null;
    riskFactorsDetails?: string | null;
    grafts?: GraftDO[] | null;
    fullStructuredReport?: string | null;
    technicianNotes?: string | null;

    constructor(data?: ICardiacContainerDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.testDate = data.testDate && !(<any>data.testDate).toJSON ? new DateTimeDO(data.testDate) : <DateTimeDO>this.testDate; 
            this.dateCreated = data.dateCreated && !(<any>data.dateCreated).toJSON ? new DateTimeDO(data.dateCreated) : <DateTimeDO>this.dateCreated; 
            this.generateResult = data.generateResult && !(<any>data.generateResult).toJSON ? new CoronaryResultDO(data.generateResult) : <CoronaryResultDO>this.generateResult; 
            if (data.normalisedResults) {
                this.normalisedResults = [];
                for (let i = 0; i < data.normalisedResults.length; i++) {
                    let item = data.normalisedResults[i];
                    this.normalisedResults[i] = item && !(<any>item).toJSON ? new NormalisedResult(item) : <NormalisedResult>item;
                }
            }
            this.procedureEndDate = data.procedureEndDate && !(<any>data.procedureEndDate).toJSON ? new DateTimeDO(data.procedureEndDate) : <DateTimeDO>this.procedureEndDate; 
            if (data.staffUsed) {
                this.staffUsed = [];
                for (let i = 0; i < data.staffUsed.length; i++) {
                    let item = data.staffUsed[i];
                    this.staffUsed[i] = item && !(<any>item).toJSON ? new StaffUsedDO(item) : <StaffUsedDO>item;
                }
            }
            if (data.grafts) {
                this.grafts = [];
                for (let i = 0; i < data.grafts.length; i++) {
                    let item = data.grafts[i];
                    this.grafts[i] = item && !(<any>item).toJSON ? new GraftDO(item) : <GraftDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.testDate = data["testDate"] ? DateTimeDO.fromJS(data["testDate"]) : <any>null;
            this.dateCreated = data["dateCreated"] ? DateTimeDO.fromJS(data["dateCreated"]) : <any>null;
            this.recordSubCategory = data["recordSubCategory"] !== undefined ? data["recordSubCategory"] : <any>null;
            this.generateResult = data["generateResult"] ? CoronaryResultDO.fromJS(data["generateResult"]) : <any>null;
            this.cVersion = data["cVersion"] !== undefined ? data["cVersion"] : <any>null;
            if (data["normalisedResults"] && data["normalisedResults"].constructor === Array) {
                this.normalisedResults = [];
                for (let item of data["normalisedResults"])
                    this.normalisedResults.push(NormalisedResult.fromJS(item));
            }
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.procedureEndDate = data["procedureEndDate"] ? DateTimeDO.fromJS(data["procedureEndDate"]) : <any>null;
            this.procedure = data["procedure"] !== undefined ? data["procedure"] : <any>null;
            this.heartRate = data["heartRate"] !== undefined ? data["heartRate"] : <any>null;
            this.bloodPressureSystolic = data["bloodPressureSystolic"] !== undefined ? data["bloodPressureSystolic"] : <any>null;
            this.bloodPressureDiastolic = data["bloodPressureDiastolic"] !== undefined ? data["bloodPressureDiastolic"] : <any>null;
            this.height = data["height"] !== undefined ? data["height"] : <any>null;
            this.weight = data["weight"] !== undefined ? data["weight"] : <any>null;
            this.bmi = data["bmi"] !== undefined ? data["bmi"] : <any>null;
            this.bsa = data["bsa"] !== undefined ? data["bsa"] : <any>null;
            this.bsaFormula = data["bsaFormula"] !== undefined ? data["bsaFormula"] : <any>null;
            if (data["staffUsed"] && data["staffUsed"].constructor === Array) {
                this.staffUsed = [];
                for (let item of data["staffUsed"])
                    this.staffUsed.push(StaffUsedDO.fromJS(item));
            }
            if (data["indications"] && data["indications"].constructor === Array) {
                this.indications = [];
                for (let item of data["indications"])
                    this.indications.push(item);
            }
            this.indicationsDetails = data["indicationsDetails"] !== undefined ? data["indicationsDetails"] : <any>null;
            if (data["riskFactors"] && data["riskFactors"].constructor === Array) {
                this.riskFactors = [];
                for (let item of data["riskFactors"])
                    this.riskFactors.push(item);
            }
            this.riskFactorsDetails = data["riskFactorsDetails"] !== undefined ? data["riskFactorsDetails"] : <any>null;
            if (data["grafts"] && data["grafts"].constructor === Array) {
                this.grafts = [];
                for (let item of data["grafts"])
                    this.grafts.push(GraftDO.fromJS(item));
            }
            this.fullStructuredReport = data["fullStructuredReport"] !== undefined ? data["fullStructuredReport"] : <any>null;
            this.technicianNotes = data["technicianNotes"] !== undefined ? data["technicianNotes"] : <any>null;
        }
    }

    static fromJS(data: any): CardiacContainerDO {
        data = typeof data === 'object' ? data : {};
        let result = new CardiacContainerDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["testDate"] = this.testDate ? this.testDate.toJSON() : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toJSON() : <any>null;
        data["recordSubCategory"] = this.recordSubCategory !== undefined ? this.recordSubCategory : <any>null;
        data["generateResult"] = this.generateResult ? this.generateResult.toJSON() : <any>null;
        data["cVersion"] = this.cVersion !== undefined ? this.cVersion : <any>null;
        if (this.normalisedResults && this.normalisedResults.constructor === Array) {
            data["normalisedResults"] = [];
            for (let item of this.normalisedResults)
                data["normalisedResults"].push(item.toJSON());
        }
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["procedureEndDate"] = this.procedureEndDate ? this.procedureEndDate.toJSON() : <any>null;
        data["procedure"] = this.procedure !== undefined ? this.procedure : <any>null;
        data["heartRate"] = this.heartRate !== undefined ? this.heartRate : <any>null;
        data["bloodPressureSystolic"] = this.bloodPressureSystolic !== undefined ? this.bloodPressureSystolic : <any>null;
        data["bloodPressureDiastolic"] = this.bloodPressureDiastolic !== undefined ? this.bloodPressureDiastolic : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        data["bmi"] = this.bmi !== undefined ? this.bmi : <any>null;
        data["bsa"] = this.bsa !== undefined ? this.bsa : <any>null;
        data["bsaFormula"] = this.bsaFormula !== undefined ? this.bsaFormula : <any>null;
        if (this.staffUsed && this.staffUsed.constructor === Array) {
            data["staffUsed"] = [];
            for (let item of this.staffUsed)
                data["staffUsed"].push(item.toJSON());
        }
        if (this.indications && this.indications.constructor === Array) {
            data["indications"] = [];
            for (let item of this.indications)
                data["indications"].push(item);
        }
        data["indicationsDetails"] = this.indicationsDetails !== undefined ? this.indicationsDetails : <any>null;
        if (this.riskFactors && this.riskFactors.constructor === Array) {
            data["riskFactors"] = [];
            for (let item of this.riskFactors)
                data["riskFactors"].push(item);
        }
        data["riskFactorsDetails"] = this.riskFactorsDetails !== undefined ? this.riskFactorsDetails : <any>null;
        if (this.grafts && this.grafts.constructor === Array) {
            data["grafts"] = [];
            for (let item of this.grafts)
                data["grafts"].push(item.toJSON());
        }
        data["fullStructuredReport"] = this.fullStructuredReport !== undefined ? this.fullStructuredReport : <any>null;
        data["technicianNotes"] = this.technicianNotes !== undefined ? this.technicianNotes : <any>null;
        return data; 
    }
}

export interface ICardiacContainerDO {
    containerId?: number | null;
    patient_ID: number;
    testDate?: IDateTimeDO | null;
    dateCreated?: IDateTimeDO | null;
    recordSubCategory: number;
    generateResult?: ICoronaryResultDO | null;
    cVersion: number;
    normalisedResults?: INormalisedResult[] | null;
    locationId: number;
    procedureEndDate?: IDateTimeDO | null;
    procedure?: number | null;
    heartRate?: number | null;
    bloodPressureSystolic?: number | null;
    bloodPressureDiastolic?: number | null;
    height?: number | null;
    weight?: number | null;
    bmi?: number | null;
    bsa?: number | null;
    bsaFormula?: number | null;
    staffUsed?: IStaffUsedDO[] | null;
    indications?: number[] | null;
    indicationsDetails?: string | null;
    riskFactors?: number[] | null;
    riskFactorsDetails?: string | null;
    grafts?: IGraftDO[] | null;
    fullStructuredReport?: string | null;
    technicianNotes?: string | null;
}

export class CoronaryResultDO implements ICoronaryResultDO {
    radioResult!: number;
    extraDetails?: string | null;

    constructor(data?: ICoronaryResultDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.radioResult = data["radioResult"] !== undefined ? data["radioResult"] : <any>null;
            this.extraDetails = data["extraDetails"] !== undefined ? data["extraDetails"] : <any>null;
        }
    }

    static fromJS(data: any): CoronaryResultDO {
        data = typeof data === 'object' ? data : {};
        let result = new CoronaryResultDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["radioResult"] = this.radioResult !== undefined ? this.radioResult : <any>null;
        data["extraDetails"] = this.extraDetails !== undefined ? this.extraDetails : <any>null;
        return data; 
    }
}

export interface ICoronaryResultDO {
    radioResult: number;
    extraDetails?: string | null;
}

export class NormalisedResult implements INormalisedResult {
    resultId?: number | null;
    hmsReferenceId!: number;
    containerId!: number;
    isModified!: boolean;
    result?: any | null;
    resultType!: NormalisedResultsType;
    description?: string | null;
    displayValue?: string | null;
    units?: string | null;
    minValue?: number | null;
    maxValue?: number | null;

    constructor(data?: INormalisedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.resultId = data["resultId"] !== undefined ? data["resultId"] : <any>null;
            this.hmsReferenceId = data["hmsReferenceId"] !== undefined ? data["hmsReferenceId"] : <any>null;
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
            this.isModified = data["isModified"] !== undefined ? data["isModified"] : <any>null;
            this.result = data["result"] !== undefined ? data["result"] : <any>null;
            this.resultType = data["resultType"] !== undefined ? data["resultType"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.displayValue = data["displayValue"] !== undefined ? data["displayValue"] : <any>null;
            this.units = data["units"] !== undefined ? data["units"] : <any>null;
            this.minValue = data["minValue"] !== undefined ? data["minValue"] : <any>null;
            this.maxValue = data["maxValue"] !== undefined ? data["maxValue"] : <any>null;
        }
    }

    static fromJS(data: any): NormalisedResult {
        data = typeof data === 'object' ? data : {};
        let result = new NormalisedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultId"] = this.resultId !== undefined ? this.resultId : <any>null;
        data["hmsReferenceId"] = this.hmsReferenceId !== undefined ? this.hmsReferenceId : <any>null;
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        data["isModified"] = this.isModified !== undefined ? this.isModified : <any>null;
        data["result"] = this.result !== undefined ? this.result : <any>null;
        data["resultType"] = this.resultType !== undefined ? this.resultType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["displayValue"] = this.displayValue !== undefined ? this.displayValue : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["minValue"] = this.minValue !== undefined ? this.minValue : <any>null;
        data["maxValue"] = this.maxValue !== undefined ? this.maxValue : <any>null;
        return data; 
    }
}

export interface INormalisedResult {
    resultId?: number | null;
    hmsReferenceId: number;
    containerId: number;
    isModified: boolean;
    result?: any | null;
    resultType: NormalisedResultsType;
    description?: string | null;
    displayValue?: string | null;
    units?: string | null;
    minValue?: number | null;
    maxValue?: number | null;
}

export enum NormalisedResultsType {
    None = 0, 
    Text = 1, 
    Number = 2, 
}

export class StaffUsedDO implements IStaffUsedDO {
    staffUsedId?: number | null;
    staffId!: number;
    containerId!: number;
    cVersion!: number;
    staffRoleId!: number;
    roleText?: string | null;
    staffName?: string | null;

    constructor(data?: IStaffUsedDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.staffUsedId = data["staffUsedId"] !== undefined ? data["staffUsedId"] : <any>null;
            this.staffId = data["staffId"] !== undefined ? data["staffId"] : <any>null;
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
            this.cVersion = data["cVersion"] !== undefined ? data["cVersion"] : <any>null;
            this.staffRoleId = data["staffRoleId"] !== undefined ? data["staffRoleId"] : <any>null;
            this.roleText = data["roleText"] !== undefined ? data["roleText"] : <any>null;
            this.staffName = data["staffName"] !== undefined ? data["staffName"] : <any>null;
        }
    }

    static fromJS(data: any): StaffUsedDO {
        data = typeof data === 'object' ? data : {};
        let result = new StaffUsedDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffUsedId"] = this.staffUsedId !== undefined ? this.staffUsedId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        data["cVersion"] = this.cVersion !== undefined ? this.cVersion : <any>null;
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["roleText"] = this.roleText !== undefined ? this.roleText : <any>null;
        data["staffName"] = this.staffName !== undefined ? this.staffName : <any>null;
        return data; 
    }
}

export interface IStaffUsedDO {
    staffUsedId?: number | null;
    staffId: number;
    containerId: number;
    cVersion: number;
    staffRoleId: number;
    roleText?: string | null;
    staffName?: string | null;
}

export class GraftDO implements IGraftDO {
    graft_ID?: number | null;
    containerId?: number | null;
    cVersion!: number;
    type!: number;
    anastamosis?: number | null;
    severity?: number | null;
    location?: number | null;
    comments?: string | null;
    deleted!: boolean;

    constructor(data?: IGraftDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.graft_ID = data["graft_ID"] !== undefined ? data["graft_ID"] : <any>null;
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
            this.cVersion = data["cVersion"] !== undefined ? data["cVersion"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.anastamosis = data["anastamosis"] !== undefined ? data["anastamosis"] : <any>null;
            this.severity = data["severity"] !== undefined ? data["severity"] : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
            this.comments = data["comments"] !== undefined ? data["comments"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
        }
    }

    static fromJS(data: any): GraftDO {
        data = typeof data === 'object' ? data : {};
        let result = new GraftDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["graft_ID"] = this.graft_ID !== undefined ? this.graft_ID : <any>null;
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        data["cVersion"] = this.cVersion !== undefined ? this.cVersion : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["anastamosis"] = this.anastamosis !== undefined ? this.anastamosis : <any>null;
        data["severity"] = this.severity !== undefined ? this.severity : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        return data; 
    }
}

export interface IGraftDO {
    graft_ID?: number | null;
    containerId?: number | null;
    cVersion: number;
    type: number;
    anastamosis?: number | null;
    severity?: number | null;
    location?: number | null;
    comments?: string | null;
    deleted: boolean;
}

export class APIResponseOfFullStructuredReportDO extends ProvideErrorMessage implements IAPIResponseOfFullStructuredReportDO {
    data?: FullStructuredReportDO | null;

    constructor(data?: IAPIResponseOfFullStructuredReportDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FullStructuredReportDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFullStructuredReportDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFullStructuredReportDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFullStructuredReportDO extends IProvideErrorMessage {
    data?: IFullStructuredReportDO | null;
}

export class FullStructuredReportDO implements IFullStructuredReportDO {
    containerId!: number;
    cVersion!: number;
    fullStructuredReport?: string | null;

    constructor(data?: IFullStructuredReportDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
            this.cVersion = data["cVersion"] !== undefined ? data["cVersion"] : <any>null;
            this.fullStructuredReport = data["fullStructuredReport"] !== undefined ? data["fullStructuredReport"] : <any>null;
        }
    }

    static fromJS(data: any): FullStructuredReportDO {
        data = typeof data === 'object' ? data : {};
        let result = new FullStructuredReportDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        data["cVersion"] = this.cVersion !== undefined ? this.cVersion : <any>null;
        data["fullStructuredReport"] = this.fullStructuredReport !== undefined ? this.fullStructuredReport : <any>null;
        return data; 
    }
}

export interface IFullStructuredReportDO {
    containerId: number;
    cVersion: number;
    fullStructuredReport?: string | null;
}

export class APIResponseOfClinicalRecordDto extends ProvideErrorMessage implements IAPIResponseOfClinicalRecordDto {
    data?: ClinicalRecordDto | null;

    constructor(data?: IAPIResponseOfClinicalRecordDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? ClinicalRecordDto.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfClinicalRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfClinicalRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfClinicalRecordDto extends IProvideErrorMessage {
    data?: IClinicalRecordDto | null;
}

export class ClinicalRecordDto implements IClinicalRecordDto {
    patientDetails?: PatientDetailsDto | null;
    paymentClass?: string | null;
    externalPatientIds?: ExternalPatientIdentifier[] | null;
    clinicalRecordId!: number;

    constructor(data?: IClinicalRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patientDetails = data.patientDetails && !(<any>data.patientDetails).toJSON ? new PatientDetailsDto(data.patientDetails) : <PatientDetailsDto>this.patientDetails; 
            if (data.externalPatientIds) {
                this.externalPatientIds = [];
                for (let i = 0; i < data.externalPatientIds.length; i++) {
                    let item = data.externalPatientIds[i];
                    this.externalPatientIds[i] = item && !(<any>item).toJSON ? new ExternalPatientIdentifier(item) : <ExternalPatientIdentifier>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.patientDetails = data["patientDetails"] ? PatientDetailsDto.fromJS(data["patientDetails"]) : <any>null;
            this.paymentClass = data["paymentClass"] !== undefined ? data["paymentClass"] : <any>null;
            if (data["externalPatientIds"] && data["externalPatientIds"].constructor === Array) {
                this.externalPatientIds = [];
                for (let item of data["externalPatientIds"])
                    this.externalPatientIds.push(ExternalPatientIdentifier.fromJS(item));
            }
            this.clinicalRecordId = data["clinicalRecordId"] !== undefined ? data["clinicalRecordId"] : <any>null;
        }
    }

    static fromJS(data: any): ClinicalRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClinicalRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientDetails"] = this.patientDetails ? this.patientDetails.toJSON() : <any>null;
        data["paymentClass"] = this.paymentClass !== undefined ? this.paymentClass : <any>null;
        if (this.externalPatientIds && this.externalPatientIds.constructor === Array) {
            data["externalPatientIds"] = [];
            for (let item of this.externalPatientIds)
                data["externalPatientIds"].push(item.toJSON());
        }
        data["clinicalRecordId"] = this.clinicalRecordId !== undefined ? this.clinicalRecordId : <any>null;
        return data; 
    }
}

export interface IClinicalRecordDto {
    patientDetails?: IPatientDetailsDto | null;
    paymentClass?: string | null;
    externalPatientIds?: IExternalPatientIdentifier[] | null;
    clinicalRecordId: number;
}

export class PatientDetailsDto implements IPatientDetailsDto {
    surname?: string | null;
    firstName?: string | null;
    medicare?: string | null;
    dob?: Date | null;
    patientId?: string | null;
    title?: string | null;

    constructor(data?: IPatientDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
        }
    }

    static fromJS(data: any): PatientDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        return data; 
    }
}

export interface IPatientDetailsDto {
    surname?: string | null;
    firstName?: string | null;
    medicare?: string | null;
    dob?: Date | null;
    patientId?: string | null;
    title?: string | null;
}

export class ExternalPatientIdentifier implements IExternalPatientIdentifier {
    patientId!: number;
    externalIdentifier?: string | null;
    feedId!: number;
    feedName?: string | null;
    containerId!: number;

    constructor(data?: IExternalPatientIdentifier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.externalIdentifier = data["externalIdentifier"] !== undefined ? data["externalIdentifier"] : <any>null;
            this.feedId = data["feedId"] !== undefined ? data["feedId"] : <any>null;
            this.feedName = data["feedName"] !== undefined ? data["feedName"] : <any>null;
            this.containerId = data["containerId"] !== undefined ? data["containerId"] : <any>null;
        }
    }

    static fromJS(data: any): ExternalPatientIdentifier {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalPatientIdentifier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["externalIdentifier"] = this.externalIdentifier !== undefined ? this.externalIdentifier : <any>null;
        data["feedId"] = this.feedId !== undefined ? this.feedId : <any>null;
        data["feedName"] = this.feedName !== undefined ? this.feedName : <any>null;
        data["containerId"] = this.containerId !== undefined ? this.containerId : <any>null;
        return data; 
    }
}

export interface IExternalPatientIdentifier {
    patientId: number;
    externalIdentifier?: string | null;
    feedId: number;
    feedName?: string | null;
    containerId: number;
}

export class APIResponseOfSmartTextBundle extends ProvideErrorMessage implements IAPIResponseOfSmartTextBundle {
    data?: SmartTextBundle | null;

    constructor(data?: IAPIResponseOfSmartTextBundle) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? SmartTextBundle.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfSmartTextBundle {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfSmartTextBundle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfSmartTextBundle extends IProvideErrorMessage {
    data?: ISmartTextBundle | null;
}

export class SmartTextBundle implements ISmartTextBundle {
    smartTextPackage?: SmartTextPackage | null;
    templates?: SmartTextTemplate[] | null;
    styleProperties?: SmartTextStyleProperty[] | null;

    constructor(data?: ISmartTextBundle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.smartTextPackage = data.smartTextPackage && !(<any>data.smartTextPackage).toJSON ? new SmartTextPackage(data.smartTextPackage) : <SmartTextPackage>this.smartTextPackage; 
            if (data.templates) {
                this.templates = [];
                for (let i = 0; i < data.templates.length; i++) {
                    let item = data.templates[i];
                    this.templates[i] = item && !(<any>item).toJSON ? new SmartTextTemplate(item) : <SmartTextTemplate>item;
                }
            }
            if (data.styleProperties) {
                this.styleProperties = [];
                for (let i = 0; i < data.styleProperties.length; i++) {
                    let item = data.styleProperties[i];
                    this.styleProperties[i] = item && !(<any>item).toJSON ? new SmartTextStyleProperty(item) : <SmartTextStyleProperty>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.smartTextPackage = data["smartTextPackage"] ? SmartTextPackage.fromJS(data["smartTextPackage"]) : <any>null;
            if (data["templates"] && data["templates"].constructor === Array) {
                this.templates = [];
                for (let item of data["templates"])
                    this.templates.push(SmartTextTemplate.fromJS(item));
            }
            if (data["styleProperties"] && data["styleProperties"].constructor === Array) {
                this.styleProperties = [];
                for (let item of data["styleProperties"])
                    this.styleProperties.push(SmartTextStyleProperty.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SmartTextBundle {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextBundle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["smartTextPackage"] = this.smartTextPackage ? this.smartTextPackage.toJSON() : <any>null;
        if (this.templates && this.templates.constructor === Array) {
            data["templates"] = [];
            for (let item of this.templates)
                data["templates"].push(item.toJSON());
        }
        if (this.styleProperties && this.styleProperties.constructor === Array) {
            data["styleProperties"] = [];
            for (let item of this.styleProperties)
                data["styleProperties"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISmartTextBundle {
    smartTextPackage?: ISmartTextPackage | null;
    templates?: ISmartTextTemplate[] | null;
    styleProperties?: ISmartTextStyleProperty[] | null;
}

export class SmartTextPackage implements ISmartTextPackage {
    formDisplay?: string | null;
    recordSubCategory!: number;
    buttonNumber!: number;
    dateExported?: Date | null;
    fullTreeIncluded!: boolean;
    smartTextNodes?: SmartTextNode[] | null;

    constructor(data?: ISmartTextPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.smartTextNodes) {
                this.smartTextNodes = [];
                for (let i = 0; i < data.smartTextNodes.length; i++) {
                    let item = data.smartTextNodes[i];
                    this.smartTextNodes[i] = item && !(<any>item).toJSON ? new SmartTextNode(item) : <SmartTextNode>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.formDisplay = data["formDisplay"] !== undefined ? data["formDisplay"] : <any>null;
            this.recordSubCategory = data["recordSubCategory"] !== undefined ? data["recordSubCategory"] : <any>null;
            this.buttonNumber = data["buttonNumber"] !== undefined ? data["buttonNumber"] : <any>null;
            this.dateExported = data["dateExported"] ? new Date(data["dateExported"].toString()) : <any>null;
            this.fullTreeIncluded = data["fullTreeIncluded"] !== undefined ? data["fullTreeIncluded"] : <any>null;
            if (data["smartTextNodes"] && data["smartTextNodes"].constructor === Array) {
                this.smartTextNodes = [];
                for (let item of data["smartTextNodes"])
                    this.smartTextNodes.push(SmartTextNode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SmartTextPackage {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formDisplay"] = this.formDisplay !== undefined ? this.formDisplay : <any>null;
        data["recordSubCategory"] = this.recordSubCategory !== undefined ? this.recordSubCategory : <any>null;
        data["buttonNumber"] = this.buttonNumber !== undefined ? this.buttonNumber : <any>null;
        data["dateExported"] = this.dateExported ? this.dateExported.toISOString() : <any>null;
        data["fullTreeIncluded"] = this.fullTreeIncluded !== undefined ? this.fullTreeIncluded : <any>null;
        if (this.smartTextNodes && this.smartTextNodes.constructor === Array) {
            data["smartTextNodes"] = [];
            for (let item of this.smartTextNodes)
                data["smartTextNodes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISmartTextPackage {
    formDisplay?: string | null;
    recordSubCategory: number;
    buttonNumber: number;
    dateExported?: Date | null;
    fullTreeIncluded: boolean;
    smartTextNodes?: ISmartTextNode[] | null;
}

export class SmartTextNode implements ISmartTextNode {
    navID!: number;
    parentID!: number;
    nodeText?: string | null;
    nodeSegment!: SegmentType;
    nodeType!: SmartTextType;
    displayOrder!: number;
    fastTag?: string | null;
    codedData?: string | null;
    shortDescription?: string | null;
    styleID!: HeaderStyle;
    noNewLinesForHeaders!: boolean;
    restrictedToUsername?: string | null;
    trackingDisabled!: boolean;
    disablePunctuation!: boolean;
    synopsisOverride?: string | null;
    hasRTF!: boolean;

    constructor(data?: ISmartTextNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.navID = data["navID"] !== undefined ? data["navID"] : <any>null;
            this.parentID = data["parentID"] !== undefined ? data["parentID"] : <any>null;
            this.nodeText = data["nodeText"] !== undefined ? data["nodeText"] : <any>null;
            this.nodeSegment = data["nodeSegment"] !== undefined ? data["nodeSegment"] : <any>null;
            this.nodeType = data["nodeType"] !== undefined ? data["nodeType"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
            this.fastTag = data["fastTag"] !== undefined ? data["fastTag"] : <any>null;
            this.codedData = data["codedData"] !== undefined ? data["codedData"] : <any>null;
            this.shortDescription = data["shortDescription"] !== undefined ? data["shortDescription"] : <any>null;
            this.styleID = data["styleID"] !== undefined ? data["styleID"] : <any>null;
            this.noNewLinesForHeaders = data["noNewLinesForHeaders"] !== undefined ? data["noNewLinesForHeaders"] : <any>null;
            this.restrictedToUsername = data["restrictedToUsername"] !== undefined ? data["restrictedToUsername"] : <any>null;
            this.trackingDisabled = data["trackingDisabled"] !== undefined ? data["trackingDisabled"] : <any>null;
            this.disablePunctuation = data["disablePunctuation"] !== undefined ? data["disablePunctuation"] : <any>null;
            this.synopsisOverride = data["synopsisOverride"] !== undefined ? data["synopsisOverride"] : <any>null;
            this.hasRTF = data["hasRTF"] !== undefined ? data["hasRTF"] : <any>null;
        }
    }

    static fromJS(data: any): SmartTextNode {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["navID"] = this.navID !== undefined ? this.navID : <any>null;
        data["parentID"] = this.parentID !== undefined ? this.parentID : <any>null;
        data["nodeText"] = this.nodeText !== undefined ? this.nodeText : <any>null;
        data["nodeSegment"] = this.nodeSegment !== undefined ? this.nodeSegment : <any>null;
        data["nodeType"] = this.nodeType !== undefined ? this.nodeType : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        data["fastTag"] = this.fastTag !== undefined ? this.fastTag : <any>null;
        data["codedData"] = this.codedData !== undefined ? this.codedData : <any>null;
        data["shortDescription"] = this.shortDescription !== undefined ? this.shortDescription : <any>null;
        data["styleID"] = this.styleID !== undefined ? this.styleID : <any>null;
        data["noNewLinesForHeaders"] = this.noNewLinesForHeaders !== undefined ? this.noNewLinesForHeaders : <any>null;
        data["restrictedToUsername"] = this.restrictedToUsername !== undefined ? this.restrictedToUsername : <any>null;
        data["trackingDisabled"] = this.trackingDisabled !== undefined ? this.trackingDisabled : <any>null;
        data["disablePunctuation"] = this.disablePunctuation !== undefined ? this.disablePunctuation : <any>null;
        data["synopsisOverride"] = this.synopsisOverride !== undefined ? this.synopsisOverride : <any>null;
        data["hasRTF"] = this.hasRTF !== undefined ? this.hasRTF : <any>null;
        return data; 
    }
}

export interface ISmartTextNode {
    navID: number;
    parentID: number;
    nodeText?: string | null;
    nodeSegment: SegmentType;
    nodeType: SmartTextType;
    displayOrder: number;
    fastTag?: string | null;
    codedData?: string | null;
    shortDescription?: string | null;
    styleID: HeaderStyle;
    noNewLinesForHeaders: boolean;
    restrictedToUsername?: string | null;
    trackingDisabled: boolean;
    disablePunctuation: boolean;
    synopsisOverride?: string | null;
    hasRTF: boolean;
}

export enum SegmentType {
    Heading = 0, 
    Start = 1, 
    Middle = 2, 
    End = 3, 
    StartEnd = 4, 
}

export enum SmartTextType {
    Header = 1, 
    Group = 2, 
    SmartText = 3, 
}

export enum HeaderStyle {
    Normal = 0, 
    Header1 = 1, 
    Header2 = 2, 
    Header3 = 3, 
    Invisible = 99, 
    Highlight = -1, 
}

export class SmartTextTemplate implements ISmartTextTemplate {
    templateId!: number;
    templateName?: string | null;
    fullText?: string | null;
    formDisplay?: string | null;
    recordSubCategory!: number;
    doctorId?: number | null;
    displayOrder!: number;

    constructor(data?: ISmartTextTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : <any>null;
            this.templateName = data["templateName"] !== undefined ? data["templateName"] : <any>null;
            this.fullText = data["fullText"] !== undefined ? data["fullText"] : <any>null;
            this.formDisplay = data["formDisplay"] !== undefined ? data["formDisplay"] : <any>null;
            this.recordSubCategory = data["recordSubCategory"] !== undefined ? data["recordSubCategory"] : <any>null;
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
        }
    }

    static fromJS(data: any): SmartTextTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["templateName"] = this.templateName !== undefined ? this.templateName : <any>null;
        data["fullText"] = this.fullText !== undefined ? this.fullText : <any>null;
        data["formDisplay"] = this.formDisplay !== undefined ? this.formDisplay : <any>null;
        data["recordSubCategory"] = this.recordSubCategory !== undefined ? this.recordSubCategory : <any>null;
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        return data; 
    }
}

export interface ISmartTextTemplate {
    templateId: number;
    templateName?: string | null;
    fullText?: string | null;
    formDisplay?: string | null;
    recordSubCategory: number;
    doctorId?: number | null;
    displayOrder: number;
}

export class SmartTextStyleProperty implements ISmartTextStyleProperty {
    headerStyle!: HeaderStyle;
    fontSize!: number;
    fontBoldItalicsUnderline?: string | null;
    indent!: number;
    textAlignment?: string | null;

    constructor(data?: ISmartTextStyleProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.headerStyle = data["headerStyle"] !== undefined ? data["headerStyle"] : <any>null;
            this.fontSize = data["fontSize"] !== undefined ? data["fontSize"] : <any>null;
            this.fontBoldItalicsUnderline = data["fontBoldItalicsUnderline"] !== undefined ? data["fontBoldItalicsUnderline"] : <any>null;
            this.indent = data["indent"] !== undefined ? data["indent"] : <any>null;
            this.textAlignment = data["textAlignment"] !== undefined ? data["textAlignment"] : <any>null;
        }
    }

    static fromJS(data: any): SmartTextStyleProperty {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextStyleProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["headerStyle"] = this.headerStyle !== undefined ? this.headerStyle : <any>null;
        data["fontSize"] = this.fontSize !== undefined ? this.fontSize : <any>null;
        data["fontBoldItalicsUnderline"] = this.fontBoldItalicsUnderline !== undefined ? this.fontBoldItalicsUnderline : <any>null;
        data["indent"] = this.indent !== undefined ? this.indent : <any>null;
        data["textAlignment"] = this.textAlignment !== undefined ? this.textAlignment : <any>null;
        return data; 
    }
}

export interface ISmartTextStyleProperty {
    headerStyle: HeaderStyle;
    fontSize: number;
    fontBoldItalicsUnderline?: string | null;
    indent: number;
    textAlignment?: string | null;
}

export class APIResponseOfSmartTextTemplate extends ProvideErrorMessage implements IAPIResponseOfSmartTextTemplate {
    data?: SmartTextTemplate | null;

    constructor(data?: IAPIResponseOfSmartTextTemplate) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? SmartTextTemplate.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfSmartTextTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfSmartTextTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfSmartTextTemplate extends IProvideErrorMessage {
    data?: ISmartTextTemplate | null;
}

export class SmartTextTemplateDisplayOrder implements ISmartTextTemplateDisplayOrder {
    templateId!: number;
    displayOrder!: number;

    constructor(data?: ISmartTextTemplateDisplayOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
        }
    }

    static fromJS(data: any): SmartTextTemplateDisplayOrder {
        data = typeof data === 'object' ? data : {};
        let result = new SmartTextTemplateDisplayOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        return data; 
    }
}

export interface ISmartTextTemplateDisplayOrder {
    templateId: number;
    displayOrder: number;
}

export class APIResponseOfListOfSmartTextTemplateDisplayOrder extends ProvideErrorMessage implements IAPIResponseOfListOfSmartTextTemplateDisplayOrder {
    data?: SmartTextTemplateDisplayOrder[] | null;

    constructor(data?: IAPIResponseOfListOfSmartTextTemplateDisplayOrder) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(SmartTextTemplateDisplayOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfSmartTextTemplateDisplayOrder {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfSmartTextTemplateDisplayOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfSmartTextTemplateDisplayOrder extends IProvideErrorMessage {
    data?: ISmartTextTemplateDisplayOrder[] | null;
}

export class APIResponseOfListOfReferenceIDDO extends ProvideErrorMessage implements IAPIResponseOfListOfReferenceIDDO {
    data?: ReferenceIDDO[] | null;

    constructor(data?: IAPIResponseOfListOfReferenceIDDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ReferenceIDDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfReferenceIDDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfReferenceIDDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfReferenceIDDO extends IProvideErrorMessage {
    data?: IReferenceIDDO[] | null;
}

export class ReferenceIDDO implements IReferenceIDDO {
    referenceId!: number;
    description?: string | null;
    units?: string | null;
    minValue!: number;
    maxValue!: number;
    range?: string | null;

    constructor(data?: IReferenceIDDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referenceId = data["referenceId"] !== undefined ? data["referenceId"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.units = data["units"] !== undefined ? data["units"] : <any>null;
            this.minValue = data["minValue"] !== undefined ? data["minValue"] : <any>null;
            this.maxValue = data["maxValue"] !== undefined ? data["maxValue"] : <any>null;
            this.range = data["range"] !== undefined ? data["range"] : <any>null;
        }
    }

    static fromJS(data: any): ReferenceIDDO {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceIDDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["minValue"] = this.minValue !== undefined ? this.minValue : <any>null;
        data["maxValue"] = this.maxValue !== undefined ? this.maxValue : <any>null;
        data["range"] = this.range !== undefined ? this.range : <any>null;
        return data; 
    }
}

export interface IReferenceIDDO {
    referenceId: number;
    description?: string | null;
    units?: string | null;
    minValue: number;
    maxValue: number;
    range?: string | null;
}

export class APIResponseOfListOfHMSLetterTemplateTagValue extends ProvideErrorMessage implements IAPIResponseOfListOfHMSLetterTemplateTagValue {
    data?: HMSLetterTemplateTagValue[] | null;

    constructor(data?: IAPIResponseOfListOfHMSLetterTemplateTagValue) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(HMSLetterTemplateTagValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfHMSLetterTemplateTagValue {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfHMSLetterTemplateTagValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfHMSLetterTemplateTagValue extends IProvideErrorMessage {
    data?: IHMSLetterTemplateTagValue[] | null;
}

export class HMSLetterTemplateTagValue implements IHMSLetterTemplateTagValue {
    tag?: string | null;
    value?: string | null;

    constructor(data?: IHMSLetterTemplateTagValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tag = data["tag"] !== undefined ? data["tag"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
        }
    }

    static fromJS(data: any): HMSLetterTemplateTagValue {
        data = typeof data === 'object' ? data : {};
        let result = new HMSLetterTemplateTagValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag !== undefined ? this.tag : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IHMSLetterTemplateTagValue {
    tag?: string | null;
    value?: string | null;
}

export class APIResponseOfSingle extends ProvideErrorMessage implements IAPIResponseOfSingle {
    data!: number;

    constructor(data?: IAPIResponseOfSingle) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfSingle {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfSingle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfSingle extends IProvideErrorMessage {
    data: number;
}

export class APIResponseOfDouble extends ProvideErrorMessage implements IAPIResponseOfDouble {
    data!: number;

    constructor(data?: IAPIResponseOfDouble) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfDouble {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfDouble();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfDouble extends IProvideErrorMessage {
    data: number;
}

export class APIResponseOfIEnumerableOfRecordClassification extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfRecordClassification {
    data?: RecordClassification[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfRecordClassification) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RecordClassification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfRecordClassification {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfRecordClassification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfRecordClassification extends IProvideErrorMessage {
    data?: IRecordClassification[] | null;
}

export class RecordClassification implements IRecordClassification {
    subCategoryAdditionalDescription?: string | null;
    disableOccasionOfService!: boolean;
    finaliseGrp?: string | null;
    editLocked?: string | null;
    identity?: string | null;
    classId!: number;
    subCategoryDescription?: string | null;
    notForDistribution!: boolean;
    editAccessGroup?: string | null;
    billingGroup?: string | null;
    shouldBeBilled!: boolean;

    constructor(data?: IRecordClassification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subCategoryAdditionalDescription = data["subCategoryAdditionalDescription"] !== undefined ? data["subCategoryAdditionalDescription"] : <any>null;
            this.disableOccasionOfService = data["disableOccasionOfService"] !== undefined ? data["disableOccasionOfService"] : <any>null;
            this.finaliseGrp = data["finaliseGrp"] !== undefined ? data["finaliseGrp"] : <any>null;
            this.editLocked = data["editLocked"] !== undefined ? data["editLocked"] : <any>null;
            this.identity = data["identity"] !== undefined ? data["identity"] : <any>null;
            this.classId = data["classId"] !== undefined ? data["classId"] : <any>null;
            this.subCategoryDescription = data["subCategoryDescription"] !== undefined ? data["subCategoryDescription"] : <any>null;
            this.notForDistribution = data["notForDistribution"] !== undefined ? data["notForDistribution"] : <any>null;
            this.editAccessGroup = data["editAccessGroup"] !== undefined ? data["editAccessGroup"] : <any>null;
            this.billingGroup = data["billingGroup"] !== undefined ? data["billingGroup"] : <any>null;
            this.shouldBeBilled = data["shouldBeBilled"] !== undefined ? data["shouldBeBilled"] : <any>null;
        }
    }

    static fromJS(data: any): RecordClassification {
        data = typeof data === 'object' ? data : {};
        let result = new RecordClassification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subCategoryAdditionalDescription"] = this.subCategoryAdditionalDescription !== undefined ? this.subCategoryAdditionalDescription : <any>null;
        data["disableOccasionOfService"] = this.disableOccasionOfService !== undefined ? this.disableOccasionOfService : <any>null;
        data["finaliseGrp"] = this.finaliseGrp !== undefined ? this.finaliseGrp : <any>null;
        data["editLocked"] = this.editLocked !== undefined ? this.editLocked : <any>null;
        data["identity"] = this.identity !== undefined ? this.identity : <any>null;
        data["classId"] = this.classId !== undefined ? this.classId : <any>null;
        data["subCategoryDescription"] = this.subCategoryDescription !== undefined ? this.subCategoryDescription : <any>null;
        data["notForDistribution"] = this.notForDistribution !== undefined ? this.notForDistribution : <any>null;
        data["editAccessGroup"] = this.editAccessGroup !== undefined ? this.editAccessGroup : <any>null;
        data["billingGroup"] = this.billingGroup !== undefined ? this.billingGroup : <any>null;
        data["shouldBeBilled"] = this.shouldBeBilled !== undefined ? this.shouldBeBilled : <any>null;
        return data; 
    }
}

export interface IRecordClassification {
    subCategoryAdditionalDescription?: string | null;
    disableOccasionOfService: boolean;
    finaliseGrp?: string | null;
    editLocked?: string | null;
    identity?: string | null;
    classId: number;
    subCategoryDescription?: string | null;
    notForDistribution: boolean;
    editAccessGroup?: string | null;
    billingGroup?: string | null;
    shouldBeBilled: boolean;
}

export class APIResponseOfRecordClassificationOf extends ProvideErrorMessage implements IAPIResponseOfRecordClassificationOf {
    data?: RecordClassification[] | null;

    constructor(data?: IAPIResponseOfRecordClassificationOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RecordClassification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfRecordClassificationOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRecordClassificationOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRecordClassificationOf extends IProvideErrorMessage {
    data?: IRecordClassification[] | null;
}

export class APIResponseOfIEnumerableOfString extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfString {
    data?: string[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(item);
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfString {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfString extends IProvideErrorMessage {
    data?: string[] | null;
}

export class AddOrUpdateCodingSelectionParams extends BaseRequestParams implements IAddOrUpdateCodingSelectionParams {
    fieldName?: string | null;
    patient_ID!: number;
    feedID!: number;
    setWordsToFind?: string | null;
    setResultToFind?: string | null;

    constructor(data?: IAddOrUpdateCodingSelectionParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldName = data["fieldName"] !== undefined ? data["fieldName"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
            this.setWordsToFind = data["setWordsToFind"] !== undefined ? data["setWordsToFind"] : <any>null;
            this.setResultToFind = data["setResultToFind"] !== undefined ? data["setResultToFind"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateCodingSelectionParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateCodingSelectionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        data["setWordsToFind"] = this.setWordsToFind !== undefined ? this.setWordsToFind : <any>null;
        data["setResultToFind"] = this.setResultToFind !== undefined ? this.setResultToFind : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateCodingSelectionParams extends IBaseRequestParams {
    fieldName?: string | null;
    patient_ID: number;
    feedID: number;
    setWordsToFind?: string | null;
    setResultToFind?: string | null;
}

export class AddOrUpdateCodingSelection extends AddOrUpdateCodingSelectionParams implements IAddOrUpdateCodingSelection {

    constructor(data?: IAddOrUpdateCodingSelection) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateCodingSelection {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateCodingSelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateCodingSelection extends IAddOrUpdateCodingSelectionParams {
}

export class APIResponseOfAddOrUpdateCodingSelectionResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateCodingSelectionResult {
    data?: AddOrUpdateCodingSelectionResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateCodingSelectionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateCodingSelectionResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateCodingSelectionResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateCodingSelectionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateCodingSelectionResult extends IProvideErrorMessage {
    data?: IAddOrUpdateCodingSelectionResult | null;
}

export class AddOrUpdateCodingSelectionResult extends ProvideErrorMessage implements IAddOrUpdateCodingSelectionResult {
    ltS_ID!: number;

    constructor(data?: IAddOrUpdateCodingSelectionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.ltS_ID = data["ltS_ID"] !== undefined ? data["ltS_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateCodingSelectionResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateCodingSelectionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ltS_ID"] = this.ltS_ID !== undefined ? this.ltS_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateCodingSelectionResult extends IProvideErrorMessage {
    ltS_ID: number;
}

export class RemoveCodingSelectionParams extends BaseRequestParams implements IRemoveCodingSelectionParams {
    fieldName?: string | null;
    patient_ID!: number;
    feedID!: number;

    constructor(data?: IRemoveCodingSelectionParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.fieldName = data["fieldName"] !== undefined ? data["fieldName"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
        }
    }

    static fromJS(data: any): RemoveCodingSelectionParams {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCodingSelectionParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRemoveCodingSelectionParams extends IBaseRequestParams {
    fieldName?: string | null;
    patient_ID: number;
    feedID: number;
}

export class RemoveCodingSelection extends RemoveCodingSelectionParams implements IRemoveCodingSelection {

    constructor(data?: IRemoveCodingSelection) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): RemoveCodingSelection {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCodingSelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRemoveCodingSelection extends IRemoveCodingSelectionParams {
}

export class APIResponseOfRemoveCodingSelectionResult extends ProvideErrorMessage implements IAPIResponseOfRemoveCodingSelectionResult {
    data?: RemoveCodingSelectionResult | null;

    constructor(data?: IAPIResponseOfRemoveCodingSelectionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RemoveCodingSelectionResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRemoveCodingSelectionResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRemoveCodingSelectionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRemoveCodingSelectionResult extends IProvideErrorMessage {
    data?: IRemoveCodingSelectionResult | null;
}

export class RemoveCodingSelectionResult extends ProvideErrorMessage implements IRemoveCodingSelectionResult {
    success!: boolean;

    constructor(data?: IRemoveCodingSelectionResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
        }
    }

    static fromJS(data: any): RemoveCodingSelectionResult {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCodingSelectionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRemoveCodingSelectionResult extends IProvideErrorMessage {
    success: boolean;
}

export class APIResponseOfCompanyRequestParams extends ProvideErrorMessage implements IAPIResponseOfCompanyRequestParams {
    data?: CompanyRequestParams | null;

    constructor(data?: IAPIResponseOfCompanyRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? CompanyRequestParams.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfCompanyRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfCompanyRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfCompanyRequestParams extends IProvideErrorMessage {
    data?: ICompanyRequestParams | null;
}

export class CompanyRequestParams extends BaseRequestParams implements ICompanyRequestParams {
    company_ID!: number;
    companyName?: string | null;
    companyABN?: string | null;
    companyACN?: string | null;
    companyPhone?: string | null;
    companyFax?: string | null;
    note_ID?: number | null;
    deleted!: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    invoiceToUse?: string | null;
    billing_Practice!: boolean;
    billing_Scheduled!: boolean;
    billing_Medicare!: boolean;
    billing_HealthFund!: boolean;
    billing_Other!: boolean;
    feeTable_ID?: number | null;
    gapCover!: boolean;
    coversheetPrintSet?: string | null;
    chequeBSB?: string | null;
    healthFundType?: string | null;
    onlineFundCode?: string | null;
    hL7MappingID?: string | null;
    onlineRecordUpdated?: Date | null;
    onlineRegistered!: boolean;
    onlineActivated!: boolean;
    hmS_HealthfundReference?: number | null;
    feed_ID?: number | null;
    requires_PracticeID!: boolean;
    onlineContactPhone?: string | null;
    onlineChangeReport?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    extCompany_ID?: string | null;

    constructor(data?: ICompanyRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.companyABN = data["companyABN"] !== undefined ? data["companyABN"] : <any>null;
            this.companyACN = data["companyACN"] !== undefined ? data["companyACN"] : <any>null;
            this.companyPhone = data["companyPhone"] !== undefined ? data["companyPhone"] : <any>null;
            this.companyFax = data["companyFax"] !== undefined ? data["companyFax"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.invoiceToUse = data["invoiceToUse"] !== undefined ? data["invoiceToUse"] : <any>null;
            this.billing_Practice = data["billing_Practice"] !== undefined ? data["billing_Practice"] : <any>null;
            this.billing_Scheduled = data["billing_Scheduled"] !== undefined ? data["billing_Scheduled"] : <any>null;
            this.billing_Medicare = data["billing_Medicare"] !== undefined ? data["billing_Medicare"] : <any>null;
            this.billing_HealthFund = data["billing_HealthFund"] !== undefined ? data["billing_HealthFund"] : <any>null;
            this.billing_Other = data["billing_Other"] !== undefined ? data["billing_Other"] : <any>null;
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.gapCover = data["gapCover"] !== undefined ? data["gapCover"] : <any>null;
            this.coversheetPrintSet = data["coversheetPrintSet"] !== undefined ? data["coversheetPrintSet"] : <any>null;
            this.chequeBSB = data["chequeBSB"] !== undefined ? data["chequeBSB"] : <any>null;
            this.healthFundType = data["healthFundType"] !== undefined ? data["healthFundType"] : <any>null;
            this.onlineFundCode = data["onlineFundCode"] !== undefined ? data["onlineFundCode"] : <any>null;
            this.hL7MappingID = data["hL7MappingID"] !== undefined ? data["hL7MappingID"] : <any>null;
            this.onlineRecordUpdated = data["onlineRecordUpdated"] ? new Date(data["onlineRecordUpdated"].toString()) : <any>null;
            this.onlineRegistered = data["onlineRegistered"] !== undefined ? data["onlineRegistered"] : <any>null;
            this.onlineActivated = data["onlineActivated"] !== undefined ? data["onlineActivated"] : <any>null;
            this.hmS_HealthfundReference = data["hmS_HealthfundReference"] !== undefined ? data["hmS_HealthfundReference"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.requires_PracticeID = data["requires_PracticeID"] !== undefined ? data["requires_PracticeID"] : <any>null;
            this.onlineContactPhone = data["onlineContactPhone"] !== undefined ? data["onlineContactPhone"] : <any>null;
            this.onlineChangeReport = data["onlineChangeReport"] !== undefined ? data["onlineChangeReport"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.extCompany_ID = data["extCompany_ID"] !== undefined ? data["extCompany_ID"] : <any>null;
        }
    }

    static fromJS(data: any): CompanyRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["companyABN"] = this.companyABN !== undefined ? this.companyABN : <any>null;
        data["companyACN"] = this.companyACN !== undefined ? this.companyACN : <any>null;
        data["companyPhone"] = this.companyPhone !== undefined ? this.companyPhone : <any>null;
        data["companyFax"] = this.companyFax !== undefined ? this.companyFax : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["invoiceToUse"] = this.invoiceToUse !== undefined ? this.invoiceToUse : <any>null;
        data["billing_Practice"] = this.billing_Practice !== undefined ? this.billing_Practice : <any>null;
        data["billing_Scheduled"] = this.billing_Scheduled !== undefined ? this.billing_Scheduled : <any>null;
        data["billing_Medicare"] = this.billing_Medicare !== undefined ? this.billing_Medicare : <any>null;
        data["billing_HealthFund"] = this.billing_HealthFund !== undefined ? this.billing_HealthFund : <any>null;
        data["billing_Other"] = this.billing_Other !== undefined ? this.billing_Other : <any>null;
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["gapCover"] = this.gapCover !== undefined ? this.gapCover : <any>null;
        data["coversheetPrintSet"] = this.coversheetPrintSet !== undefined ? this.coversheetPrintSet : <any>null;
        data["chequeBSB"] = this.chequeBSB !== undefined ? this.chequeBSB : <any>null;
        data["healthFundType"] = this.healthFundType !== undefined ? this.healthFundType : <any>null;
        data["onlineFundCode"] = this.onlineFundCode !== undefined ? this.onlineFundCode : <any>null;
        data["hL7MappingID"] = this.hL7MappingID !== undefined ? this.hL7MappingID : <any>null;
        data["onlineRecordUpdated"] = this.onlineRecordUpdated ? this.onlineRecordUpdated.toISOString() : <any>null;
        data["onlineRegistered"] = this.onlineRegistered !== undefined ? this.onlineRegistered : <any>null;
        data["onlineActivated"] = this.onlineActivated !== undefined ? this.onlineActivated : <any>null;
        data["hmS_HealthfundReference"] = this.hmS_HealthfundReference !== undefined ? this.hmS_HealthfundReference : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["requires_PracticeID"] = this.requires_PracticeID !== undefined ? this.requires_PracticeID : <any>null;
        data["onlineContactPhone"] = this.onlineContactPhone !== undefined ? this.onlineContactPhone : <any>null;
        data["onlineChangeReport"] = this.onlineChangeReport !== undefined ? this.onlineChangeReport : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["extCompany_ID"] = this.extCompany_ID !== undefined ? this.extCompany_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICompanyRequestParams extends IBaseRequestParams {
    company_ID: number;
    companyName?: string | null;
    companyABN?: string | null;
    companyACN?: string | null;
    companyPhone?: string | null;
    companyFax?: string | null;
    note_ID?: number | null;
    deleted: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    invoiceToUse?: string | null;
    billing_Practice: boolean;
    billing_Scheduled: boolean;
    billing_Medicare: boolean;
    billing_HealthFund: boolean;
    billing_Other: boolean;
    feeTable_ID?: number | null;
    gapCover: boolean;
    coversheetPrintSet?: string | null;
    chequeBSB?: string | null;
    healthFundType?: string | null;
    onlineFundCode?: string | null;
    hL7MappingID?: string | null;
    onlineRecordUpdated?: Date | null;
    onlineRegistered: boolean;
    onlineActivated: boolean;
    hmS_HealthfundReference?: number | null;
    feed_ID?: number | null;
    requires_PracticeID: boolean;
    onlineContactPhone?: string | null;
    onlineChangeReport?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    extCompany_ID?: string | null;
}

export class APIResponseOfCompanyDOOf extends ProvideErrorMessage implements IAPIResponseOfCompanyDOOf {
    data?: CompanyDO[] | null;

    constructor(data?: IAPIResponseOfCompanyDOOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(CompanyDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfCompanyDOOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfCompanyDOOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfCompanyDOOf extends IProvideErrorMessage {
    data?: ICompanyDO[] | null;
}

export class CompanyDO implements ICompanyDO {
    company_ID!: number;
    companyName?: string | null;
    healthFundType?: string | null;

    constructor(data?: ICompanyDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.healthFundType = data["healthFundType"] !== undefined ? data["healthFundType"] : <any>null;
        }
    }

    static fromJS(data: any): CompanyDO {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["healthFundType"] = this.healthFundType !== undefined ? this.healthFundType : <any>null;
        return data; 
    }
}

export interface ICompanyDO {
    company_ID: number;
    companyName?: string | null;
    healthFundType?: string | null;
}

export class FindCompanyParams extends CorrelatableRequestParams implements IFindCompanyParams {
    companyNameToFind?: string | null;

    constructor(data?: IFindCompanyParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.companyNameToFind = data["companyNameToFind"] !== undefined ? data["companyNameToFind"] : <any>null;
        }
    }

    static fromJS(data: any): FindCompanyParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindCompanyParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyNameToFind"] = this.companyNameToFind !== undefined ? this.companyNameToFind : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindCompanyParams extends ICorrelatableRequestParams {
    companyNameToFind?: string | null;
}

export class FindCompany extends FindCompanyParams implements IFindCompany {

    constructor(data?: IFindCompany) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindCompany {
        data = typeof data === 'object' ? data : {};
        let result = new FindCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindCompany extends IFindCompanyParams {
}

export class APIResponseOfFindCompanyResult extends ProvideErrorMessage implements IAPIResponseOfFindCompanyResult {
    data?: FindCompanyResult | null;

    constructor(data?: IAPIResponseOfFindCompanyResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindCompanyResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindCompanyResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindCompanyResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindCompanyResult extends IProvideErrorMessage {
    data?: IFindCompanyResult | null;
}

export class FindCompanyResult extends ProvideErrorMessage implements IFindCompanyResult {
    billing_HealthFund!: boolean;
    billing_Medicare!: boolean;
    billing_Other!: boolean;
    billing_Practice!: boolean;
    billing_Scheduled!: boolean;
    chequeBSB?: string | null;
    claimingMethod?: string | null;
    company_ID!: number;
    companyABN?: string | null;
    companyACN?: string | null;
    companyFax?: string | null;
    companyName?: string | null;
    companyPhone?: string | null;
    coversheetPrintSet?: string | null;
    dateCreated!: Date;
    dateLastModified!: Date;
    deleted!: boolean;
    deletionDate!: Date;
    deletionNote!: number;
    deletionReason!: number;
    deletionUser?: string | null;
    extCompany_ID?: string | null;
    feed_ID!: number;
    feeTable_ID!: number;
    gapCover!: boolean;
    healthFundType?: string | null;
    hL7MappingID?: string | null;
    hmS_HealthfundReference!: number;
    invoiceToUse?: string | null;
    note_id!: number;
    onlineActivated!: boolean;
    onlineChangeReport?: string | null;
    onlineContactPhone?: string | null;
    onlineFundCode?: string | null;
    onlineRecordUpdated!: Date;
    onlineRegistered!: boolean;
    requires_PracticeID!: boolean;
    userCreated?: string | null;
    userLastModified?: string | null;

    constructor(data?: IFindCompanyResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.billing_HealthFund = data["billing_HealthFund"] !== undefined ? data["billing_HealthFund"] : <any>null;
            this.billing_Medicare = data["billing_Medicare"] !== undefined ? data["billing_Medicare"] : <any>null;
            this.billing_Other = data["billing_Other"] !== undefined ? data["billing_Other"] : <any>null;
            this.billing_Practice = data["billing_Practice"] !== undefined ? data["billing_Practice"] : <any>null;
            this.billing_Scheduled = data["billing_Scheduled"] !== undefined ? data["billing_Scheduled"] : <any>null;
            this.chequeBSB = data["chequeBSB"] !== undefined ? data["chequeBSB"] : <any>null;
            this.claimingMethod = data["claimingMethod"] !== undefined ? data["claimingMethod"] : <any>null;
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyABN = data["companyABN"] !== undefined ? data["companyABN"] : <any>null;
            this.companyACN = data["companyACN"] !== undefined ? data["companyACN"] : <any>null;
            this.companyFax = data["companyFax"] !== undefined ? data["companyFax"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.companyPhone = data["companyPhone"] !== undefined ? data["companyPhone"] : <any>null;
            this.coversheetPrintSet = data["coversheetPrintSet"] !== undefined ? data["coversheetPrintSet"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.extCompany_ID = data["extCompany_ID"] !== undefined ? data["extCompany_ID"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.gapCover = data["gapCover"] !== undefined ? data["gapCover"] : <any>null;
            this.healthFundType = data["healthFundType"] !== undefined ? data["healthFundType"] : <any>null;
            this.hL7MappingID = data["hL7MappingID"] !== undefined ? data["hL7MappingID"] : <any>null;
            this.hmS_HealthfundReference = data["hmS_HealthfundReference"] !== undefined ? data["hmS_HealthfundReference"] : <any>null;
            this.invoiceToUse = data["invoiceToUse"] !== undefined ? data["invoiceToUse"] : <any>null;
            this.note_id = data["note_id"] !== undefined ? data["note_id"] : <any>null;
            this.onlineActivated = data["onlineActivated"] !== undefined ? data["onlineActivated"] : <any>null;
            this.onlineChangeReport = data["onlineChangeReport"] !== undefined ? data["onlineChangeReport"] : <any>null;
            this.onlineContactPhone = data["onlineContactPhone"] !== undefined ? data["onlineContactPhone"] : <any>null;
            this.onlineFundCode = data["onlineFundCode"] !== undefined ? data["onlineFundCode"] : <any>null;
            this.onlineRecordUpdated = data["onlineRecordUpdated"] ? new Date(data["onlineRecordUpdated"].toString()) : <any>null;
            this.onlineRegistered = data["onlineRegistered"] !== undefined ? data["onlineRegistered"] : <any>null;
            this.requires_PracticeID = data["requires_PracticeID"] !== undefined ? data["requires_PracticeID"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
        }
    }

    static fromJS(data: any): FindCompanyResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindCompanyResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["billing_HealthFund"] = this.billing_HealthFund !== undefined ? this.billing_HealthFund : <any>null;
        data["billing_Medicare"] = this.billing_Medicare !== undefined ? this.billing_Medicare : <any>null;
        data["billing_Other"] = this.billing_Other !== undefined ? this.billing_Other : <any>null;
        data["billing_Practice"] = this.billing_Practice !== undefined ? this.billing_Practice : <any>null;
        data["billing_Scheduled"] = this.billing_Scheduled !== undefined ? this.billing_Scheduled : <any>null;
        data["chequeBSB"] = this.chequeBSB !== undefined ? this.chequeBSB : <any>null;
        data["claimingMethod"] = this.claimingMethod !== undefined ? this.claimingMethod : <any>null;
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyABN"] = this.companyABN !== undefined ? this.companyABN : <any>null;
        data["companyACN"] = this.companyACN !== undefined ? this.companyACN : <any>null;
        data["companyFax"] = this.companyFax !== undefined ? this.companyFax : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["companyPhone"] = this.companyPhone !== undefined ? this.companyPhone : <any>null;
        data["coversheetPrintSet"] = this.coversheetPrintSet !== undefined ? this.coversheetPrintSet : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["extCompany_ID"] = this.extCompany_ID !== undefined ? this.extCompany_ID : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["gapCover"] = this.gapCover !== undefined ? this.gapCover : <any>null;
        data["healthFundType"] = this.healthFundType !== undefined ? this.healthFundType : <any>null;
        data["hL7MappingID"] = this.hL7MappingID !== undefined ? this.hL7MappingID : <any>null;
        data["hmS_HealthfundReference"] = this.hmS_HealthfundReference !== undefined ? this.hmS_HealthfundReference : <any>null;
        data["invoiceToUse"] = this.invoiceToUse !== undefined ? this.invoiceToUse : <any>null;
        data["note_id"] = this.note_id !== undefined ? this.note_id : <any>null;
        data["onlineActivated"] = this.onlineActivated !== undefined ? this.onlineActivated : <any>null;
        data["onlineChangeReport"] = this.onlineChangeReport !== undefined ? this.onlineChangeReport : <any>null;
        data["onlineContactPhone"] = this.onlineContactPhone !== undefined ? this.onlineContactPhone : <any>null;
        data["onlineFundCode"] = this.onlineFundCode !== undefined ? this.onlineFundCode : <any>null;
        data["onlineRecordUpdated"] = this.onlineRecordUpdated ? this.onlineRecordUpdated.toISOString() : <any>null;
        data["onlineRegistered"] = this.onlineRegistered !== undefined ? this.onlineRegistered : <any>null;
        data["requires_PracticeID"] = this.requires_PracticeID !== undefined ? this.requires_PracticeID : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindCompanyResult extends IProvideErrorMessage {
    billing_HealthFund: boolean;
    billing_Medicare: boolean;
    billing_Other: boolean;
    billing_Practice: boolean;
    billing_Scheduled: boolean;
    chequeBSB?: string | null;
    claimingMethod?: string | null;
    company_ID: number;
    companyABN?: string | null;
    companyACN?: string | null;
    companyFax?: string | null;
    companyName?: string | null;
    companyPhone?: string | null;
    coversheetPrintSet?: string | null;
    dateCreated: Date;
    dateLastModified: Date;
    deleted: boolean;
    deletionDate: Date;
    deletionNote: number;
    deletionReason: number;
    deletionUser?: string | null;
    extCompany_ID?: string | null;
    feed_ID: number;
    feeTable_ID: number;
    gapCover: boolean;
    healthFundType?: string | null;
    hL7MappingID?: string | null;
    hmS_HealthfundReference: number;
    invoiceToUse?: string | null;
    note_id: number;
    onlineActivated: boolean;
    onlineChangeReport?: string | null;
    onlineContactPhone?: string | null;
    onlineFundCode?: string | null;
    onlineRecordUpdated: Date;
    onlineRegistered: boolean;
    requires_PracticeID: boolean;
    userCreated?: string | null;
    userLastModified?: string | null;
}

export class APIResponseOfListOfCompanyDO extends ProvideErrorMessage implements IAPIResponseOfListOfCompanyDO {
    data?: CompanyDO[] | null;

    constructor(data?: IAPIResponseOfListOfCompanyDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(CompanyDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfCompanyDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfCompanyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfCompanyDO extends IProvideErrorMessage {
    data?: ICompanyDO[] | null;
}

export class APIResponseOfIEnumerableOfContractFeeDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfContractFeeDO {
    data?: ContractFeeDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfContractFeeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ContractFeeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfContractFeeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfContractFeeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfContractFeeDO extends IProvideErrorMessage {
    data?: IContractFeeDO[] | null;
}

export class ContractFeeDO implements IContractFeeDO {
    contractDetailsId!: number;
    contractId!: number;
    category?: string | null;
    categoryDesc?: string | null;
    stayType?: string | null;
    itemNumber?: string | null;
    fundCode?: string | null;
    feeFull!: number;
    feeOne!: number;
    feeTwo!: number;
    feeThreePlus!: number;
    accomIncluded!: boolean;
    theatreIncluded!: boolean;
    billingGroup?: string | null;
    caseFee!: number;
    procFee!: number;

    constructor(data?: IContractFeeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractDetailsId = data["contractDetailsId"] !== undefined ? data["contractDetailsId"] : <any>null;
            this.contractId = data["contractId"] !== undefined ? data["contractId"] : <any>null;
            this.category = data["category"] !== undefined ? data["category"] : <any>null;
            this.categoryDesc = data["categoryDesc"] !== undefined ? data["categoryDesc"] : <any>null;
            this.stayType = data["stayType"] !== undefined ? data["stayType"] : <any>null;
            this.itemNumber = data["itemNumber"] !== undefined ? data["itemNumber"] : <any>null;
            this.fundCode = data["fundCode"] !== undefined ? data["fundCode"] : <any>null;
            this.feeFull = data["feeFull"] !== undefined ? data["feeFull"] : <any>null;
            this.feeOne = data["feeOne"] !== undefined ? data["feeOne"] : <any>null;
            this.feeTwo = data["feeTwo"] !== undefined ? data["feeTwo"] : <any>null;
            this.feeThreePlus = data["feeThreePlus"] !== undefined ? data["feeThreePlus"] : <any>null;
            this.accomIncluded = data["accomIncluded"] !== undefined ? data["accomIncluded"] : <any>null;
            this.theatreIncluded = data["theatreIncluded"] !== undefined ? data["theatreIncluded"] : <any>null;
            this.billingGroup = data["billingGroup"] !== undefined ? data["billingGroup"] : <any>null;
            this.caseFee = data["caseFee"] !== undefined ? data["caseFee"] : <any>null;
            this.procFee = data["procFee"] !== undefined ? data["procFee"] : <any>null;
        }
    }

    static fromJS(data: any): ContractFeeDO {
        data = typeof data === 'object' ? data : {};
        let result = new ContractFeeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contractDetailsId"] = this.contractDetailsId !== undefined ? this.contractDetailsId : <any>null;
        data["contractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["categoryDesc"] = this.categoryDesc !== undefined ? this.categoryDesc : <any>null;
        data["stayType"] = this.stayType !== undefined ? this.stayType : <any>null;
        data["itemNumber"] = this.itemNumber !== undefined ? this.itemNumber : <any>null;
        data["fundCode"] = this.fundCode !== undefined ? this.fundCode : <any>null;
        data["feeFull"] = this.feeFull !== undefined ? this.feeFull : <any>null;
        data["feeOne"] = this.feeOne !== undefined ? this.feeOne : <any>null;
        data["feeTwo"] = this.feeTwo !== undefined ? this.feeTwo : <any>null;
        data["feeThreePlus"] = this.feeThreePlus !== undefined ? this.feeThreePlus : <any>null;
        data["accomIncluded"] = this.accomIncluded !== undefined ? this.accomIncluded : <any>null;
        data["theatreIncluded"] = this.theatreIncluded !== undefined ? this.theatreIncluded : <any>null;
        data["billingGroup"] = this.billingGroup !== undefined ? this.billingGroup : <any>null;
        data["caseFee"] = this.caseFee !== undefined ? this.caseFee : <any>null;
        data["procFee"] = this.procFee !== undefined ? this.procFee : <any>null;
        return data; 
    }
}

export interface IContractFeeDO {
    contractDetailsId: number;
    contractId: number;
    category?: string | null;
    categoryDesc?: string | null;
    stayType?: string | null;
    itemNumber?: string | null;
    fundCode?: string | null;
    feeFull: number;
    feeOne: number;
    feeTwo: number;
    feeThreePlus: number;
    accomIncluded: boolean;
    theatreIncluded: boolean;
    billingGroup?: string | null;
    caseFee: number;
    procFee: number;
}

export class ContractsSearch implements IContractsSearch {
    validContractsOnly?: boolean | null;
    companyId?: number | null;

    constructor(data?: IContractsSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.validContractsOnly = data["validContractsOnly"] !== undefined ? data["validContractsOnly"] : <any>null;
            this.companyId = data["companyId"] !== undefined ? data["companyId"] : <any>null;
        }
    }

    static fromJS(data: any): ContractsSearch {
        data = typeof data === 'object' ? data : {};
        let result = new ContractsSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validContractsOnly"] = this.validContractsOnly !== undefined ? this.validContractsOnly : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        return data; 
    }
}

export interface IContractsSearch {
    validContractsOnly?: boolean | null;
    companyId?: number | null;
}

export class APIResponseOfIEnumerableOfContractDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfContractDO {
    data?: ContractDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfContractDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ContractDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfContractDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfContractDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfContractDO extends IProvideErrorMessage {
    data?: IContractDO[] | null;
}

export class ContractDO implements IContractDO {
    contractId!: number;
    companyId!: number;
    contractName?: string | null;
    validityStart?: Date | null;
    validityEnd?: Date | null;
    proc1!: number;
    proc2!: number;
    proc3!: number;
    proc4plus!: number;
    contractEffectiveFrom?: string | null;
    drgVersion?: string | null;
    includeMedicalServicesTB!: boolean;
    company?: CompanyDO | null;
    contractFees?: ContractFeeDO[] | null;

    constructor(data?: IContractDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.company = data.company && !(<any>data.company).toJSON ? new CompanyDO(data.company) : <CompanyDO>this.company; 
            if (data.contractFees) {
                this.contractFees = [];
                for (let i = 0; i < data.contractFees.length; i++) {
                    let item = data.contractFees[i];
                    this.contractFees[i] = item && !(<any>item).toJSON ? new ContractFeeDO(item) : <ContractFeeDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["contractId"] !== undefined ? data["contractId"] : <any>null;
            this.companyId = data["companyId"] !== undefined ? data["companyId"] : <any>null;
            this.contractName = data["contractName"] !== undefined ? data["contractName"] : <any>null;
            this.validityStart = data["validityStart"] ? new Date(data["validityStart"].toString()) : <any>null;
            this.validityEnd = data["validityEnd"] ? new Date(data["validityEnd"].toString()) : <any>null;
            this.proc1 = data["proc1"] !== undefined ? data["proc1"] : <any>null;
            this.proc2 = data["proc2"] !== undefined ? data["proc2"] : <any>null;
            this.proc3 = data["proc3"] !== undefined ? data["proc3"] : <any>null;
            this.proc4plus = data["proc4plus"] !== undefined ? data["proc4plus"] : <any>null;
            this.contractEffectiveFrom = data["contractEffectiveFrom"] !== undefined ? data["contractEffectiveFrom"] : <any>null;
            this.drgVersion = data["drgVersion"] !== undefined ? data["drgVersion"] : <any>null;
            this.includeMedicalServicesTB = data["includeMedicalServicesTB"] !== undefined ? data["includeMedicalServicesTB"] : <any>null;
            this.company = data["company"] ? CompanyDO.fromJS(data["company"]) : <any>null;
            if (data["contractFees"] && data["contractFees"].constructor === Array) {
                this.contractFees = [];
                for (let item of data["contractFees"])
                    this.contractFees.push(ContractFeeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContractDO {
        data = typeof data === 'object' ? data : {};
        let result = new ContractDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["contractName"] = this.contractName !== undefined ? this.contractName : <any>null;
        data["validityStart"] = this.validityStart ? this.validityStart.toISOString() : <any>null;
        data["validityEnd"] = this.validityEnd ? this.validityEnd.toISOString() : <any>null;
        data["proc1"] = this.proc1 !== undefined ? this.proc1 : <any>null;
        data["proc2"] = this.proc2 !== undefined ? this.proc2 : <any>null;
        data["proc3"] = this.proc3 !== undefined ? this.proc3 : <any>null;
        data["proc4plus"] = this.proc4plus !== undefined ? this.proc4plus : <any>null;
        data["contractEffectiveFrom"] = this.contractEffectiveFrom !== undefined ? this.contractEffectiveFrom : <any>null;
        data["drgVersion"] = this.drgVersion !== undefined ? this.drgVersion : <any>null;
        data["includeMedicalServicesTB"] = this.includeMedicalServicesTB !== undefined ? this.includeMedicalServicesTB : <any>null;
        data["company"] = this.company ? this.company.toJSON() : <any>null;
        if (this.contractFees && this.contractFees.constructor === Array) {
            data["contractFees"] = [];
            for (let item of this.contractFees)
                data["contractFees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IContractDO {
    contractId: number;
    companyId: number;
    contractName?: string | null;
    validityStart?: Date | null;
    validityEnd?: Date | null;
    proc1: number;
    proc2: number;
    proc3: number;
    proc4plus: number;
    contractEffectiveFrom?: string | null;
    drgVersion?: string | null;
    includeMedicalServicesTB: boolean;
    company?: ICompanyDO | null;
    contractFees?: IContractFeeDO[] | null;
}

export class APIResponseOfContractDO extends ProvideErrorMessage implements IAPIResponseOfContractDO {
    data?: ContractDO | null;

    constructor(data?: IAPIResponseOfContractDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? ContractDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfContractDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfContractDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfContractDO extends IProvideErrorMessage {
    data?: IContractDO | null;
}

export class APIResponseOfListOfDashboardDO extends ProvideErrorMessage implements IAPIResponseOfListOfDashboardDO {
    data?: DashboardDO[] | null;

    constructor(data?: IAPIResponseOfListOfDashboardDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(DashboardDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfDashboardDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfDashboardDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfDashboardDO extends IProvideErrorMessage {
    data?: IDashboardDO[] | null;
}

export class DashboardDO implements IDashboardDO {
    id!: number;
    dashboardName?: string | null;
    systemDefault!: boolean;
    numRows!: number;
    numColumns!: number;
    dashboardContents?: string[][] | null;
    widgetConfigurations?: WidgetConfiguration[] | null;
    roles?: RoleDO[] | null;
    numUsers!: number;

    constructor(data?: IDashboardDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.widgetConfigurations) {
                this.widgetConfigurations = [];
                for (let i = 0; i < data.widgetConfigurations.length; i++) {
                    let item = data.widgetConfigurations[i];
                    this.widgetConfigurations[i] = item && !(<any>item).toJSON ? new WidgetConfiguration(item) : <WidgetConfiguration>item;
                }
            }
            if (data.roles) {
                this.roles = [];
                for (let i = 0; i < data.roles.length; i++) {
                    let item = data.roles[i];
                    this.roles[i] = item && !(<any>item).toJSON ? new RoleDO(item) : <RoleDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.dashboardName = data["dashboardName"] !== undefined ? data["dashboardName"] : <any>null;
            this.systemDefault = data["systemDefault"] !== undefined ? data["systemDefault"] : <any>null;
            this.numRows = data["numRows"] !== undefined ? data["numRows"] : <any>null;
            this.numColumns = data["numColumns"] !== undefined ? data["numColumns"] : <any>null;
            if (data["dashboardContents"] && data["dashboardContents"].constructor === Array) {
                this.dashboardContents = [];
                for (let item of data["dashboardContents"])
                    this.dashboardContents.push(item);
            }
            if (data["widgetConfigurations"] && data["widgetConfigurations"].constructor === Array) {
                this.widgetConfigurations = [];
                for (let item of data["widgetConfigurations"])
                    this.widgetConfigurations.push(WidgetConfiguration.fromJS(item));
            }
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(RoleDO.fromJS(item));
            }
            this.numUsers = data["numUsers"] !== undefined ? data["numUsers"] : <any>null;
        }
    }

    static fromJS(data: any): DashboardDO {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dashboardName"] = this.dashboardName !== undefined ? this.dashboardName : <any>null;
        data["systemDefault"] = this.systemDefault !== undefined ? this.systemDefault : <any>null;
        data["numRows"] = this.numRows !== undefined ? this.numRows : <any>null;
        data["numColumns"] = this.numColumns !== undefined ? this.numColumns : <any>null;
        if (this.dashboardContents && this.dashboardContents.constructor === Array) {
            data["dashboardContents"] = [];
            for (let item of this.dashboardContents)
                data["dashboardContents"].push(item);
        }
        if (this.widgetConfigurations && this.widgetConfigurations.constructor === Array) {
            data["widgetConfigurations"] = [];
            for (let item of this.widgetConfigurations)
                data["widgetConfigurations"].push(item.toJSON());
        }
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["numUsers"] = this.numUsers !== undefined ? this.numUsers : <any>null;
        return data; 
    }
}

export interface IDashboardDO {
    id: number;
    dashboardName?: string | null;
    systemDefault: boolean;
    numRows: number;
    numColumns: number;
    dashboardContents?: string[][] | null;
    widgetConfigurations?: IWidgetConfiguration[] | null;
    roles?: IRoleDO[] | null;
    numUsers: number;
}

export class WidgetOptionDO implements IWidgetOptionDO {
    widget?: string | null;
    widgetParameters?: string[] | null;

    constructor(data?: IWidgetOptionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.widget = data["widget"] !== undefined ? data["widget"] : <any>null;
            if (data["widgetParameters"] && data["widgetParameters"].constructor === Array) {
                this.widgetParameters = [];
                for (let item of data["widgetParameters"])
                    this.widgetParameters.push(item);
            }
        }
    }

    static fromJS(data: any): WidgetOptionDO {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetOptionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["widget"] = this.widget !== undefined ? this.widget : <any>null;
        if (this.widgetParameters && this.widgetParameters.constructor === Array) {
            data["widgetParameters"] = [];
            for (let item of this.widgetParameters)
                data["widgetParameters"].push(item);
        }
        return data; 
    }
}

export interface IWidgetOptionDO {
    widget?: string | null;
    widgetParameters?: string[] | null;
}

export class WidgetConfiguration extends WidgetOptionDO implements IWidgetConfiguration {
    rabbitTopic?: string | null;

    constructor(data?: IWidgetConfiguration) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.rabbitTopic = data["rabbitTopic"] !== undefined ? data["rabbitTopic"] : <any>null;
        }
    }

    static fromJS(data: any): WidgetConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new WidgetConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rabbitTopic"] = this.rabbitTopic !== undefined ? this.rabbitTopic : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IWidgetConfiguration extends IWidgetOptionDO {
    rabbitTopic?: string | null;
}

export class RoleDO implements IRoleDO {
    roleId!: number;
    roleName?: string | null;
    dashboardId?: number | null;

    constructor(data?: IRoleDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : <any>null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : <any>null;
            this.dashboardId = data["dashboardId"] !== undefined ? data["dashboardId"] : <any>null;
        }
    }

    static fromJS(data: any): RoleDO {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["dashboardId"] = this.dashboardId !== undefined ? this.dashboardId : <any>null;
        return data; 
    }
}

export interface IRoleDO {
    roleId: number;
    roleName?: string | null;
    dashboardId?: number | null;
}

export class APIResponseOfDashboardDO extends ProvideErrorMessage implements IAPIResponseOfDashboardDO {
    data?: DashboardDO | null;

    constructor(data?: IAPIResponseOfDashboardDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? DashboardDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfDashboardDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfDashboardDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfDashboardDO extends IProvideErrorMessage {
    data?: IDashboardDO | null;
}

export class APIResponseOfGetDepartmentsResult extends ProvideErrorMessage implements IAPIResponseOfGetDepartmentsResult {
    data?: GetDepartmentsResult | null;

    constructor(data?: IAPIResponseOfGetDepartmentsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetDepartmentsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetDepartmentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetDepartmentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetDepartmentsResult extends IProvideErrorMessage {
    data?: IGetDepartmentsResult | null;
}

export class GetDepartmentsResult extends ProvideErrorMessage implements IGetDepartmentsResult {
    results?: DepartmentDataItem[] | null;

    constructor(data?: IGetDepartmentsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(DepartmentDataItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDepartmentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetDepartmentsResult extends IProvideErrorMessage {
    results?: IDepartmentDataItem[] | null;
}

export class DepartmentDataItem implements IDepartmentDataItem {
    depT_ID!: number;
    depT_Name?: string | null;
    depT_FeedID!: number;

    constructor(data?: IDepartmentDataItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.depT_ID = data["depT_ID"] !== undefined ? data["depT_ID"] : <any>null;
            this.depT_Name = data["depT_Name"] !== undefined ? data["depT_Name"] : <any>null;
            this.depT_FeedID = data["depT_FeedID"] !== undefined ? data["depT_FeedID"] : <any>null;
        }
    }

    static fromJS(data: any): DepartmentDataItem {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentDataItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depT_ID"] = this.depT_ID !== undefined ? this.depT_ID : <any>null;
        data["depT_Name"] = this.depT_Name !== undefined ? this.depT_Name : <any>null;
        data["depT_FeedID"] = this.depT_FeedID !== undefined ? this.depT_FeedID : <any>null;
        return data; 
    }
}

export interface IDepartmentDataItem {
    depT_ID: number;
    depT_Name?: string | null;
    depT_FeedID: number;
}

export class ImportFileRequest extends CorrelatableRequestParams implements IImportFileRequest {
    configurationName?: string | null;
    filename?: string | null;
    fileData?: string | null;

    constructor(data?: IImportFileRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.configurationName = data["configurationName"] !== undefined ? data["configurationName"] : <any>null;
            this.filename = data["filename"] !== undefined ? data["filename"] : <any>null;
            this.fileData = data["fileData"] !== undefined ? data["fileData"] : <any>null;
        }
    }

    static fromJS(data: any): ImportFileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ImportFileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configurationName"] = this.configurationName !== undefined ? this.configurationName : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["fileData"] = this.fileData !== undefined ? this.fileData : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IImportFileRequest extends ICorrelatableRequestParams {
    configurationName?: string | null;
    filename?: string | null;
    fileData?: string | null;
}

export class ImportFile extends ImportFileRequest implements IImportFile {

    constructor(data?: IImportFile) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): ImportFile {
        data = typeof data === 'object' ? data : {};
        let result = new ImportFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IImportFile extends IImportFileRequest {
}

export class APIResponseOfImportFileResponse extends ProvideErrorMessage implements IAPIResponseOfImportFileResponse {
    data?: ImportFileResponse | null;

    constructor(data?: IAPIResponseOfImportFileResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? ImportFileResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfImportFileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfImportFileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfImportFileResponse extends IProvideErrorMessage {
    data?: IImportFileResponse | null;
}

export class ImportFileResponse extends ProvideErrorMessage implements IImportFileResponse {
    success!: boolean;

    constructor(data?: IImportFileResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
        }
    }

    static fromJS(data: any): ImportFileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ImportFileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IImportFileResponse extends IProvideErrorMessage {
    success: boolean;
}

export class GetInternalDoctorIDFromProviderNumberParams extends CorrelatableRequestParams implements IGetInternalDoctorIDFromProviderNumberParams {
    providerNumber?: string | null;

    constructor(data?: IGetInternalDoctorIDFromProviderNumberParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.providerNumber = data["providerNumber"] !== undefined ? data["providerNumber"] : <any>null;
        }
    }

    static fromJS(data: any): GetInternalDoctorIDFromProviderNumberParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetInternalDoctorIDFromProviderNumberParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["providerNumber"] = this.providerNumber !== undefined ? this.providerNumber : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetInternalDoctorIDFromProviderNumberParams extends ICorrelatableRequestParams {
    providerNumber?: string | null;
}

export class GetInternalDoctorIDFromProviderNumberRequest extends GetInternalDoctorIDFromProviderNumberParams implements IGetInternalDoctorIDFromProviderNumberRequest {

    constructor(data?: IGetInternalDoctorIDFromProviderNumberRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetInternalDoctorIDFromProviderNumberRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetInternalDoctorIDFromProviderNumberRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetInternalDoctorIDFromProviderNumberRequest extends IGetInternalDoctorIDFromProviderNumberParams {
}

export class APIResponseOfGetInternalDoctorIDFromProviderNumberResult extends ProvideErrorMessage implements IAPIResponseOfGetInternalDoctorIDFromProviderNumberResult {
    data?: GetInternalDoctorIDFromProviderNumberResult | null;

    constructor(data?: IAPIResponseOfGetInternalDoctorIDFromProviderNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetInternalDoctorIDFromProviderNumberResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetInternalDoctorIDFromProviderNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetInternalDoctorIDFromProviderNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetInternalDoctorIDFromProviderNumberResult extends IProvideErrorMessage {
    data?: IGetInternalDoctorIDFromProviderNumberResult | null;
}

export class GetInternalDoctorIDFromProviderNumberResult extends ProvideErrorMessage implements IGetInternalDoctorIDFromProviderNumberResult {
    doctor_ID!: number;

    constructor(data?: IGetInternalDoctorIDFromProviderNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.doctor_ID = data["doctor_ID"] !== undefined ? data["doctor_ID"] : <any>null;
        }
    }

    static fromJS(data: any): GetInternalDoctorIDFromProviderNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetInternalDoctorIDFromProviderNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctor_ID"] = this.doctor_ID !== undefined ? this.doctor_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetInternalDoctorIDFromProviderNumberResult extends IProvideErrorMessage {
    doctor_ID: number;
}

export class APIResponseOfListOfDoctorDO extends ProvideErrorMessage implements IAPIResponseOfListOfDoctorDO {
    data?: DoctorDO[] | null;

    constructor(data?: IAPIResponseOfListOfDoctorDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(DoctorDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfDoctorDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfDoctorDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfDoctorDO extends IProvideErrorMessage {
    data?: IDoctorDO[] | null;
}

export class DoctorListItem implements IDoctorListItem {
    doctorId!: number;
    doctorName?: string | null;
    defaultLocation!: number;

    constructor(data?: IDoctorListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.doctorName = data["doctorName"] !== undefined ? data["doctorName"] : <any>null;
            this.defaultLocation = data["defaultLocation"] !== undefined ? data["defaultLocation"] : <any>null;
        }
    }

    static fromJS(data: any): DoctorListItem {
        data = typeof data === 'object' ? data : {};
        let result = new DoctorListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["doctorName"] = this.doctorName !== undefined ? this.doctorName : <any>null;
        data["defaultLocation"] = this.defaultLocation !== undefined ? this.defaultLocation : <any>null;
        return data; 
    }
}

export interface IDoctorListItem {
    doctorId: number;
    doctorName?: string | null;
    defaultLocation: number;
}

export class DoctorDO extends DoctorListItem implements IDoctorDO {
    displayColour?: string | null;
    rosterHours!: number;
    numSessions!: number;

    constructor(data?: IDoctorDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.displayColour = data["displayColour"] !== undefined ? data["displayColour"] : <any>null;
            this.rosterHours = data["rosterHours"] !== undefined ? data["rosterHours"] : <any>null;
            this.numSessions = data["numSessions"] !== undefined ? data["numSessions"] : <any>null;
        }
    }

    static fromJS(data: any): DoctorDO {
        data = typeof data === 'object' ? data : {};
        let result = new DoctorDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayColour"] = this.displayColour !== undefined ? this.displayColour : <any>null;
        data["rosterHours"] = this.rosterHours !== undefined ? this.rosterHours : <any>null;
        data["numSessions"] = this.numSessions !== undefined ? this.numSessions : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IDoctorDO extends IDoctorListItem {
    displayColour?: string | null;
    rosterHours: number;
    numSessions: number;
}

export class APIResponseOfListOfDoctorListItem extends ProvideErrorMessage implements IAPIResponseOfListOfDoctorListItem {
    data?: DoctorListItem[] | null;

    constructor(data?: IAPIResponseOfListOfDoctorListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(DoctorListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfDoctorListItem {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfDoctorListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfDoctorListItem extends IProvideErrorMessage {
    data?: IDoctorListItem[] | null;
}

export class FindDoctorParams extends CorrelatableRequestParams implements IFindDoctorParams {
    usernameToFind?: string | null;
    doctor_IDToFind!: number;

    constructor(data?: IFindDoctorParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.usernameToFind = data["usernameToFind"] !== undefined ? data["usernameToFind"] : <any>null;
            this.doctor_IDToFind = data["doctor_IDToFind"] !== undefined ? data["doctor_IDToFind"] : <any>null;
        }
    }

    static fromJS(data: any): FindDoctorParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindDoctorParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["usernameToFind"] = this.usernameToFind !== undefined ? this.usernameToFind : <any>null;
        data["doctor_IDToFind"] = this.doctor_IDToFind !== undefined ? this.doctor_IDToFind : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindDoctorParams extends ICorrelatableRequestParams {
    usernameToFind?: string | null;
    doctor_IDToFind: number;
}

export class FindDoctor extends FindDoctorParams implements IFindDoctor {

    constructor(data?: IFindDoctor) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new FindDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindDoctor extends IFindDoctorParams {
}

export class APIResponseOfFindDoctorResult extends ProvideErrorMessage implements IAPIResponseOfFindDoctorResult {
    data?: FindDoctorResult | null;

    constructor(data?: IAPIResponseOfFindDoctorResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindDoctorResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindDoctorResult extends IProvideErrorMessage {
    data?: IFindDoctorResult | null;
}

export class FindDoctorResult extends ProvideErrorMessage implements IFindDoctorResult {
    accountNumber?: string | null;
    assistantOnly!: boolean;
    authorisePrescriptionsFromOtherUsers!: boolean;
    bank?: string | null;
    bankAccName?: string | null;
    bankAccNo?: string | null;
    bankBSB?: string | null;
    bsb?: string | null;
    dateCreated!: Date;
    dateLastModified!: Date;
    defaultLocation!: number;
    deleted!: boolean;
    deletionDate!: Date;
    deletionNote!: number;
    deletionReason!: number;
    deletionUser?: string | null;
    diaryname?: string | null;
    doctor_ID!: number;
    doctorLogo?: string | null;
    drNoByFund!: boolean;
    drType!: number;
    email?: string | null;
    enablePatientArrivedAlert!: number;
    firstname?: string | null;
    homeFax?: string | null;
    homePhone?: string | null;
    indemnityCertificateNo?: string | null;
    indemnityCoverAmount!: number;
    indemnityDateFrom!: Date;
    indemnityDateTo!: Date;
    indemnityInsurer?: string | null;
    indemnityPolicyNo?: string | null;
    isVisible!: boolean;
    letterSignature_L1?: string | null;
    letterSignature_L2?: string | null;
    logoSelector?: string | null;
    mailingList!: number;
    mobile?: string | null;
    mobileBillingGUID?: string | null;
    noBillingDoctor!: boolean;
    note_id!: number;
    prescriberNo?: string | null;
    privCompany?: string | null;
    privCompanyABN?: string | null;
    privCompanyACN?: string | null;
    profAssoc?: string | null;
    profAssocClass?: string | null;
    profAssocNumber?: string | null;
    professionalQualifications?: string | null;
    professionalTitle?: string | null;
    referralCnt!: number;
    salutation?: string | null;
    sendDoctorAsLicensee!: boolean;
    serviceTypeCodeDVA?: string | null;
    serviceTypeCodeMedicare?: string | null;
    showCompanyNameType?: string | null;
    showDoctorABNAfterPrivateCompanyName!: boolean;
    showDoctorCredentialsOnHeaders!: boolean;
    showDoctorNameOnHeaders!: boolean;
    showLocationAddressOnHeaders!: boolean;
    specialty!: number;
    surname?: string | null;
    title?: string | null;
    usePrivateCompanyABN!: boolean;
    userCreated?: string | null;
    userLastModified?: string | null;
    username?: string | null;
    vocational!: boolean;
    workFax?: string | null;
    workPhone?: string | null;

    constructor(data?: IFindDoctorResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.accountNumber = data["accountNumber"] !== undefined ? data["accountNumber"] : <any>null;
            this.assistantOnly = data["assistantOnly"] !== undefined ? data["assistantOnly"] : <any>null;
            this.authorisePrescriptionsFromOtherUsers = data["authorisePrescriptionsFromOtherUsers"] !== undefined ? data["authorisePrescriptionsFromOtherUsers"] : <any>null;
            this.bank = data["bank"] !== undefined ? data["bank"] : <any>null;
            this.bankAccName = data["bankAccName"] !== undefined ? data["bankAccName"] : <any>null;
            this.bankAccNo = data["bankAccNo"] !== undefined ? data["bankAccNo"] : <any>null;
            this.bankBSB = data["bankBSB"] !== undefined ? data["bankBSB"] : <any>null;
            this.bsb = data["bsb"] !== undefined ? data["bsb"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.defaultLocation = data["defaultLocation"] !== undefined ? data["defaultLocation"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.diaryname = data["diaryname"] !== undefined ? data["diaryname"] : <any>null;
            this.doctor_ID = data["doctor_ID"] !== undefined ? data["doctor_ID"] : <any>null;
            this.doctorLogo = data["doctorLogo"] !== undefined ? data["doctorLogo"] : <any>null;
            this.drNoByFund = data["drNoByFund"] !== undefined ? data["drNoByFund"] : <any>null;
            this.drType = data["drType"] !== undefined ? data["drType"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.enablePatientArrivedAlert = data["enablePatientArrivedAlert"] !== undefined ? data["enablePatientArrivedAlert"] : <any>null;
            this.firstname = data["firstname"] !== undefined ? data["firstname"] : <any>null;
            this.homeFax = data["homeFax"] !== undefined ? data["homeFax"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.indemnityCertificateNo = data["indemnityCertificateNo"] !== undefined ? data["indemnityCertificateNo"] : <any>null;
            this.indemnityCoverAmount = data["indemnityCoverAmount"] !== undefined ? data["indemnityCoverAmount"] : <any>null;
            this.indemnityDateFrom = data["indemnityDateFrom"] ? new Date(data["indemnityDateFrom"].toString()) : <any>null;
            this.indemnityDateTo = data["indemnityDateTo"] ? new Date(data["indemnityDateTo"].toString()) : <any>null;
            this.indemnityInsurer = data["indemnityInsurer"] !== undefined ? data["indemnityInsurer"] : <any>null;
            this.indemnityPolicyNo = data["indemnityPolicyNo"] !== undefined ? data["indemnityPolicyNo"] : <any>null;
            this.isVisible = data["isVisible"] !== undefined ? data["isVisible"] : <any>null;
            this.letterSignature_L1 = data["letterSignature_L1"] !== undefined ? data["letterSignature_L1"] : <any>null;
            this.letterSignature_L2 = data["letterSignature_L2"] !== undefined ? data["letterSignature_L2"] : <any>null;
            this.logoSelector = data["logoSelector"] !== undefined ? data["logoSelector"] : <any>null;
            this.mailingList = data["mailingList"] !== undefined ? data["mailingList"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.mobileBillingGUID = data["mobileBillingGUID"] !== undefined ? data["mobileBillingGUID"] : <any>null;
            this.noBillingDoctor = data["noBillingDoctor"] !== undefined ? data["noBillingDoctor"] : <any>null;
            this.note_id = data["note_id"] !== undefined ? data["note_id"] : <any>null;
            this.prescriberNo = data["prescriberNo"] !== undefined ? data["prescriberNo"] : <any>null;
            this.privCompany = data["privCompany"] !== undefined ? data["privCompany"] : <any>null;
            this.privCompanyABN = data["privCompanyABN"] !== undefined ? data["privCompanyABN"] : <any>null;
            this.privCompanyACN = data["privCompanyACN"] !== undefined ? data["privCompanyACN"] : <any>null;
            this.profAssoc = data["profAssoc"] !== undefined ? data["profAssoc"] : <any>null;
            this.profAssocClass = data["profAssocClass"] !== undefined ? data["profAssocClass"] : <any>null;
            this.profAssocNumber = data["profAssocNumber"] !== undefined ? data["profAssocNumber"] : <any>null;
            this.professionalQualifications = data["professionalQualifications"] !== undefined ? data["professionalQualifications"] : <any>null;
            this.professionalTitle = data["professionalTitle"] !== undefined ? data["professionalTitle"] : <any>null;
            this.referralCnt = data["referralCnt"] !== undefined ? data["referralCnt"] : <any>null;
            this.salutation = data["salutation"] !== undefined ? data["salutation"] : <any>null;
            this.sendDoctorAsLicensee = data["sendDoctorAsLicensee"] !== undefined ? data["sendDoctorAsLicensee"] : <any>null;
            this.serviceTypeCodeDVA = data["serviceTypeCodeDVA"] !== undefined ? data["serviceTypeCodeDVA"] : <any>null;
            this.serviceTypeCodeMedicare = data["serviceTypeCodeMedicare"] !== undefined ? data["serviceTypeCodeMedicare"] : <any>null;
            this.showCompanyNameType = data["showCompanyNameType"] !== undefined ? data["showCompanyNameType"] : <any>null;
            this.showDoctorABNAfterPrivateCompanyName = data["showDoctorABNAfterPrivateCompanyName"] !== undefined ? data["showDoctorABNAfterPrivateCompanyName"] : <any>null;
            this.showDoctorCredentialsOnHeaders = data["showDoctorCredentialsOnHeaders"] !== undefined ? data["showDoctorCredentialsOnHeaders"] : <any>null;
            this.showDoctorNameOnHeaders = data["showDoctorNameOnHeaders"] !== undefined ? data["showDoctorNameOnHeaders"] : <any>null;
            this.showLocationAddressOnHeaders = data["showLocationAddressOnHeaders"] !== undefined ? data["showLocationAddressOnHeaders"] : <any>null;
            this.specialty = data["specialty"] !== undefined ? data["specialty"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.usePrivateCompanyABN = data["usePrivateCompanyABN"] !== undefined ? data["usePrivateCompanyABN"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.vocational = data["vocational"] !== undefined ? data["vocational"] : <any>null;
            this.workFax = data["workFax"] !== undefined ? data["workFax"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
        }
    }

    static fromJS(data: any): FindDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountNumber"] = this.accountNumber !== undefined ? this.accountNumber : <any>null;
        data["assistantOnly"] = this.assistantOnly !== undefined ? this.assistantOnly : <any>null;
        data["authorisePrescriptionsFromOtherUsers"] = this.authorisePrescriptionsFromOtherUsers !== undefined ? this.authorisePrescriptionsFromOtherUsers : <any>null;
        data["bank"] = this.bank !== undefined ? this.bank : <any>null;
        data["bankAccName"] = this.bankAccName !== undefined ? this.bankAccName : <any>null;
        data["bankAccNo"] = this.bankAccNo !== undefined ? this.bankAccNo : <any>null;
        data["bankBSB"] = this.bankBSB !== undefined ? this.bankBSB : <any>null;
        data["bsb"] = this.bsb !== undefined ? this.bsb : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["defaultLocation"] = this.defaultLocation !== undefined ? this.defaultLocation : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["diaryname"] = this.diaryname !== undefined ? this.diaryname : <any>null;
        data["doctor_ID"] = this.doctor_ID !== undefined ? this.doctor_ID : <any>null;
        data["doctorLogo"] = this.doctorLogo !== undefined ? this.doctorLogo : <any>null;
        data["drNoByFund"] = this.drNoByFund !== undefined ? this.drNoByFund : <any>null;
        data["drType"] = this.drType !== undefined ? this.drType : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["enablePatientArrivedAlert"] = this.enablePatientArrivedAlert !== undefined ? this.enablePatientArrivedAlert : <any>null;
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["homeFax"] = this.homeFax !== undefined ? this.homeFax : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["indemnityCertificateNo"] = this.indemnityCertificateNo !== undefined ? this.indemnityCertificateNo : <any>null;
        data["indemnityCoverAmount"] = this.indemnityCoverAmount !== undefined ? this.indemnityCoverAmount : <any>null;
        data["indemnityDateFrom"] = this.indemnityDateFrom ? this.indemnityDateFrom.toISOString() : <any>null;
        data["indemnityDateTo"] = this.indemnityDateTo ? this.indemnityDateTo.toISOString() : <any>null;
        data["indemnityInsurer"] = this.indemnityInsurer !== undefined ? this.indemnityInsurer : <any>null;
        data["indemnityPolicyNo"] = this.indemnityPolicyNo !== undefined ? this.indemnityPolicyNo : <any>null;
        data["isVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["letterSignature_L1"] = this.letterSignature_L1 !== undefined ? this.letterSignature_L1 : <any>null;
        data["letterSignature_L2"] = this.letterSignature_L2 !== undefined ? this.letterSignature_L2 : <any>null;
        data["logoSelector"] = this.logoSelector !== undefined ? this.logoSelector : <any>null;
        data["mailingList"] = this.mailingList !== undefined ? this.mailingList : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["mobileBillingGUID"] = this.mobileBillingGUID !== undefined ? this.mobileBillingGUID : <any>null;
        data["noBillingDoctor"] = this.noBillingDoctor !== undefined ? this.noBillingDoctor : <any>null;
        data["note_id"] = this.note_id !== undefined ? this.note_id : <any>null;
        data["prescriberNo"] = this.prescriberNo !== undefined ? this.prescriberNo : <any>null;
        data["privCompany"] = this.privCompany !== undefined ? this.privCompany : <any>null;
        data["privCompanyABN"] = this.privCompanyABN !== undefined ? this.privCompanyABN : <any>null;
        data["privCompanyACN"] = this.privCompanyACN !== undefined ? this.privCompanyACN : <any>null;
        data["profAssoc"] = this.profAssoc !== undefined ? this.profAssoc : <any>null;
        data["profAssocClass"] = this.profAssocClass !== undefined ? this.profAssocClass : <any>null;
        data["profAssocNumber"] = this.profAssocNumber !== undefined ? this.profAssocNumber : <any>null;
        data["professionalQualifications"] = this.professionalQualifications !== undefined ? this.professionalQualifications : <any>null;
        data["professionalTitle"] = this.professionalTitle !== undefined ? this.professionalTitle : <any>null;
        data["referralCnt"] = this.referralCnt !== undefined ? this.referralCnt : <any>null;
        data["salutation"] = this.salutation !== undefined ? this.salutation : <any>null;
        data["sendDoctorAsLicensee"] = this.sendDoctorAsLicensee !== undefined ? this.sendDoctorAsLicensee : <any>null;
        data["serviceTypeCodeDVA"] = this.serviceTypeCodeDVA !== undefined ? this.serviceTypeCodeDVA : <any>null;
        data["serviceTypeCodeMedicare"] = this.serviceTypeCodeMedicare !== undefined ? this.serviceTypeCodeMedicare : <any>null;
        data["showCompanyNameType"] = this.showCompanyNameType !== undefined ? this.showCompanyNameType : <any>null;
        data["showDoctorABNAfterPrivateCompanyName"] = this.showDoctorABNAfterPrivateCompanyName !== undefined ? this.showDoctorABNAfterPrivateCompanyName : <any>null;
        data["showDoctorCredentialsOnHeaders"] = this.showDoctorCredentialsOnHeaders !== undefined ? this.showDoctorCredentialsOnHeaders : <any>null;
        data["showDoctorNameOnHeaders"] = this.showDoctorNameOnHeaders !== undefined ? this.showDoctorNameOnHeaders : <any>null;
        data["showLocationAddressOnHeaders"] = this.showLocationAddressOnHeaders !== undefined ? this.showLocationAddressOnHeaders : <any>null;
        data["specialty"] = this.specialty !== undefined ? this.specialty : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["usePrivateCompanyABN"] = this.usePrivateCompanyABN !== undefined ? this.usePrivateCompanyABN : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["vocational"] = this.vocational !== undefined ? this.vocational : <any>null;
        data["workFax"] = this.workFax !== undefined ? this.workFax : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindDoctorResult extends IProvideErrorMessage {
    accountNumber?: string | null;
    assistantOnly: boolean;
    authorisePrescriptionsFromOtherUsers: boolean;
    bank?: string | null;
    bankAccName?: string | null;
    bankAccNo?: string | null;
    bankBSB?: string | null;
    bsb?: string | null;
    dateCreated: Date;
    dateLastModified: Date;
    defaultLocation: number;
    deleted: boolean;
    deletionDate: Date;
    deletionNote: number;
    deletionReason: number;
    deletionUser?: string | null;
    diaryname?: string | null;
    doctor_ID: number;
    doctorLogo?: string | null;
    drNoByFund: boolean;
    drType: number;
    email?: string | null;
    enablePatientArrivedAlert: number;
    firstname?: string | null;
    homeFax?: string | null;
    homePhone?: string | null;
    indemnityCertificateNo?: string | null;
    indemnityCoverAmount: number;
    indemnityDateFrom: Date;
    indemnityDateTo: Date;
    indemnityInsurer?: string | null;
    indemnityPolicyNo?: string | null;
    isVisible: boolean;
    letterSignature_L1?: string | null;
    letterSignature_L2?: string | null;
    logoSelector?: string | null;
    mailingList: number;
    mobile?: string | null;
    mobileBillingGUID?: string | null;
    noBillingDoctor: boolean;
    note_id: number;
    prescriberNo?: string | null;
    privCompany?: string | null;
    privCompanyABN?: string | null;
    privCompanyACN?: string | null;
    profAssoc?: string | null;
    profAssocClass?: string | null;
    profAssocNumber?: string | null;
    professionalQualifications?: string | null;
    professionalTitle?: string | null;
    referralCnt: number;
    salutation?: string | null;
    sendDoctorAsLicensee: boolean;
    serviceTypeCodeDVA?: string | null;
    serviceTypeCodeMedicare?: string | null;
    showCompanyNameType?: string | null;
    showDoctorABNAfterPrivateCompanyName: boolean;
    showDoctorCredentialsOnHeaders: boolean;
    showDoctorNameOnHeaders: boolean;
    showLocationAddressOnHeaders: boolean;
    specialty: number;
    surname?: string | null;
    title?: string | null;
    usePrivateCompanyABN: boolean;
    userCreated?: string | null;
    userLastModified?: string | null;
    username?: string | null;
    vocational: boolean;
    workFax?: string | null;
    workPhone?: string | null;
}

export class APIResponseOfEquipmentRosterResource extends ProvideErrorMessage implements IAPIResponseOfEquipmentRosterResource {
    data?: EquipmentRosterResource | null;

    constructor(data?: IAPIResponseOfEquipmentRosterResource) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? EquipmentRosterResource.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfEquipmentRosterResource {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfEquipmentRosterResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfEquipmentRosterResource extends IProvideErrorMessage {
    data?: IEquipmentRosterResource | null;
}

export class EquipmentRosterResource implements IEquipmentRosterResource {
    equipmentRosters?: EquipmentRosterDO[] | null;
    equipmentResources?: ResourceDO[] | null;

    constructor(data?: IEquipmentRosterResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.equipmentRosters) {
                this.equipmentRosters = [];
                for (let i = 0; i < data.equipmentRosters.length; i++) {
                    let item = data.equipmentRosters[i];
                    this.equipmentRosters[i] = item && !(<any>item).toJSON ? new EquipmentRosterDO(item) : <EquipmentRosterDO>item;
                }
            }
            if (data.equipmentResources) {
                this.equipmentResources = [];
                for (let i = 0; i < data.equipmentResources.length; i++) {
                    let item = data.equipmentResources[i];
                    this.equipmentResources[i] = item && !(<any>item).toJSON ? new ResourceDO(item) : <ResourceDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["equipmentRosters"] && data["equipmentRosters"].constructor === Array) {
                this.equipmentRosters = [];
                for (let item of data["equipmentRosters"])
                    this.equipmentRosters.push(EquipmentRosterDO.fromJS(item));
            }
            if (data["equipmentResources"] && data["equipmentResources"].constructor === Array) {
                this.equipmentResources = [];
                for (let item of data["equipmentResources"])
                    this.equipmentResources.push(ResourceDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EquipmentRosterResource {
        data = typeof data === 'object' ? data : {};
        let result = new EquipmentRosterResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.equipmentRosters && this.equipmentRosters.constructor === Array) {
            data["equipmentRosters"] = [];
            for (let item of this.equipmentRosters)
                data["equipmentRosters"].push(item.toJSON());
        }
        if (this.equipmentResources && this.equipmentResources.constructor === Array) {
            data["equipmentResources"] = [];
            for (let item of this.equipmentResources)
                data["equipmentResources"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEquipmentRosterResource {
    equipmentRosters?: IEquipmentRosterDO[] | null;
    equipmentResources?: IResourceDO[] | null;
}

export class EquipmentRosterDO implements IEquipmentRosterDO {
    equipmentRosterId!: number;
    resourceId!: number;
    resourceName?: string | null;
    locationId!: number;
    roomId!: number;
    startDate!: Date;
    endDate!: Date;
    allDay!: boolean;
    dateLastModified!: Date;

    constructor(data?: IEquipmentRosterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.equipmentRosterId = data["equipmentRosterId"] !== undefined ? data["equipmentRosterId"] : <any>null;
            this.resourceId = data["resourceId"] !== undefined ? data["resourceId"] : <any>null;
            this.resourceName = data["resourceName"] !== undefined ? data["resourceName"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.roomId = data["roomId"] !== undefined ? data["roomId"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.allDay = data["allDay"] !== undefined ? data["allDay"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EquipmentRosterDO {
        data = typeof data === 'object' ? data : {};
        let result = new EquipmentRosterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["equipmentRosterId"] = this.equipmentRosterId !== undefined ? this.equipmentRosterId : <any>null;
        data["resourceId"] = this.resourceId !== undefined ? this.resourceId : <any>null;
        data["resourceName"] = this.resourceName !== undefined ? this.resourceName : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["allDay"] = this.allDay !== undefined ? this.allDay : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        return data; 
    }
}

export interface IEquipmentRosterDO {
    equipmentRosterId: number;
    resourceId: number;
    resourceName?: string | null;
    locationId: number;
    roomId: number;
    startDate: Date;
    endDate: Date;
    allDay: boolean;
    dateLastModified: Date;
}

export class ResourceDO implements IResourceDO {
    resourceId!: number;
    resourceName?: string | null;
    colour?: string | null;

    constructor(data?: IResourceDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.resourceId = data["resourceId"] !== undefined ? data["resourceId"] : <any>null;
            this.resourceName = data["resourceName"] !== undefined ? data["resourceName"] : <any>null;
            this.colour = data["colour"] !== undefined ? data["colour"] : <any>null;
        }
    }

    static fromJS(data: any): ResourceDO {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resourceId"] = this.resourceId !== undefined ? this.resourceId : <any>null;
        data["resourceName"] = this.resourceName !== undefined ? this.resourceName : <any>null;
        data["colour"] = this.colour !== undefined ? this.colour : <any>null;
        return data; 
    }
}

export interface IResourceDO {
    resourceId: number;
    resourceName?: string | null;
    colour?: string | null;
}

export class APIResponseOfSaveEquipmentRosterResult extends ProvideErrorMessage implements IAPIResponseOfSaveEquipmentRosterResult {
    data?: SaveEquipmentRosterResult | null;

    constructor(data?: IAPIResponseOfSaveEquipmentRosterResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? SaveEquipmentRosterResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfSaveEquipmentRosterResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfSaveEquipmentRosterResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfSaveEquipmentRosterResult extends IProvideErrorMessage {
    data?: ISaveEquipmentRosterResult | null;
}

export class SaveEquipmentRosterResult implements ISaveEquipmentRosterResult {
    equipmentRoster?: EquipmentRosterDO | null;
    equipmentResource?: ResourceDO | null;

    constructor(data?: ISaveEquipmentRosterResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.equipmentRoster = data.equipmentRoster && !(<any>data.equipmentRoster).toJSON ? new EquipmentRosterDO(data.equipmentRoster) : <EquipmentRosterDO>this.equipmentRoster; 
            this.equipmentResource = data.equipmentResource && !(<any>data.equipmentResource).toJSON ? new ResourceDO(data.equipmentResource) : <ResourceDO>this.equipmentResource; 
        }
    }

    init(data?: any) {
        if (data) {
            this.equipmentRoster = data["equipmentRoster"] ? EquipmentRosterDO.fromJS(data["equipmentRoster"]) : <any>null;
            this.equipmentResource = data["equipmentResource"] ? ResourceDO.fromJS(data["equipmentResource"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveEquipmentRosterResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEquipmentRosterResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["equipmentRoster"] = this.equipmentRoster ? this.equipmentRoster.toJSON() : <any>null;
        data["equipmentResource"] = this.equipmentResource ? this.equipmentResource.toJSON() : <any>null;
        return data; 
    }
}

export interface ISaveEquipmentRosterResult {
    equipmentRoster?: IEquipmentRosterDO | null;
    equipmentResource?: IResourceDO | null;
}

export class APIResponseOfListOfResourceDO extends ProvideErrorMessage implements IAPIResponseOfListOfResourceDO {
    data?: ResourceDO[] | null;

    constructor(data?: IAPIResponseOfListOfResourceDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ResourceDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfResourceDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfResourceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfResourceDO extends IProvideErrorMessage {
    data?: IResourceDO[] | null;
}

export class GroupDO implements IGroupDO {
    groupName?: string | null;

    constructor(data?: IGroupDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupName = data["groupName"] !== undefined ? data["groupName"] : <any>null;
        }
    }

    static fromJS(data: any): GroupDO {
        data = typeof data === 'object' ? data : {};
        let result = new GroupDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        return data; 
    }
}

export interface IGroupDO {
    groupName?: string | null;
}

export class APIResponseOfListOfHMSPropertyDO extends ProvideErrorMessage implements IAPIResponseOfListOfHMSPropertyDO {
    data?: HMSPropertyDO[] | null;

    constructor(data?: IAPIResponseOfListOfHMSPropertyDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(HMSPropertyDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfHMSPropertyDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfHMSPropertyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfHMSPropertyDO extends IProvideErrorMessage {
    data?: IHMSPropertyDO[] | null;
}

export class HMSPropertyDO implements IHMSPropertyDO {
    propertyId!: number;
    userName?: string | null;
    groupName?: string | null;
    propName?: string | null;
    value?: string | null;
    dataType?: string | null;
    description?: string | null;
    userManaged!: boolean;

    constructor(data?: IHMSPropertyDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.propertyId = data["propertyId"] !== undefined ? data["propertyId"] : <any>null;
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.groupName = data["groupName"] !== undefined ? data["groupName"] : <any>null;
            this.propName = data["propName"] !== undefined ? data["propName"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
            this.dataType = data["dataType"] !== undefined ? data["dataType"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.userManaged = data["userManaged"] !== undefined ? data["userManaged"] : <any>null;
        }
    }

    static fromJS(data: any): HMSPropertyDO {
        data = typeof data === 'object' ? data : {};
        let result = new HMSPropertyDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyId"] = this.propertyId !== undefined ? this.propertyId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["propName"] = this.propName !== undefined ? this.propName : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["userManaged"] = this.userManaged !== undefined ? this.userManaged : <any>null;
        return data; 
    }
}

export interface IHMSPropertyDO {
    propertyId: number;
    userName?: string | null;
    groupName?: string | null;
    propName?: string | null;
    value?: string | null;
    dataType?: string | null;
    description?: string | null;
    userManaged: boolean;
}

export class APIResponseOfListOfSmartTextStyleProperty extends ProvideErrorMessage implements IAPIResponseOfListOfSmartTextStyleProperty {
    data?: SmartTextStyleProperty[] | null;

    constructor(data?: IAPIResponseOfListOfSmartTextStyleProperty) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(SmartTextStyleProperty.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfSmartTextStyleProperty {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfSmartTextStyleProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfSmartTextStyleProperty extends IProvideErrorMessage {
    data?: ISmartTextStyleProperty[] | null;
}

export class APIResponseOfStringOf extends ProvideErrorMessage implements IAPIResponseOfStringOf {
    data?: string[] | null;

    constructor(data?: IAPIResponseOfStringOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(item);
            }
        }
    }

    static fromJS(data: any): APIResponseOfStringOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfStringOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfStringOf extends IProvideErrorMessage {
    data?: string[] | null;
}

export class APIResponseOfIEnumerableOfImageTemplateDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfImageTemplateDO {
    data?: ImageTemplateDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfImageTemplateDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ImageTemplateDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfImageTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfImageTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfImageTemplateDO extends IProvideErrorMessage {
    data?: IImageTemplateDO[] | null;
}

export class ImageTemplateDO implements IImageTemplateDO {
    imageTemplateId!: number;
    description?: string | null;
    fileName?: string | null;
    displayOrder!: number;

    constructor(data?: IImageTemplateDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.imageTemplateId = data["imageTemplateId"] !== undefined ? data["imageTemplateId"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.fileName = data["fileName"] !== undefined ? data["fileName"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
        }
    }

    static fromJS(data: any): ImageTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new ImageTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["imageTemplateId"] = this.imageTemplateId !== undefined ? this.imageTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        return data; 
    }
}

export interface IImageTemplateDO {
    imageTemplateId: number;
    description?: string | null;
    fileName?: string | null;
    displayOrder: number;
}

export class APIResponseOfImageTemplateDOOf extends ProvideErrorMessage implements IAPIResponseOfImageTemplateDOOf {
    data?: ImageTemplateDO[] | null;

    constructor(data?: IAPIResponseOfImageTemplateDOOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ImageTemplateDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfImageTemplateDOOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfImageTemplateDOOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfImageTemplateDOOf extends IProvideErrorMessage {
    data?: IImageTemplateDO[] | null;
}

export class GetAllIndicationsParams extends CorrelatableRequestParams implements IGetAllIndicationsParams {
    departmentId!: number;

    constructor(data?: IGetAllIndicationsParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.departmentId = data["departmentId"] !== undefined ? data["departmentId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllIndicationsParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllIndicationsParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId !== undefined ? this.departmentId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllIndicationsParams extends ICorrelatableRequestParams {
    departmentId: number;
}

export class GetAllIndications extends GetAllIndicationsParams implements IGetAllIndications {

    constructor(data?: IGetAllIndications) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetAllIndications {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllIndications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllIndications extends IGetAllIndicationsParams {
}

export class APIResponseOfGetAllIndicationsResult extends ProvideErrorMessage implements IAPIResponseOfGetAllIndicationsResult {
    data?: GetAllIndicationsResult | null;

    constructor(data?: IAPIResponseOfGetAllIndicationsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllIndicationsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllIndicationsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllIndicationsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllIndicationsResult extends IProvideErrorMessage {
    data?: IGetAllIndicationsResult | null;
}

export class GetAllIndicationsResult extends ProvideErrorMessage implements IGetAllIndicationsResult {
    results?: Indication[] | null;

    constructor(data?: IGetAllIndicationsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(Indication.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllIndicationsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllIndicationsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllIndicationsResult extends IProvideErrorMessage {
    results?: IIndication[] | null;
}

export class Indication implements IIndication {
    indication_ID!: number;
    name?: string | null;

    constructor(data?: IIndication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.indication_ID = data["indication_ID"] !== undefined ? data["indication_ID"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): Indication {
        data = typeof data === 'object' ? data : {};
        let result = new Indication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indication_ID"] = this.indication_ID !== undefined ? this.indication_ID : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IIndication {
    indication_ID: number;
    name?: string | null;
}

export class GetAllInternalDoctorsParams implements IGetAllInternalDoctorsParams {
    givennamesContains?: string | null;
    surnameContains?: string | null;
    providerNumberContains?: string | null;

    constructor(data?: IGetAllInternalDoctorsParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.givennamesContains = data["givennamesContains"] !== undefined ? data["givennamesContains"] : <any>null;
            this.surnameContains = data["surnameContains"] !== undefined ? data["surnameContains"] : <any>null;
            this.providerNumberContains = data["providerNumberContains"] !== undefined ? data["providerNumberContains"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllInternalDoctorsParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllInternalDoctorsParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["givennamesContains"] = this.givennamesContains !== undefined ? this.givennamesContains : <any>null;
        data["surnameContains"] = this.surnameContains !== undefined ? this.surnameContains : <any>null;
        data["providerNumberContains"] = this.providerNumberContains !== undefined ? this.providerNumberContains : <any>null;
        return data; 
    }
}

export interface IGetAllInternalDoctorsParams {
    givennamesContains?: string | null;
    surnameContains?: string | null;
    providerNumberContains?: string | null;
}

export class APIResponseOfGetAllInternalDoctorsResult extends ProvideErrorMessage implements IAPIResponseOfGetAllInternalDoctorsResult {
    data?: GetAllInternalDoctorsResult | null;

    constructor(data?: IAPIResponseOfGetAllInternalDoctorsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllInternalDoctorsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllInternalDoctorsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllInternalDoctorsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllInternalDoctorsResult extends IProvideErrorMessage {
    data?: IGetAllInternalDoctorsResult | null;
}

export class GetAllInternalDoctorsResult extends ProvideErrorMessage implements IGetAllInternalDoctorsResult {
    results?: InternalDoctorInfo[] | null;

    constructor(data?: IGetAllInternalDoctorsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(InternalDoctorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllInternalDoctorsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllInternalDoctorsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllInternalDoctorsResult extends IProvideErrorMessage {
    results?: IInternalDoctorInfo[] | null;
}

export class InternalDoctorInfo implements IInternalDoctorInfo {
    doctorId!: number;
    displayname?: string | null;

    constructor(data?: IInternalDoctorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.displayname = data["displayname"] !== undefined ? data["displayname"] : <any>null;
        }
    }

    static fromJS(data: any): InternalDoctorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new InternalDoctorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["displayname"] = this.displayname !== undefined ? this.displayname : <any>null;
        return data; 
    }
}

export interface IInternalDoctorInfo {
    doctorId: number;
    displayname?: string | null;
}

export class APIResponseOfFeeItemNumberOf extends ProvideErrorMessage implements IAPIResponseOfFeeItemNumberOf {
    data?: FeeItemNumber[] | null;

    constructor(data?: IAPIResponseOfFeeItemNumberOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(FeeItemNumber.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfFeeItemNumberOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFeeItemNumberOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFeeItemNumberOf extends IProvideErrorMessage {
    data?: IFeeItemNumber[] | null;
}

export class FeeItemNumber implements IFeeItemNumber {
    itemNumber?: string | null;
    itemNumberDisplay?: string | null;

    constructor(data?: IFeeItemNumber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemNumber = data["itemNumber"] !== undefined ? data["itemNumber"] : <any>null;
            this.itemNumberDisplay = data["itemNumberDisplay"] !== undefined ? data["itemNumberDisplay"] : <any>null;
        }
    }

    static fromJS(data: any): FeeItemNumber {
        data = typeof data === 'object' ? data : {};
        let result = new FeeItemNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemNumber"] = this.itemNumber !== undefined ? this.itemNumber : <any>null;
        data["itemNumberDisplay"] = this.itemNumberDisplay !== undefined ? this.itemNumberDisplay : <any>null;
        return data; 
    }
}

export interface IFeeItemNumber {
    itemNumber?: string | null;
    itemNumberDisplay?: string | null;
}

export class APIResponseOfAllLicensedFeatureDataDO extends ProvideErrorMessage implements IAPIResponseOfAllLicensedFeatureDataDO {
    data?: AllLicensedFeatureDataDO | null;

    constructor(data?: IAPIResponseOfAllLicensedFeatureDataDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AllLicensedFeatureDataDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAllLicensedFeatureDataDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAllLicensedFeatureDataDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAllLicensedFeatureDataDO extends IProvideErrorMessage {
    data?: IAllLicensedFeatureDataDO | null;
}

export class AllLicensedFeatureDataDO implements IAllLicensedFeatureDataDO {
    licensedFeatures?: LicensedFeatureDO[] | null;
    allBookingTypes?: SelectedBookingTypeDO[] | null;
    allLocationRooms?: SelectedRoomDO[] | null;
    allModalities?: ModalityDO[] | null;

    constructor(data?: IAllLicensedFeatureDataDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.licensedFeatures) {
                this.licensedFeatures = [];
                for (let i = 0; i < data.licensedFeatures.length; i++) {
                    let item = data.licensedFeatures[i];
                    this.licensedFeatures[i] = item && !(<any>item).toJSON ? new LicensedFeatureDO(item) : <LicensedFeatureDO>item;
                }
            }
            if (data.allBookingTypes) {
                this.allBookingTypes = [];
                for (let i = 0; i < data.allBookingTypes.length; i++) {
                    let item = data.allBookingTypes[i];
                    this.allBookingTypes[i] = item && !(<any>item).toJSON ? new SelectedBookingTypeDO(item) : <SelectedBookingTypeDO>item;
                }
            }
            if (data.allLocationRooms) {
                this.allLocationRooms = [];
                for (let i = 0; i < data.allLocationRooms.length; i++) {
                    let item = data.allLocationRooms[i];
                    this.allLocationRooms[i] = item && !(<any>item).toJSON ? new SelectedRoomDO(item) : <SelectedRoomDO>item;
                }
            }
            if (data.allModalities) {
                this.allModalities = [];
                for (let i = 0; i < data.allModalities.length; i++) {
                    let item = data.allModalities[i];
                    this.allModalities[i] = item && !(<any>item).toJSON ? new ModalityDO(item) : <ModalityDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["licensedFeatures"] && data["licensedFeatures"].constructor === Array) {
                this.licensedFeatures = [];
                for (let item of data["licensedFeatures"])
                    this.licensedFeatures.push(LicensedFeatureDO.fromJS(item));
            }
            if (data["allBookingTypes"] && data["allBookingTypes"].constructor === Array) {
                this.allBookingTypes = [];
                for (let item of data["allBookingTypes"])
                    this.allBookingTypes.push(SelectedBookingTypeDO.fromJS(item));
            }
            if (data["allLocationRooms"] && data["allLocationRooms"].constructor === Array) {
                this.allLocationRooms = [];
                for (let item of data["allLocationRooms"])
                    this.allLocationRooms.push(SelectedRoomDO.fromJS(item));
            }
            if (data["allModalities"] && data["allModalities"].constructor === Array) {
                this.allModalities = [];
                for (let item of data["allModalities"])
                    this.allModalities.push(ModalityDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AllLicensedFeatureDataDO {
        data = typeof data === 'object' ? data : {};
        let result = new AllLicensedFeatureDataDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.licensedFeatures && this.licensedFeatures.constructor === Array) {
            data["licensedFeatures"] = [];
            for (let item of this.licensedFeatures)
                data["licensedFeatures"].push(item.toJSON());
        }
        if (this.allBookingTypes && this.allBookingTypes.constructor === Array) {
            data["allBookingTypes"] = [];
            for (let item of this.allBookingTypes)
                data["allBookingTypes"].push(item.toJSON());
        }
        if (this.allLocationRooms && this.allLocationRooms.constructor === Array) {
            data["allLocationRooms"] = [];
            for (let item of this.allLocationRooms)
                data["allLocationRooms"].push(item.toJSON());
        }
        if (this.allModalities && this.allModalities.constructor === Array) {
            data["allModalities"] = [];
            for (let item of this.allModalities)
                data["allModalities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAllLicensedFeatureDataDO {
    licensedFeatures?: ILicensedFeatureDO[] | null;
    allBookingTypes?: ISelectedBookingTypeDO[] | null;
    allLocationRooms?: ISelectedRoomDO[] | null;
    allModalities?: IModalityDO[] | null;
}

export class LicensedFeatureDO implements ILicensedFeatureDO {
    featureName?: string | null;
    featureKey!: HealthTrackFeature;
    feature?: string | null;
    quantity!: number;
    featureData?: any | null;
    hasSettings!: boolean;
    hasLocationRooms!: boolean;

    constructor(data?: ILicensedFeatureDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureName = data["featureName"] !== undefined ? data["featureName"] : <any>null;
            this.featureKey = data["featureKey"] !== undefined ? data["featureKey"] : <any>null;
            this.feature = data["feature"] !== undefined ? data["feature"] : <any>null;
            this.quantity = data["quantity"] !== undefined ? data["quantity"] : <any>null;
            this.featureData = data["featureData"] !== undefined ? data["featureData"] : <any>null;
            this.hasSettings = data["hasSettings"] !== undefined ? data["hasSettings"] : <any>null;
            this.hasLocationRooms = data["hasLocationRooms"] !== undefined ? data["hasLocationRooms"] : <any>null;
        }
    }

    static fromJS(data: any): LicensedFeatureDO {
        data = typeof data === 'object' ? data : {};
        let result = new LicensedFeatureDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureName"] = this.featureName !== undefined ? this.featureName : <any>null;
        data["featureKey"] = this.featureKey !== undefined ? this.featureKey : <any>null;
        data["feature"] = this.feature !== undefined ? this.feature : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["featureData"] = this.featureData !== undefined ? this.featureData : <any>null;
        data["hasSettings"] = this.hasSettings !== undefined ? this.hasSettings : <any>null;
        data["hasLocationRooms"] = this.hasLocationRooms !== undefined ? this.hasLocationRooms : <any>null;
        return data; 
    }
}

export interface ILicensedFeatureDO {
    featureName?: string | null;
    featureKey: HealthTrackFeature;
    feature?: string | null;
    quantity: number;
    featureData?: any | null;
    hasSettings: boolean;
    hasLocationRooms: boolean;
}

export enum HealthTrackFeature {
    Distributionlist = 1, 
    Inboundrsd = 2, 
    Budgeting = 3, 
    Lookuptree = 4, 
    Exchangesync = 5, 
    DiarySync = 6, 
    Orderrequest = 7, 
    Documentworkflow = 8, 
    Bookingstatusmonitor = 9, 
    Triage = 10, 
    Clinicalworkflow = 11, 
    Hepatology = 12, 
    Departments = 13, 
    Metadataexport = 14, 
    Xcelerareports = 15, 
    Xcelerawebviewer = 16, 
    Xcelerasr = 17, 
    Siemensreports = 18, 
    Siemensviewer = 19, 
    Siemenssrdata = 20, 
    Pathology = 21, 
    Pathologycasesensitiveloinc = 22, 
    Users = 23, 
    Maintenance = 24, 
    Dwls = 25, 
    Bioecg = 26, 
    Cardiacmri = 27, 
    Synapsesrdata = 28, 
    Dq_echocardiogram_reporting = 29, 
    Dq_wwmc_clinicalrecordsdetail = 30, 
    Admission_manager = 31, 
    Inr_tracking = 32, 
    Meds = 33, 
    Mims_cds_interactions = 34, 
    Batchreportingmanager = 35, 
    Sync = 36, 
    Mru = 37, 
    Weight = 38, 
    Transaction_services = 39, 
    Dicom_medicalconnections = 40, 
    Dsd = 41, 
    Pi = 42, 
    Dsd_open = 43, 
    Mobile_billing = 44, 
    Inv_scan = 45, 
    Readonly_mode = 46, 
    Xcelera_custom_pdf = 47, 
    Maclab = 48, 
    Omwls = 49, 
    ProsolvView = 50, 
    Geechopac = 51, 
    Oec_ihc = 52, 
}

export class SelectedBookingTypeDO implements ISelectedBookingTypeDO {
    bookingType?: string | null;
    longName?: string | null;
    selected!: boolean;

    constructor(data?: ISelectedBookingTypeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
            this.longName = data["longName"] !== undefined ? data["longName"] : <any>null;
            this.selected = data["selected"] !== undefined ? data["selected"] : <any>null;
        }
    }

    static fromJS(data: any): SelectedBookingTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedBookingTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        data["longName"] = this.longName !== undefined ? this.longName : <any>null;
        data["selected"] = this.selected !== undefined ? this.selected : <any>null;
        return data; 
    }
}

export interface ISelectedBookingTypeDO {
    bookingType?: string | null;
    longName?: string | null;
    selected: boolean;
}

export class SelectedRoomDO implements ISelectedRoomDO {
    key?: string | null;
    location?: string | null;
    room?: string | null;
    selected!: boolean;

    constructor(data?: ISelectedRoomDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"] !== undefined ? data["key"] : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
            this.room = data["room"] !== undefined ? data["room"] : <any>null;
            this.selected = data["selected"] !== undefined ? data["selected"] : <any>null;
        }
    }

    static fromJS(data: any): SelectedRoomDO {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedRoomDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        data["selected"] = this.selected !== undefined ? this.selected : <any>null;
        return data; 
    }
}

export interface ISelectedRoomDO {
    key?: string | null;
    location?: string | null;
    room?: string | null;
    selected: boolean;
}

export class ModalityDO implements IModalityDO {
    modality?: string | null;
    displayName?: string | null;

    constructor(data?: IModalityDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modality = data["modality"] !== undefined ? data["modality"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
        }
    }

    static fromJS(data: any): ModalityDO {
        data = typeof data === 'object' ? data : {};
        let result = new ModalityDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modality"] = this.modality !== undefined ? this.modality : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        return data; 
    }
}

export interface IModalityDO {
    modality?: string | null;
    displayName?: string | null;
}

export class APIResponseOfLicensedFeatureDO extends ProvideErrorMessage implements IAPIResponseOfLicensedFeatureDO {
    data?: LicensedFeatureDO | null;

    constructor(data?: IAPIResponseOfLicensedFeatureDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? LicensedFeatureDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfLicensedFeatureDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfLicensedFeatureDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfLicensedFeatureDO extends IProvideErrorMessage {
    data?: ILicensedFeatureDO | null;
}

export class WorkListDeviceDO implements IWorkListDeviceDO {
    id?: string | null;
    type?: string | null;
    dev_Seq!: number;
    name?: string | null;
    enabled!: boolean;
    ipAddress?: string | null;
    port!: number;
    make?: string | null;
    model?: string | null;
    serialNumber?: string | null;
    hasSettings!: boolean;
    selectedLocationRooms?: SelectedRoomDO[] | null;
    selectedBookingStatus?: SelectedBookingStatusDO[] | null;
    selectedBookingTypes?: SelectedBookingTypeDO[] | null;
    deviceMode!: DeviceMode;
    modality?: string | null;
    mrnPreference!: MRNPreference;
    mrnRequired!: boolean;
    preloadDays!: number;
    nameLabel?: string | null;
    clearingSettings!: boolean;

    constructor(data?: IWorkListDeviceDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.selectedLocationRooms) {
                this.selectedLocationRooms = [];
                for (let i = 0; i < data.selectedLocationRooms.length; i++) {
                    let item = data.selectedLocationRooms[i];
                    this.selectedLocationRooms[i] = item && !(<any>item).toJSON ? new SelectedRoomDO(item) : <SelectedRoomDO>item;
                }
            }
            if (data.selectedBookingStatus) {
                this.selectedBookingStatus = [];
                for (let i = 0; i < data.selectedBookingStatus.length; i++) {
                    let item = data.selectedBookingStatus[i];
                    this.selectedBookingStatus[i] = item && !(<any>item).toJSON ? new SelectedBookingStatusDO(item) : <SelectedBookingStatusDO>item;
                }
            }
            if (data.selectedBookingTypes) {
                this.selectedBookingTypes = [];
                for (let i = 0; i < data.selectedBookingTypes.length; i++) {
                    let item = data.selectedBookingTypes[i];
                    this.selectedBookingTypes[i] = item && !(<any>item).toJSON ? new SelectedBookingTypeDO(item) : <SelectedBookingTypeDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.dev_Seq = data["dev_Seq"] !== undefined ? data["dev_Seq"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.enabled = data["enabled"] !== undefined ? data["enabled"] : <any>null;
            this.ipAddress = data["ipAddress"] !== undefined ? data["ipAddress"] : <any>null;
            this.port = data["port"] !== undefined ? data["port"] : <any>null;
            this.make = data["make"] !== undefined ? data["make"] : <any>null;
            this.model = data["model"] !== undefined ? data["model"] : <any>null;
            this.serialNumber = data["serialNumber"] !== undefined ? data["serialNumber"] : <any>null;
            this.hasSettings = data["hasSettings"] !== undefined ? data["hasSettings"] : <any>null;
            if (data["selectedLocationRooms"] && data["selectedLocationRooms"].constructor === Array) {
                this.selectedLocationRooms = [];
                for (let item of data["selectedLocationRooms"])
                    this.selectedLocationRooms.push(SelectedRoomDO.fromJS(item));
            }
            if (data["selectedBookingStatus"] && data["selectedBookingStatus"].constructor === Array) {
                this.selectedBookingStatus = [];
                for (let item of data["selectedBookingStatus"])
                    this.selectedBookingStatus.push(SelectedBookingStatusDO.fromJS(item));
            }
            if (data["selectedBookingTypes"] && data["selectedBookingTypes"].constructor === Array) {
                this.selectedBookingTypes = [];
                for (let item of data["selectedBookingTypes"])
                    this.selectedBookingTypes.push(SelectedBookingTypeDO.fromJS(item));
            }
            this.deviceMode = data["deviceMode"] !== undefined ? data["deviceMode"] : <any>null;
            this.modality = data["modality"] !== undefined ? data["modality"] : <any>null;
            this.mrnPreference = data["mrnPreference"] !== undefined ? data["mrnPreference"] : <any>null;
            this.mrnRequired = data["mrnRequired"] !== undefined ? data["mrnRequired"] : <any>null;
            this.preloadDays = data["preloadDays"] !== undefined ? data["preloadDays"] : <any>null;
            this.nameLabel = data["nameLabel"] !== undefined ? data["nameLabel"] : <any>null;
            this.clearingSettings = data["clearingSettings"] !== undefined ? data["clearingSettings"] : <any>null;
        }
    }

    static fromJS(data: any): WorkListDeviceDO {
        data = typeof data === 'object' ? data : {};
        let result = new WorkListDeviceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["dev_Seq"] = this.dev_Seq !== undefined ? this.dev_Seq : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["enabled"] = this.enabled !== undefined ? this.enabled : <any>null;
        data["ipAddress"] = this.ipAddress !== undefined ? this.ipAddress : <any>null;
        data["port"] = this.port !== undefined ? this.port : <any>null;
        data["make"] = this.make !== undefined ? this.make : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["hasSettings"] = this.hasSettings !== undefined ? this.hasSettings : <any>null;
        if (this.selectedLocationRooms && this.selectedLocationRooms.constructor === Array) {
            data["selectedLocationRooms"] = [];
            for (let item of this.selectedLocationRooms)
                data["selectedLocationRooms"].push(item.toJSON());
        }
        if (this.selectedBookingStatus && this.selectedBookingStatus.constructor === Array) {
            data["selectedBookingStatus"] = [];
            for (let item of this.selectedBookingStatus)
                data["selectedBookingStatus"].push(item.toJSON());
        }
        if (this.selectedBookingTypes && this.selectedBookingTypes.constructor === Array) {
            data["selectedBookingTypes"] = [];
            for (let item of this.selectedBookingTypes)
                data["selectedBookingTypes"].push(item.toJSON());
        }
        data["deviceMode"] = this.deviceMode !== undefined ? this.deviceMode : <any>null;
        data["modality"] = this.modality !== undefined ? this.modality : <any>null;
        data["mrnPreference"] = this.mrnPreference !== undefined ? this.mrnPreference : <any>null;
        data["mrnRequired"] = this.mrnRequired !== undefined ? this.mrnRequired : <any>null;
        data["preloadDays"] = this.preloadDays !== undefined ? this.preloadDays : <any>null;
        data["nameLabel"] = this.nameLabel !== undefined ? this.nameLabel : <any>null;
        data["clearingSettings"] = this.clearingSettings !== undefined ? this.clearingSettings : <any>null;
        return data; 
    }
}

export interface IWorkListDeviceDO {
    id?: string | null;
    type?: string | null;
    dev_Seq: number;
    name?: string | null;
    enabled: boolean;
    ipAddress?: string | null;
    port: number;
    make?: string | null;
    model?: string | null;
    serialNumber?: string | null;
    hasSettings: boolean;
    selectedLocationRooms?: ISelectedRoomDO[] | null;
    selectedBookingStatus?: ISelectedBookingStatusDO[] | null;
    selectedBookingTypes?: ISelectedBookingTypeDO[] | null;
    deviceMode: DeviceMode;
    modality?: string | null;
    mrnPreference: MRNPreference;
    mrnRequired: boolean;
    preloadDays: number;
    nameLabel?: string | null;
    clearingSettings: boolean;
}

export class SelectedBookingStatusDO implements ISelectedBookingStatusDO {
    bookingStatus?: string | null;
    selected!: boolean;

    constructor(data?: ISelectedBookingStatusDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingStatus = data["bookingStatus"] !== undefined ? data["bookingStatus"] : <any>null;
            this.selected = data["selected"] !== undefined ? data["selected"] : <any>null;
        }
    }

    static fromJS(data: any): SelectedBookingStatusDO {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedBookingStatusDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingStatus"] = this.bookingStatus !== undefined ? this.bookingStatus : <any>null;
        data["selected"] = this.selected !== undefined ? this.selected : <any>null;
        return data; 
    }
}

export interface ISelectedBookingStatusDO {
    bookingStatus?: string | null;
    selected: boolean;
}

export enum DeviceMode {
    Live = 0, 
    Preload = 1, 
}

export enum MRNPreference {
    HealthTrackPatientID = 0, 
    PrimaryMRN = 1, 
    LocationMRN = 2, 
}

export class APIResponseOfWorkListDeviceDO extends ProvideErrorMessage implements IAPIResponseOfWorkListDeviceDO {
    data?: WorkListDeviceDO | null;

    constructor(data?: IAPIResponseOfWorkListDeviceDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? WorkListDeviceDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfWorkListDeviceDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfWorkListDeviceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfWorkListDeviceDO extends IProvideErrorMessage {
    data?: IWorkListDeviceDO | null;
}

export class APIResponseOfIEnumerableOfDicomWorklistItemDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfDicomWorklistItemDO {
    data?: DicomWorklistItemDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfDicomWorklistItemDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(DicomWorklistItemDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfDicomWorklistItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfDicomWorklistItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfDicomWorklistItemDO extends IProvideErrorMessage {
    data?: IDicomWorklistItemDO[] | null;
}

export class DicomWorklistItemDO implements IDicomWorklistItemDO {
    procStepID?: string | null;
    procStepDesc?: string | null;
    aE_Title?: string | null;
    procStepStartDate?: string | null;
    procStepStartTime?: string | null;
    modality?: string | null;
    perfPhysName?: string | null;
    reqProc_ID?: string | null;
    reqProcDesc?: string | null;
    studyInst_UID?: string | null;
    accNumber?: string | null;
    reqPhysician?: string | null;
    refPhysName?: string | null;
    patient_ID?: string | null;
    patientName?: string | null;
    patientDOB?: string | null;
    patientSex?: string | null;

    constructor(data?: IDicomWorklistItemDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.procStepID = data["procStepID"] !== undefined ? data["procStepID"] : <any>null;
            this.procStepDesc = data["procStepDesc"] !== undefined ? data["procStepDesc"] : <any>null;
            this.aE_Title = data["aE_Title"] !== undefined ? data["aE_Title"] : <any>null;
            this.procStepStartDate = data["procStepStartDate"] !== undefined ? data["procStepStartDate"] : <any>null;
            this.procStepStartTime = data["procStepStartTime"] !== undefined ? data["procStepStartTime"] : <any>null;
            this.modality = data["modality"] !== undefined ? data["modality"] : <any>null;
            this.perfPhysName = data["perfPhysName"] !== undefined ? data["perfPhysName"] : <any>null;
            this.reqProc_ID = data["reqProc_ID"] !== undefined ? data["reqProc_ID"] : <any>null;
            this.reqProcDesc = data["reqProcDesc"] !== undefined ? data["reqProcDesc"] : <any>null;
            this.studyInst_UID = data["studyInst_UID"] !== undefined ? data["studyInst_UID"] : <any>null;
            this.accNumber = data["accNumber"] !== undefined ? data["accNumber"] : <any>null;
            this.reqPhysician = data["reqPhysician"] !== undefined ? data["reqPhysician"] : <any>null;
            this.refPhysName = data["refPhysName"] !== undefined ? data["refPhysName"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.patientDOB = data["patientDOB"] !== undefined ? data["patientDOB"] : <any>null;
            this.patientSex = data["patientSex"] !== undefined ? data["patientSex"] : <any>null;
        }
    }

    static fromJS(data: any): DicomWorklistItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new DicomWorklistItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["procStepID"] = this.procStepID !== undefined ? this.procStepID : <any>null;
        data["procStepDesc"] = this.procStepDesc !== undefined ? this.procStepDesc : <any>null;
        data["aE_Title"] = this.aE_Title !== undefined ? this.aE_Title : <any>null;
        data["procStepStartDate"] = this.procStepStartDate !== undefined ? this.procStepStartDate : <any>null;
        data["procStepStartTime"] = this.procStepStartTime !== undefined ? this.procStepStartTime : <any>null;
        data["modality"] = this.modality !== undefined ? this.modality : <any>null;
        data["perfPhysName"] = this.perfPhysName !== undefined ? this.perfPhysName : <any>null;
        data["reqProc_ID"] = this.reqProc_ID !== undefined ? this.reqProc_ID : <any>null;
        data["reqProcDesc"] = this.reqProcDesc !== undefined ? this.reqProcDesc : <any>null;
        data["studyInst_UID"] = this.studyInst_UID !== undefined ? this.studyInst_UID : <any>null;
        data["accNumber"] = this.accNumber !== undefined ? this.accNumber : <any>null;
        data["reqPhysician"] = this.reqPhysician !== undefined ? this.reqPhysician : <any>null;
        data["refPhysName"] = this.refPhysName !== undefined ? this.refPhysName : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["patientDOB"] = this.patientDOB !== undefined ? this.patientDOB : <any>null;
        data["patientSex"] = this.patientSex !== undefined ? this.patientSex : <any>null;
        return data; 
    }
}

export interface IDicomWorklistItemDO {
    procStepID?: string | null;
    procStepDesc?: string | null;
    aE_Title?: string | null;
    procStepStartDate?: string | null;
    procStepStartTime?: string | null;
    modality?: string | null;
    perfPhysName?: string | null;
    reqProc_ID?: string | null;
    reqProcDesc?: string | null;
    studyInst_UID?: string | null;
    accNumber?: string | null;
    reqPhysician?: string | null;
    refPhysName?: string | null;
    patient_ID?: string | null;
    patientName?: string | null;
    patientDOB?: string | null;
    patientSex?: string | null;
}

export class GetAllListItemsParams extends CorrelatableRequestParams implements IGetAllListItemsParams {
    listGroup?: string | null;
    listName?: string | null;
    listToQuery?: ListToQuery | null;
    includeDeleted!: boolean;

    constructor(data?: IGetAllListItemsParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.listGroup = data["listGroup"] !== undefined ? data["listGroup"] : <any>null;
            this.listName = data["listName"] !== undefined ? data["listName"] : <any>null;
            this.listToQuery = data["listToQuery"] !== undefined ? data["listToQuery"] : <any>null;
            this.includeDeleted = data["includeDeleted"] !== undefined ? data["includeDeleted"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllListItemsParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllListItemsParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listGroup"] = this.listGroup !== undefined ? this.listGroup : <any>null;
        data["listName"] = this.listName !== undefined ? this.listName : <any>null;
        data["listToQuery"] = this.listToQuery !== undefined ? this.listToQuery : <any>null;
        data["includeDeleted"] = this.includeDeleted !== undefined ? this.includeDeleted : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllListItemsParams extends ICorrelatableRequestParams {
    listGroup?: string | null;
    listName?: string | null;
    listToQuery?: ListToQuery | null;
    includeDeleted: boolean;
}

export class GetAllListItems extends GetAllListItemsParams implements IGetAllListItems {

    constructor(data?: IGetAllListItems) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetAllListItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllListItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllListItems extends IGetAllListItemsParams {
}

export enum ListToQuery {
    HMS_List = 0, 
    List_Admission = 1, 
    List_Core = 2, 
    List_Cardio = 3, 
    List_Clinical = 4, 
    List_Hepatology = 5, 
    List_Weight = 6, 
}

export class APIResponseOfGetAllListItemsResult extends ProvideErrorMessage implements IAPIResponseOfGetAllListItemsResult {
    data?: GetAllListItemsResult | null;

    constructor(data?: IAPIResponseOfGetAllListItemsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllListItemsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllListItemsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllListItemsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllListItemsResult extends IProvideErrorMessage {
    data?: IGetAllListItemsResult | null;
}

export class GetAllListItemsResult extends ProvideErrorMessage implements IGetAllListItemsResult {
    results?: ListItemDefinition[] | null;

    constructor(data?: IGetAllListItemsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(ListItemDefinition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllListItemsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllListItemsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllListItemsResult extends IProvideErrorMessage {
    results?: IListItemDefinition[] | null;
}

export class ListItemDefinition implements IListItemDefinition {
    list_ID!: number;
    listGroup?: string | null;
    listName?: string | null;
    itemID!: number;
    itemValue?: string | null;
    deleted!: boolean;
    displayOrder!: number;
    additionalNotesOrDescription?: string | null;
    comment?: string | null;

    constructor(data?: IListItemDefinition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.list_ID = data["list_ID"] !== undefined ? data["list_ID"] : <any>null;
            this.listGroup = data["listGroup"] !== undefined ? data["listGroup"] : <any>null;
            this.listName = data["listName"] !== undefined ? data["listName"] : <any>null;
            this.itemID = data["itemID"] !== undefined ? data["itemID"] : <any>null;
            this.itemValue = data["itemValue"] !== undefined ? data["itemValue"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
            this.additionalNotesOrDescription = data["additionalNotesOrDescription"] !== undefined ? data["additionalNotesOrDescription"] : <any>null;
            this.comment = data["comment"] !== undefined ? data["comment"] : <any>null;
        }
    }

    static fromJS(data: any): ListItemDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDefinition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["list_ID"] = this.list_ID !== undefined ? this.list_ID : <any>null;
        data["listGroup"] = this.listGroup !== undefined ? this.listGroup : <any>null;
        data["listName"] = this.listName !== undefined ? this.listName : <any>null;
        data["itemID"] = this.itemID !== undefined ? this.itemID : <any>null;
        data["itemValue"] = this.itemValue !== undefined ? this.itemValue : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        data["additionalNotesOrDescription"] = this.additionalNotesOrDescription !== undefined ? this.additionalNotesOrDescription : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        return data; 
    }
}

export interface IListItemDefinition {
    list_ID: number;
    listGroup?: string | null;
    listName?: string | null;
    itemID: number;
    itemValue?: string | null;
    deleted: boolean;
    displayOrder: number;
    additionalNotesOrDescription?: string | null;
    comment?: string | null;
}

export class ListDefDO implements IListDefDO {
    listTable?: string | null;
    listGroup?: string | null;
    listName?: string | null;

    constructor(data?: IListDefDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.listTable = data["listTable"] !== undefined ? data["listTable"] : <any>null;
            this.listGroup = data["listGroup"] !== undefined ? data["listGroup"] : <any>null;
            this.listName = data["listName"] !== undefined ? data["listName"] : <any>null;
        }
    }

    static fromJS(data: any): ListDefDO {
        data = typeof data === 'object' ? data : {};
        let result = new ListDefDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listTable"] = this.listTable !== undefined ? this.listTable : <any>null;
        data["listGroup"] = this.listGroup !== undefined ? this.listGroup : <any>null;
        data["listName"] = this.listName !== undefined ? this.listName : <any>null;
        return data; 
    }
}

export interface IListDefDO {
    listTable?: string | null;
    listGroup?: string | null;
    listName?: string | null;
}

export class APIResponseOfListOfListDO extends ProvideErrorMessage implements IAPIResponseOfListOfListDO {
    data?: ListDO[] | null;

    constructor(data?: IAPIResponseOfListOfListDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ListDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfListDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfListDO extends IProvideErrorMessage {
    data?: IListDO[] | null;
}

export class ListDO implements IListDO {
    listDef?: ListDefDO | null;
    listItems?: ListItemDO[] | null;

    constructor(data?: IListDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.listDef = data.listDef && !(<any>data.listDef).toJSON ? new ListDefDO(data.listDef) : <ListDefDO>this.listDef; 
            if (data.listItems) {
                this.listItems = [];
                for (let i = 0; i < data.listItems.length; i++) {
                    let item = data.listItems[i];
                    this.listItems[i] = item && !(<any>item).toJSON ? new ListItemDO(item) : <ListItemDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.listDef = data["listDef"] ? ListDefDO.fromJS(data["listDef"]) : <any>null;
            if (data["listItems"] && data["listItems"].constructor === Array) {
                this.listItems = [];
                for (let item of data["listItems"])
                    this.listItems.push(ListItemDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListDO {
        data = typeof data === 'object' ? data : {};
        let result = new ListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listDef"] = this.listDef ? this.listDef.toJSON() : <any>null;
        if (this.listItems && this.listItems.constructor === Array) {
            data["listItems"] = [];
            for (let item of this.listItems)
                data["listItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListDO {
    listDef?: IListDefDO | null;
    listItems?: IListItemDO[] | null;
}

export class ListItemDO implements IListItemDO {
    itemID!: number;
    itemValue?: string | null;
    additionalNotes?: string | null;

    constructor(data?: IListItemDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemID = data["itemID"] !== undefined ? data["itemID"] : <any>null;
            this.itemValue = data["itemValue"] !== undefined ? data["itemValue"] : <any>null;
            this.additionalNotes = data["additionalNotes"] !== undefined ? data["additionalNotes"] : <any>null;
        }
    }

    static fromJS(data: any): ListItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemID"] = this.itemID !== undefined ? this.itemID : <any>null;
        data["itemValue"] = this.itemValue !== undefined ? this.itemValue : <any>null;
        data["additionalNotes"] = this.additionalNotes !== undefined ? this.additionalNotes : <any>null;
        return data; 
    }
}

export interface IListItemDO {
    itemID: number;
    itemValue?: string | null;
    additionalNotes?: string | null;
}

export class GetAllLocationParams implements IGetAllLocationParams {
    nameStartsWith?: string | null;

    constructor(data?: IGetAllLocationParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nameStartsWith = data["nameStartsWith"] !== undefined ? data["nameStartsWith"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllLocationParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllLocationParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nameStartsWith"] = this.nameStartsWith !== undefined ? this.nameStartsWith : <any>null;
        return data; 
    }
}

export interface IGetAllLocationParams {
    nameStartsWith?: string | null;
}

export class APIResponseOfGetAllLocationResult extends ProvideErrorMessage implements IAPIResponseOfGetAllLocationResult {
    data?: GetAllLocationResult | null;

    constructor(data?: IAPIResponseOfGetAllLocationResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllLocationResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllLocationResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllLocationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllLocationResult extends IProvideErrorMessage {
    data?: IGetAllLocationResult | null;
}

export class GetAllLocationResult extends ProvideErrorMessage implements IGetAllLocationResult {
    results?: LocationInfo[] | null;

    constructor(data?: IGetAllLocationResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(LocationInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllLocationResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllLocationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllLocationResult extends IProvideErrorMessage {
    results?: ILocationInfo[] | null;
}

export class LocationInfo implements ILocationInfo {
    locationId!: number;
    name?: string | null;

    constructor(data?: ILocationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): LocationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LocationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ILocationInfo {
    locationId: number;
    name?: string | null;
}

export class APIResponseOfLocationRoomsResult extends ProvideErrorMessage implements IAPIResponseOfLocationRoomsResult {
    data?: LocationRoomsResult | null;

    constructor(data?: IAPIResponseOfLocationRoomsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? LocationRoomsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfLocationRoomsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfLocationRoomsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfLocationRoomsResult extends IProvideErrorMessage {
    data?: ILocationRoomsResult | null;
}

export class LocationRoomsResult extends ProvideErrorMessage implements ILocationRoomsResult {
    rooms?: RoomDO[] | null;

    constructor(data?: ILocationRoomsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["rooms"] && data["rooms"].constructor === Array) {
                this.rooms = [];
                for (let item of data["rooms"])
                    this.rooms.push(RoomDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocationRoomsResult {
        data = typeof data === 'object' ? data : {};
        let result = new LocationRoomsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.rooms && this.rooms.constructor === Array) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ILocationRoomsResult extends IProvideErrorMessage {
    rooms?: IRoomDO[] | null;
}

export class RoomDO implements IRoomDO {
    locationId!: number;
    roomId!: number;
    roomName?: string | null;
    roomAvailabilities?: RoomAvailable[] | null;

    constructor(data?: IRoomDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.roomAvailabilities) {
                this.roomAvailabilities = [];
                for (let i = 0; i < data.roomAvailabilities.length; i++) {
                    let item = data.roomAvailabilities[i];
                    this.roomAvailabilities[i] = item && !(<any>item).toJSON ? new RoomAvailable(item) : <RoomAvailable>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.roomId = data["roomId"] !== undefined ? data["roomId"] : <any>null;
            this.roomName = data["roomName"] !== undefined ? data["roomName"] : <any>null;
            if (data["roomAvailabilities"] && data["roomAvailabilities"].constructor === Array) {
                this.roomAvailabilities = [];
                for (let item of data["roomAvailabilities"])
                    this.roomAvailabilities.push(RoomAvailable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomDO {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        if (this.roomAvailabilities && this.roomAvailabilities.constructor === Array) {
            data["roomAvailabilities"] = [];
            for (let item of this.roomAvailabilities)
                data["roomAvailabilities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomDO {
    locationId: number;
    roomId: number;
    roomName?: string | null;
    roomAvailabilities?: IRoomAvailable[] | null;
}

export class RoomAvailable implements IRoomAvailable {
    weekDayId!: number;
    openHours!: number;
    openMinutes!: number;
    durationMinutes!: number;
    closeHours!: number;
    closeMinutes!: number;

    constructor(data?: IRoomAvailable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.weekDayId = data["weekDayId"] !== undefined ? data["weekDayId"] : <any>null;
            this.openHours = data["openHours"] !== undefined ? data["openHours"] : <any>null;
            this.openMinutes = data["openMinutes"] !== undefined ? data["openMinutes"] : <any>null;
            this.durationMinutes = data["durationMinutes"] !== undefined ? data["durationMinutes"] : <any>null;
            this.closeHours = data["closeHours"] !== undefined ? data["closeHours"] : <any>null;
            this.closeMinutes = data["closeMinutes"] !== undefined ? data["closeMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): RoomAvailable {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAvailable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weekDayId"] = this.weekDayId !== undefined ? this.weekDayId : <any>null;
        data["openHours"] = this.openHours !== undefined ? this.openHours : <any>null;
        data["openMinutes"] = this.openMinutes !== undefined ? this.openMinutes : <any>null;
        data["durationMinutes"] = this.durationMinutes !== undefined ? this.durationMinutes : <any>null;
        data["closeHours"] = this.closeHours !== undefined ? this.closeHours : <any>null;
        data["closeMinutes"] = this.closeMinutes !== undefined ? this.closeMinutes : <any>null;
        return data; 
    }
}

export interface IRoomAvailable {
    weekDayId: number;
    openHours: number;
    openMinutes: number;
    durationMinutes: number;
    closeHours: number;
    closeMinutes: number;
}

export class APIResponseOfListOfLocationRoomDO extends ProvideErrorMessage implements IAPIResponseOfListOfLocationRoomDO {
    data?: LocationRoomDO[] | null;

    constructor(data?: IAPIResponseOfListOfLocationRoomDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(LocationRoomDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfLocationRoomDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfLocationRoomDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfLocationRoomDO extends IProvideErrorMessage {
    data?: ILocationRoomDO[] | null;
}

export class LocationRoomDO implements ILocationRoomDO {
    locationId!: number;
    locationName?: string | null;
    roomId!: number;
    roomName?: string | null;
    displayName?: string | null;

    constructor(data?: ILocationRoomDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.locationName = data["locationName"] !== undefined ? data["locationName"] : <any>null;
            this.roomId = data["roomId"] !== undefined ? data["roomId"] : <any>null;
            this.roomName = data["roomName"] !== undefined ? data["roomName"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
        }
    }

    static fromJS(data: any): LocationRoomDO {
        data = typeof data === 'object' ? data : {};
        let result = new LocationRoomDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["locationName"] = this.locationName !== undefined ? this.locationName : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        return data; 
    }
}

export interface ILocationRoomDO {
    locationId: number;
    locationName?: string | null;
    roomId: number;
    roomName?: string | null;
    displayName?: string | null;
}

export class APIResponseOfListOfLocationInfo extends ProvideErrorMessage implements IAPIResponseOfListOfLocationInfo {
    data?: LocationInfo[] | null;

    constructor(data?: IAPIResponseOfListOfLocationInfo) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(LocationInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfLocationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfLocationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfLocationInfo extends IProvideErrorMessage {
    data?: ILocationInfo[] | null;
}

export class ClientLogEvent implements IClientLogEvent {
    level!: LogEventLevel;
    message?: string | null;
    correlationID?: string | null;
    application?: string | null;

    constructor(data?: IClientLogEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"] !== undefined ? data["level"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.correlationID = data["correlationID"] !== undefined ? data["correlationID"] : <any>null;
            this.application = data["application"] !== undefined ? data["application"] : <any>null;
        }
    }

    static fromJS(data: any): ClientLogEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ClientLogEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["correlationID"] = this.correlationID !== undefined ? this.correlationID : <any>null;
        data["application"] = this.application !== undefined ? this.application : <any>null;
        return data; 
    }
}

export interface IClientLogEvent {
    level: LogEventLevel;
    message?: string | null;
    correlationID?: string | null;
    application?: string | null;
}

/** Specifies the meaning and relative importance of a log event. */
export enum LogEventLevel {
    Verbose = 0, 
    Debug = 1, 
    Information = 2, 
    Warning = 3, 
    Error = 4, 
    Fatal = 5, 
}

export class AddOrUpdateResultsMapping_LungFunctionDataRawParams extends BaseRequestParams implements IAddOrUpdateResultsMapping_LungFunctionDataRawParams {
    id!: number;
    dateFileImported?: Date | null;
    dob?: Date | null;
    externalId?: string | null;
    filename?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    processed?: boolean | null;
    tests?: string | null;
    visitDateLocalTime?: Date | null;
    zippedXMLFileContents?: string | null;
    stringFileContents?: string | null;

    constructor(data?: IAddOrUpdateResultsMapping_LungFunctionDataRawParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.dateFileImported = data["dateFileImported"] ? new Date(data["dateFileImported"].toString()) : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
            this.externalId = data["externalId"] !== undefined ? data["externalId"] : <any>null;
            this.filename = data["filename"] !== undefined ? data["filename"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.processed = data["processed"] !== undefined ? data["processed"] : <any>null;
            this.tests = data["tests"] !== undefined ? data["tests"] : <any>null;
            this.visitDateLocalTime = data["visitDateLocalTime"] ? new Date(data["visitDateLocalTime"].toString()) : <any>null;
            this.zippedXMLFileContents = data["zippedXMLFileContents"] !== undefined ? data["zippedXMLFileContents"] : <any>null;
            this.stringFileContents = data["stringFileContents"] !== undefined ? data["stringFileContents"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateResultsMapping_LungFunctionDataRawParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateResultsMapping_LungFunctionDataRawParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dateFileImported"] = this.dateFileImported ? this.dateFileImported.toISOString() : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["processed"] = this.processed !== undefined ? this.processed : <any>null;
        data["tests"] = this.tests !== undefined ? this.tests : <any>null;
        data["visitDateLocalTime"] = this.visitDateLocalTime ? this.visitDateLocalTime.toISOString() : <any>null;
        data["zippedXMLFileContents"] = this.zippedXMLFileContents !== undefined ? this.zippedXMLFileContents : <any>null;
        data["stringFileContents"] = this.stringFileContents !== undefined ? this.stringFileContents : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateResultsMapping_LungFunctionDataRawParams extends IBaseRequestParams {
    id: number;
    dateFileImported?: Date | null;
    dob?: Date | null;
    externalId?: string | null;
    filename?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    processed?: boolean | null;
    tests?: string | null;
    visitDateLocalTime?: Date | null;
    zippedXMLFileContents?: string | null;
    stringFileContents?: string | null;
}

export class AddOrUpdateResultsMapping_LungFunctionDataRaw extends AddOrUpdateResultsMapping_LungFunctionDataRawParams implements IAddOrUpdateResultsMapping_LungFunctionDataRaw {

    constructor(data?: IAddOrUpdateResultsMapping_LungFunctionDataRaw) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateResultsMapping_LungFunctionDataRaw {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateResultsMapping_LungFunctionDataRaw();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateResultsMapping_LungFunctionDataRaw extends IAddOrUpdateResultsMapping_LungFunctionDataRawParams {
}

export class APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult {
    data?: AddOrUpdateResultsMapping_LungFunctionDataRawResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateResultsMapping_LungFunctionDataRawResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateResultsMapping_LungFunctionDataRawResult extends IProvideErrorMessage {
    data?: IAddOrUpdateResultsMapping_LungFunctionDataRawResult | null;
}

export class AddOrUpdateResultsMapping_LungFunctionDataRawResult extends ProvideErrorMessage implements IAddOrUpdateResultsMapping_LungFunctionDataRawResult {
    id?: string | null;
    iD_Number!: number;

    constructor(data?: IAddOrUpdateResultsMapping_LungFunctionDataRawResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.iD_Number = data["iD_Number"] !== undefined ? data["iD_Number"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateResultsMapping_LungFunctionDataRawResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateResultsMapping_LungFunctionDataRawResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["iD_Number"] = this.iD_Number !== undefined ? this.iD_Number : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateResultsMapping_LungFunctionDataRawResult extends IProvideErrorMessage {
    id?: string | null;
    iD_Number: number;
}

export class AddOrUpdateNoteParams extends BaseRequestParams implements IAddOrUpdateNoteParams {
    note_ID!: number;
    noteText?: string | null;
    noteAttribute?: string | null;
    archive!: boolean;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    dateCreated?: Date | null;

    constructor(data?: IAddOrUpdateNoteParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.noteText = data["noteText"] !== undefined ? data["noteText"] : <any>null;
            this.noteAttribute = data["noteAttribute"] !== undefined ? data["noteAttribute"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateNoteParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateNoteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["noteText"] = this.noteText !== undefined ? this.noteText : <any>null;
        data["noteAttribute"] = this.noteAttribute !== undefined ? this.noteAttribute : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateNoteParams extends IBaseRequestParams {
    note_ID: number;
    noteText?: string | null;
    noteAttribute?: string | null;
    archive: boolean;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    dateCreated?: Date | null;
}

export class AddOrUpdateNote extends AddOrUpdateNoteParams implements IAddOrUpdateNote {

    constructor(data?: IAddOrUpdateNote) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateNote {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateNote extends IAddOrUpdateNoteParams {
}

export class APIResponseOfAddOrUpdateNoteResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateNoteResult {
    data?: AddOrUpdateNoteResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateNoteResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateNoteResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateNoteResult extends IProvideErrorMessage {
    data?: IAddOrUpdateNoteResult | null;
}

export class AddOrUpdateNoteResult extends ProvideErrorMessage implements IAddOrUpdateNoteResult {
    note_ID!: number;

    constructor(data?: IAddOrUpdateNoteResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateNoteResult extends IProvideErrorMessage {
    note_ID: number;
}

export class APIResponseOfListOfNZBillingFeeTableDO extends ProvideErrorMessage implements IAPIResponseOfListOfNZBillingFeeTableDO {
    data?: NZBillingFeeTableDO[] | null;

    constructor(data?: IAPIResponseOfListOfNZBillingFeeTableDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(NZBillingFeeTableDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfNZBillingFeeTableDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfNZBillingFeeTableDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfNZBillingFeeTableDO extends IProvideErrorMessage {
    data?: INZBillingFeeTableDO[] | null;
}

export class NZBillingFeeTableDO implements INZBillingFeeTableDO {
    feeTable_ID!: number;
    feeTableName?: string | null;
    feeTableEffective!: Date;
    feeTableUpdated!: Date;
    userManaged!: boolean;
    userLastModified?: string | null;

    constructor(data?: INZBillingFeeTableDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.feeTableName = data["feeTableName"] !== undefined ? data["feeTableName"] : <any>null;
            this.feeTableEffective = data["feeTableEffective"] ? new Date(data["feeTableEffective"].toString()) : <any>null;
            this.feeTableUpdated = data["feeTableUpdated"] ? new Date(data["feeTableUpdated"].toString()) : <any>null;
            this.userManaged = data["userManaged"] !== undefined ? data["userManaged"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
        }
    }

    static fromJS(data: any): NZBillingFeeTableDO {
        data = typeof data === 'object' ? data : {};
        let result = new NZBillingFeeTableDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["feeTableName"] = this.feeTableName !== undefined ? this.feeTableName : <any>null;
        data["feeTableEffective"] = this.feeTableEffective ? this.feeTableEffective.toISOString() : <any>null;
        data["feeTableUpdated"] = this.feeTableUpdated ? this.feeTableUpdated.toISOString() : <any>null;
        data["userManaged"] = this.userManaged !== undefined ? this.userManaged : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        return data; 
    }
}

export interface INZBillingFeeTableDO {
    feeTable_ID: number;
    feeTableName?: string | null;
    feeTableEffective: Date;
    feeTableUpdated: Date;
    userManaged: boolean;
    userLastModified?: string | null;
}

export class APIResponseOfNZBillingFeeTableDO extends ProvideErrorMessage implements IAPIResponseOfNZBillingFeeTableDO {
    data?: NZBillingFeeTableDO | null;

    constructor(data?: IAPIResponseOfNZBillingFeeTableDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? NZBillingFeeTableDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfNZBillingFeeTableDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfNZBillingFeeTableDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfNZBillingFeeTableDO extends IProvideErrorMessage {
    data?: INZBillingFeeTableDO | null;
}

export class APIResponseOfListOfString extends ProvideErrorMessage implements IAPIResponseOfListOfString {
    data?: string[] | null;

    constructor(data?: IAPIResponseOfListOfString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(item);
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfString {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfString extends IProvideErrorMessage {
    data?: string[] | null;
}

export class APIResponseOfListOfNZBillingFeeDO extends ProvideErrorMessage implements IAPIResponseOfListOfNZBillingFeeDO {
    data?: NZBillingFeeDO[] | null;

    constructor(data?: IAPIResponseOfListOfNZBillingFeeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(NZBillingFeeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfNZBillingFeeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfNZBillingFeeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfNZBillingFeeDO extends IProvideErrorMessage {
    data?: INZBillingFeeDO[] | null;
}

export class NZBillingFeeDO implements INZBillingFeeDO {
    feeTable_ID!: number;
    itemNum?: string | null;
    feeInPatient!: number;
    feePercentInPatient!: number;
    feeOutPatient!: number;
    feePercentOutPatient!: number;
    amaCode?: string | null;
    healthFundCode?: string | null;

    constructor(data?: INZBillingFeeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.itemNum = data["itemNum"] !== undefined ? data["itemNum"] : <any>null;
            this.feeInPatient = data["feeInPatient"] !== undefined ? data["feeInPatient"] : <any>null;
            this.feePercentInPatient = data["feePercentInPatient"] !== undefined ? data["feePercentInPatient"] : <any>null;
            this.feeOutPatient = data["feeOutPatient"] !== undefined ? data["feeOutPatient"] : <any>null;
            this.feePercentOutPatient = data["feePercentOutPatient"] !== undefined ? data["feePercentOutPatient"] : <any>null;
            this.amaCode = data["amaCode"] !== undefined ? data["amaCode"] : <any>null;
            this.healthFundCode = data["healthFundCode"] !== undefined ? data["healthFundCode"] : <any>null;
        }
    }

    static fromJS(data: any): NZBillingFeeDO {
        data = typeof data === 'object' ? data : {};
        let result = new NZBillingFeeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["itemNum"] = this.itemNum !== undefined ? this.itemNum : <any>null;
        data["feeInPatient"] = this.feeInPatient !== undefined ? this.feeInPatient : <any>null;
        data["feePercentInPatient"] = this.feePercentInPatient !== undefined ? this.feePercentInPatient : <any>null;
        data["feeOutPatient"] = this.feeOutPatient !== undefined ? this.feeOutPatient : <any>null;
        data["feePercentOutPatient"] = this.feePercentOutPatient !== undefined ? this.feePercentOutPatient : <any>null;
        data["amaCode"] = this.amaCode !== undefined ? this.amaCode : <any>null;
        data["healthFundCode"] = this.healthFundCode !== undefined ? this.healthFundCode : <any>null;
        return data; 
    }
}

export interface INZBillingFeeDO {
    feeTable_ID: number;
    itemNum?: string | null;
    feeInPatient: number;
    feePercentInPatient: number;
    feeOutPatient: number;
    feePercentOutPatient: number;
    amaCode?: string | null;
    healthFundCode?: string | null;
}

export class APIResponseOfNZBillingFeeDO extends ProvideErrorMessage implements IAPIResponseOfNZBillingFeeDO {
    data?: NZBillingFeeDO | null;

    constructor(data?: IAPIResponseOfNZBillingFeeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? NZBillingFeeDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfNZBillingFeeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfNZBillingFeeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfNZBillingFeeDO extends IProvideErrorMessage {
    data?: INZBillingFeeDO | null;
}

export class OS_EntryParams extends BaseRequestParams implements IOS_EntryParams {
    oS_ID!: number;
    source?: string | null;
    patient_ID!: number;
    oS_Status?: string | null;
    dateCreated!: Date;
    userCreated?: string | null;
    oS_Description?: string | null;
    lastUpdated!: Date;
    referenceDate!: Date;
    location_ID?: number | null;

    constructor(data?: IOS_EntryParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.oS_Status = data["oS_Status"] !== undefined ? data["oS_Status"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.oS_Description = data["oS_Description"] !== undefined ? data["oS_Description"] : <any>null;
            this.lastUpdated = data["lastUpdated"] ? new Date(data["lastUpdated"].toString()) : <any>null;
            this.referenceDate = data["referenceDate"] ? new Date(data["referenceDate"].toString()) : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
        }
    }

    static fromJS(data: any): OS_EntryParams {
        data = typeof data === 'object' ? data : {};
        let result = new OS_EntryParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["oS_Status"] = this.oS_Status !== undefined ? this.oS_Status : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["oS_Description"] = this.oS_Description !== undefined ? this.oS_Description : <any>null;
        data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>null;
        data["referenceDate"] = this.referenceDate ? this.referenceDate.toISOString() : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IOS_EntryParams extends IBaseRequestParams {
    oS_ID: number;
    source?: string | null;
    patient_ID: number;
    oS_Status?: string | null;
    dateCreated: Date;
    userCreated?: string | null;
    oS_Description?: string | null;
    lastUpdated: Date;
    referenceDate: Date;
    location_ID?: number | null;
}

export class OS_MemberParams extends BaseRequestParams implements IOS_MemberParams {
    oS_Member_ID!: number;
    oS_ID!: number;
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;

    constructor(data?: IOS_MemberParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_Member_ID = data["oS_Member_ID"] !== undefined ? data["oS_Member_ID"] : <any>null;
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.bookingGroup_ID = data["bookingGroup_ID"] !== undefined ? data["bookingGroup_ID"] : <any>null;
            this.container_ID = data["container_ID"] !== undefined ? data["container_ID"] : <any>null;
            this.order_ID = data["order_ID"] !== undefined ? data["order_ID"] : <any>null;
            this.incomingOrder_ID = data["incomingOrder_ID"] !== undefined ? data["incomingOrder_ID"] : <any>null;
            this.triageBooking_ID = data["triageBooking_ID"] !== undefined ? data["triageBooking_ID"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
        }
    }

    static fromJS(data: any): OS_MemberParams {
        data = typeof data === 'object' ? data : {};
        let result = new OS_MemberParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_Member_ID"] = this.oS_Member_ID !== undefined ? this.oS_Member_ID : <any>null;
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["bookingGroup_ID"] = this.bookingGroup_ID !== undefined ? this.bookingGroup_ID : <any>null;
        data["container_ID"] = this.container_ID !== undefined ? this.container_ID : <any>null;
        data["order_ID"] = this.order_ID !== undefined ? this.order_ID : <any>null;
        data["incomingOrder_ID"] = this.incomingOrder_ID !== undefined ? this.incomingOrder_ID : <any>null;
        data["triageBooking_ID"] = this.triageBooking_ID !== undefined ? this.triageBooking_ID : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IOS_MemberParams extends IBaseRequestParams {
    oS_Member_ID: number;
    oS_ID: number;
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;
}

export class FindOccasionOfServiceParams extends CorrelatableRequestParams implements IFindOccasionOfServiceParams {
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;

    constructor(data?: IFindOccasionOfServiceParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.bookingGroup_ID = data["bookingGroup_ID"] !== undefined ? data["bookingGroup_ID"] : <any>null;
            this.container_ID = data["container_ID"] !== undefined ? data["container_ID"] : <any>null;
            this.order_ID = data["order_ID"] !== undefined ? data["order_ID"] : <any>null;
            this.incomingOrder_ID = data["incomingOrder_ID"] !== undefined ? data["incomingOrder_ID"] : <any>null;
            this.triageBooking_ID = data["triageBooking_ID"] !== undefined ? data["triageBooking_ID"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
        }
    }

    static fromJS(data: any): FindOccasionOfServiceParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindOccasionOfServiceParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["bookingGroup_ID"] = this.bookingGroup_ID !== undefined ? this.bookingGroup_ID : <any>null;
        data["container_ID"] = this.container_ID !== undefined ? this.container_ID : <any>null;
        data["order_ID"] = this.order_ID !== undefined ? this.order_ID : <any>null;
        data["incomingOrder_ID"] = this.incomingOrder_ID !== undefined ? this.incomingOrder_ID : <any>null;
        data["triageBooking_ID"] = this.triageBooking_ID !== undefined ? this.triageBooking_ID : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindOccasionOfServiceParams extends ICorrelatableRequestParams {
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;
}

export class FindOccasionOfService extends FindOccasionOfServiceParams implements IFindOccasionOfService {

    constructor(data?: IFindOccasionOfService) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindOccasionOfService {
        data = typeof data === 'object' ? data : {};
        let result = new FindOccasionOfService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindOccasionOfService extends IFindOccasionOfServiceParams {
}

export class APIResponseOfFindOccasionOfServiceResult extends ProvideErrorMessage implements IAPIResponseOfFindOccasionOfServiceResult {
    data?: FindOccasionOfServiceResult | null;

    constructor(data?: IAPIResponseOfFindOccasionOfServiceResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindOccasionOfServiceResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindOccasionOfServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindOccasionOfServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindOccasionOfServiceResult extends IProvideErrorMessage {
    data?: IFindOccasionOfServiceResult | null;
}

export class FindOccasionOfServiceResult extends ProvideErrorMessage implements IFindOccasionOfServiceResult {
    oS_Member_ID!: number;
    oS_ID!: number;

    constructor(data?: IFindOccasionOfServiceResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_Member_ID = data["oS_Member_ID"] !== undefined ? data["oS_Member_ID"] : <any>null;
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
        }
    }

    static fromJS(data: any): FindOccasionOfServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindOccasionOfServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_Member_ID"] = this.oS_Member_ID !== undefined ? this.oS_Member_ID : <any>null;
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindOccasionOfServiceResult extends IProvideErrorMessage {
    oS_Member_ID: number;
    oS_ID: number;
}

export class AddOrUpdateOccasionOfServiceEntryParams extends BaseRequestParams implements IAddOrUpdateOccasionOfServiceEntryParams {
    oS_ID?: number | null;
    source?: string | null;
    patient_ID!: number;
    oS_Status?: string | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    oS_Description?: string | null;
    lastUpdated?: Date | null;
    referenceDate?: Date | null;
    location_ID?: number | null;

    constructor(data?: IAddOrUpdateOccasionOfServiceEntryParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.oS_Status = data["oS_Status"] !== undefined ? data["oS_Status"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.oS_Description = data["oS_Description"] !== undefined ? data["oS_Description"] : <any>null;
            this.lastUpdated = data["lastUpdated"] ? new Date(data["lastUpdated"].toString()) : <any>null;
            this.referenceDate = data["referenceDate"] ? new Date(data["referenceDate"].toString()) : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceEntryParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceEntryParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["oS_Status"] = this.oS_Status !== undefined ? this.oS_Status : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["oS_Description"] = this.oS_Description !== undefined ? this.oS_Description : <any>null;
        data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>null;
        data["referenceDate"] = this.referenceDate ? this.referenceDate.toISOString() : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceEntryParams extends IBaseRequestParams {
    oS_ID?: number | null;
    source?: string | null;
    patient_ID: number;
    oS_Status?: string | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    oS_Description?: string | null;
    lastUpdated?: Date | null;
    referenceDate?: Date | null;
    location_ID?: number | null;
}

export class AddOrUpdateOccasionOfServiceEntry extends AddOrUpdateOccasionOfServiceEntryParams implements IAddOrUpdateOccasionOfServiceEntry {

    constructor(data?: IAddOrUpdateOccasionOfServiceEntry) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceEntry extends IAddOrUpdateOccasionOfServiceEntryParams {
}

export class APIResponseOfAddOrUpdateOccasionOfServiceEntryResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateOccasionOfServiceEntryResult {
    data?: AddOrUpdateOccasionOfServiceEntryResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateOccasionOfServiceEntryResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateOccasionOfServiceEntryResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateOccasionOfServiceEntryResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateOccasionOfServiceEntryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateOccasionOfServiceEntryResult extends IProvideErrorMessage {
    data?: IAddOrUpdateOccasionOfServiceEntryResult | null;
}

export class AddOrUpdateOccasionOfServiceEntryResult extends ProvideErrorMessage implements IAddOrUpdateOccasionOfServiceEntryResult {
    oS_ID!: number;

    constructor(data?: IAddOrUpdateOccasionOfServiceEntryResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceEntryResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceEntryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceEntryResult extends IProvideErrorMessage {
    oS_ID: number;
}

export class AddOrUpdateOccasionOfServiceMemberParams extends BaseRequestParams implements IAddOrUpdateOccasionOfServiceMemberParams {
    oS_Member_ID?: number | null;
    oS_ID!: number;
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;

    constructor(data?: IAddOrUpdateOccasionOfServiceMemberParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_Member_ID = data["oS_Member_ID"] !== undefined ? data["oS_Member_ID"] : <any>null;
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.bookingGroup_ID = data["bookingGroup_ID"] !== undefined ? data["bookingGroup_ID"] : <any>null;
            this.container_ID = data["container_ID"] !== undefined ? data["container_ID"] : <any>null;
            this.order_ID = data["order_ID"] !== undefined ? data["order_ID"] : <any>null;
            this.incomingOrder_ID = data["incomingOrder_ID"] !== undefined ? data["incomingOrder_ID"] : <any>null;
            this.triageBooking_ID = data["triageBooking_ID"] !== undefined ? data["triageBooking_ID"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceMemberParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceMemberParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_Member_ID"] = this.oS_Member_ID !== undefined ? this.oS_Member_ID : <any>null;
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["bookingGroup_ID"] = this.bookingGroup_ID !== undefined ? this.bookingGroup_ID : <any>null;
        data["container_ID"] = this.container_ID !== undefined ? this.container_ID : <any>null;
        data["order_ID"] = this.order_ID !== undefined ? this.order_ID : <any>null;
        data["incomingOrder_ID"] = this.incomingOrder_ID !== undefined ? this.incomingOrder_ID : <any>null;
        data["triageBooking_ID"] = this.triageBooking_ID !== undefined ? this.triageBooking_ID : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceMemberParams extends IBaseRequestParams {
    oS_Member_ID?: number | null;
    oS_ID: number;
    admission_ID?: number | null;
    booking_ID?: number | null;
    bookingGroup_ID?: number | null;
    container_ID?: number | null;
    order_ID?: number | null;
    incomingOrder_ID?: number | null;
    triageBooking_ID?: number | null;
    referral_ID?: number | null;
}

export class AddOrUpdateOccasionOfServiceMember extends AddOrUpdateOccasionOfServiceMemberParams implements IAddOrUpdateOccasionOfServiceMember {

    constructor(data?: IAddOrUpdateOccasionOfServiceMember) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceMember {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceMember extends IAddOrUpdateOccasionOfServiceMemberParams {
}

export class APIResponseOfAddOrUpdateOccasionOfServiceMemberResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateOccasionOfServiceMemberResult {
    data?: AddOrUpdateOccasionOfServiceMemberResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateOccasionOfServiceMemberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateOccasionOfServiceMemberResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateOccasionOfServiceMemberResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateOccasionOfServiceMemberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateOccasionOfServiceMemberResult extends IProvideErrorMessage {
    data?: IAddOrUpdateOccasionOfServiceMemberResult | null;
}

export class AddOrUpdateOccasionOfServiceMemberResult extends ProvideErrorMessage implements IAddOrUpdateOccasionOfServiceMemberResult {
    oS_Member_ID!: number;
    oS_ID!: number;

    constructor(data?: IAddOrUpdateOccasionOfServiceMemberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.oS_Member_ID = data["oS_Member_ID"] !== undefined ? data["oS_Member_ID"] : <any>null;
            this.oS_ID = data["oS_ID"] !== undefined ? data["oS_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateOccasionOfServiceMemberResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateOccasionOfServiceMemberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oS_Member_ID"] = this.oS_Member_ID !== undefined ? this.oS_Member_ID : <any>null;
        data["oS_ID"] = this.oS_ID !== undefined ? this.oS_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateOccasionOfServiceMemberResult extends IProvideErrorMessage {
    oS_Member_ID: number;
    oS_ID: number;
}

export class APIResponseOfListOfBookingTypeListDO extends ProvideErrorMessage implements IAPIResponseOfListOfBookingTypeListDO {
    data?: BookingTypeListDO[] | null;

    constructor(data?: IAPIResponseOfListOfBookingTypeListDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(BookingTypeListDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfBookingTypeListDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfBookingTypeListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfBookingTypeListDO extends IProvideErrorMessage {
    data?: IBookingTypeListDO[] | null;
}

export class BookingTypeListDO implements IBookingTypeListDO {
    bookingType_ID!: number;
    bookingType?: string | null;

    constructor(data?: IBookingTypeListDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingType_ID = data["bookingType_ID"] !== undefined ? data["bookingType_ID"] : <any>null;
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
        }
    }

    static fromJS(data: any): BookingTypeListDO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingTypeListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingType_ID"] = this.bookingType_ID !== undefined ? this.bookingType_ID : <any>null;
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        return data; 
    }
}

export interface IBookingTypeListDO {
    bookingType_ID: number;
    bookingType?: string | null;
}

export class APIResponseOfListOfDoctorsListDO extends ProvideErrorMessage implements IAPIResponseOfListOfDoctorsListDO {
    data?: DoctorsListDO[] | null;

    constructor(data?: IAPIResponseOfListOfDoctorsListDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(DoctorsListDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfDoctorsListDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfDoctorsListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfDoctorsListDO extends IProvideErrorMessage {
    data?: IDoctorsListDO[] | null;
}

export class DoctorsListDO implements IDoctorsListDO {
    doctor_ID!: number;
    doctor_Name?: string | null;

    constructor(data?: IDoctorsListDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.doctor_ID = data["doctor_ID"] !== undefined ? data["doctor_ID"] : <any>null;
            this.doctor_Name = data["doctor_Name"] !== undefined ? data["doctor_Name"] : <any>null;
        }
    }

    static fromJS(data: any): DoctorsListDO {
        data = typeof data === 'object' ? data : {};
        let result = new DoctorsListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctor_ID"] = this.doctor_ID !== undefined ? this.doctor_ID : <any>null;
        data["doctor_Name"] = this.doctor_Name !== undefined ? this.doctor_Name : <any>null;
        return data; 
    }
}

export interface IDoctorsListDO {
    doctor_ID: number;
    doctor_Name?: string | null;
}

export class APIResponseOfListOfLocationsListDO extends ProvideErrorMessage implements IAPIResponseOfListOfLocationsListDO {
    data?: LocationsListDO[] | null;

    constructor(data?: IAPIResponseOfListOfLocationsListDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(LocationsListDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfLocationsListDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfLocationsListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfLocationsListDO extends IProvideErrorMessage {
    data?: ILocationsListDO[] | null;
}

export class LocationsListDO implements ILocationsListDO {
    location_ID!: number;
    location?: string | null;

    constructor(data?: ILocationsListDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
        }
    }

    static fromJS(data: any): LocationsListDO {
        data = typeof data === 'object' ? data : {};
        let result = new LocationsListDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        return data; 
    }
}

export interface ILocationsListDO {
    location_ID: number;
    location?: string | null;
}

export class FindIncomingHeaderByOrderNumberParams extends CorrelatableRequestParams implements IFindIncomingHeaderByOrderNumberParams {
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;

    constructor(data?: IFindIncomingHeaderByOrderNumberParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.placerOrderEntityIdentifier = data["placerOrderEntityIdentifier"] !== undefined ? data["placerOrderEntityIdentifier"] : <any>null;
            this.placerOrderNamespaceID = data["placerOrderNamespaceID"] !== undefined ? data["placerOrderNamespaceID"] : <any>null;
        }
    }

    static fromJS(data: any): FindIncomingHeaderByOrderNumberParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByOrderNumberParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["placerOrderEntityIdentifier"] = this.placerOrderEntityIdentifier !== undefined ? this.placerOrderEntityIdentifier : <any>null;
        data["placerOrderNamespaceID"] = this.placerOrderNamespaceID !== undefined ? this.placerOrderNamespaceID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByOrderNumberParams extends ICorrelatableRequestParams {
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;
}

export class FindIncomingHeaderByOrderNumber extends FindIncomingHeaderByOrderNumberParams implements IFindIncomingHeaderByOrderNumber {

    constructor(data?: IFindIncomingHeaderByOrderNumber) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindIncomingHeaderByOrderNumber {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByOrderNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByOrderNumber extends IFindIncomingHeaderByOrderNumberParams {
}

export class APIResponseOfFindIncomingHeaderByOrderNumberResult extends ProvideErrorMessage implements IAPIResponseOfFindIncomingHeaderByOrderNumberResult {
    data?: FindIncomingHeaderByOrderNumberResult | null;

    constructor(data?: IAPIResponseOfFindIncomingHeaderByOrderNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindIncomingHeaderByOrderNumberResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindIncomingHeaderByOrderNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindIncomingHeaderByOrderNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindIncomingHeaderByOrderNumberResult extends IProvideErrorMessage {
    data?: IFindIncomingHeaderByOrderNumberResult | null;
}

export class FindIncomingHeaderByOrderNumberResult extends ProvideErrorMessage implements IFindIncomingHeaderByOrderNumberResult {
    incoming_ID!: number;

    constructor(data?: IFindIncomingHeaderByOrderNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
        }
    }

    static fromJS(data: any): FindIncomingHeaderByOrderNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByOrderNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByOrderNumberResult extends IProvideErrorMessage {
    incoming_ID: number;
}

export class FindIncomingHeaderByVisitNumberParams extends CorrelatableRequestParams implements IFindIncomingHeaderByVisitNumberParams {
    visitNumber?: string | null;

    constructor(data?: IFindIncomingHeaderByVisitNumberParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.visitNumber = data["visitNumber"] !== undefined ? data["visitNumber"] : <any>null;
        }
    }

    static fromJS(data: any): FindIncomingHeaderByVisitNumberParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByVisitNumberParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["visitNumber"] = this.visitNumber !== undefined ? this.visitNumber : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByVisitNumberParams extends ICorrelatableRequestParams {
    visitNumber?: string | null;
}

export class FindIncomingHeaderByVisitNumber extends FindIncomingHeaderByVisitNumberParams implements IFindIncomingHeaderByVisitNumber {

    constructor(data?: IFindIncomingHeaderByVisitNumber) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindIncomingHeaderByVisitNumber {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByVisitNumber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByVisitNumber extends IFindIncomingHeaderByVisitNumberParams {
}

export class APIResponseOfFindIncomingHeaderByVisitNumberResult extends ProvideErrorMessage implements IAPIResponseOfFindIncomingHeaderByVisitNumberResult {
    data?: FindIncomingHeaderByVisitNumberResult | null;

    constructor(data?: IAPIResponseOfFindIncomingHeaderByVisitNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindIncomingHeaderByVisitNumberResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindIncomingHeaderByVisitNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindIncomingHeaderByVisitNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindIncomingHeaderByVisitNumberResult extends IProvideErrorMessage {
    data?: IFindIncomingHeaderByVisitNumberResult | null;
}

export class FindIncomingHeaderByVisitNumberResult extends ProvideErrorMessage implements IFindIncomingHeaderByVisitNumberResult {
    incoming_ID!: number;

    constructor(data?: IFindIncomingHeaderByVisitNumberResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
        }
    }

    static fromJS(data: any): FindIncomingHeaderByVisitNumberResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindIncomingHeaderByVisitNumberResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindIncomingHeaderByVisitNumberResult extends IProvideErrorMessage {
    incoming_ID: number;
}

export class GetIncomingOrderParams extends CorrelatableRequestParams implements IGetIncomingOrderParams {
    incoming_ID?: string | null;

    constructor(data?: IGetIncomingOrderParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingOrderParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrderParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrderParams extends ICorrelatableRequestParams {
    incoming_ID?: string | null;
}

export class GetIncomingOrder extends GetIncomingOrderParams implements IGetIncomingOrder {

    constructor(data?: IGetIncomingOrder) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetIncomingOrder {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrder extends IGetIncomingOrderParams {
}

export class APIResponseOfGetIncomingOrderResult extends ProvideErrorMessage implements IAPIResponseOfGetIncomingOrderResult {
    data?: GetIncomingOrderResult | null;

    constructor(data?: IAPIResponseOfGetIncomingOrderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetIncomingOrderResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetIncomingOrderResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetIncomingOrderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetIncomingOrderResult extends IProvideErrorMessage {
    data?: IGetIncomingOrderResult | null;
}

export class GetIncomingOrderResult extends ProvideErrorMessage implements IGetIncomingOrderResult {
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    orderControl?: string | null;
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;
    placerGroupEntityIdentifier?: string | null;
    orderStatus?: string | null;
    startDateTime?: string | null;
    priority?: string | null;
    enteredByID?: string | null;
    enteredByFamilyName?: string | null;
    enteredByGivenName?: string | null;
    incomingOrderStatus?: number | null;
    lastProcessed?: Date | null;
    setID?: string | null;
    orderRequestIdentifier?: string | null;
    orderRequestText?: string | null;
    orderRequestCodingSystem?: string | null;
    orderRequestSegmentText?: string | null;
    actionRequired?: number | null;

    constructor(data?: IGetIncomingOrderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.orderControl = data["orderControl"] !== undefined ? data["orderControl"] : <any>null;
            this.placerOrderEntityIdentifier = data["placerOrderEntityIdentifier"] !== undefined ? data["placerOrderEntityIdentifier"] : <any>null;
            this.placerOrderNamespaceID = data["placerOrderNamespaceID"] !== undefined ? data["placerOrderNamespaceID"] : <any>null;
            this.placerGroupEntityIdentifier = data["placerGroupEntityIdentifier"] !== undefined ? data["placerGroupEntityIdentifier"] : <any>null;
            this.orderStatus = data["orderStatus"] !== undefined ? data["orderStatus"] : <any>null;
            this.startDateTime = data["startDateTime"] !== undefined ? data["startDateTime"] : <any>null;
            this.priority = data["priority"] !== undefined ? data["priority"] : <any>null;
            this.enteredByID = data["enteredByID"] !== undefined ? data["enteredByID"] : <any>null;
            this.enteredByFamilyName = data["enteredByFamilyName"] !== undefined ? data["enteredByFamilyName"] : <any>null;
            this.enteredByGivenName = data["enteredByGivenName"] !== undefined ? data["enteredByGivenName"] : <any>null;
            this.incomingOrderStatus = data["incomingOrderStatus"] !== undefined ? data["incomingOrderStatus"] : <any>null;
            this.lastProcessed = data["lastProcessed"] ? new Date(data["lastProcessed"].toString()) : <any>null;
            this.setID = data["setID"] !== undefined ? data["setID"] : <any>null;
            this.orderRequestIdentifier = data["orderRequestIdentifier"] !== undefined ? data["orderRequestIdentifier"] : <any>null;
            this.orderRequestText = data["orderRequestText"] !== undefined ? data["orderRequestText"] : <any>null;
            this.orderRequestCodingSystem = data["orderRequestCodingSystem"] !== undefined ? data["orderRequestCodingSystem"] : <any>null;
            this.orderRequestSegmentText = data["orderRequestSegmentText"] !== undefined ? data["orderRequestSegmentText"] : <any>null;
            this.actionRequired = data["actionRequired"] !== undefined ? data["actionRequired"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingOrderResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["orderControl"] = this.orderControl !== undefined ? this.orderControl : <any>null;
        data["placerOrderEntityIdentifier"] = this.placerOrderEntityIdentifier !== undefined ? this.placerOrderEntityIdentifier : <any>null;
        data["placerOrderNamespaceID"] = this.placerOrderNamespaceID !== undefined ? this.placerOrderNamespaceID : <any>null;
        data["placerGroupEntityIdentifier"] = this.placerGroupEntityIdentifier !== undefined ? this.placerGroupEntityIdentifier : <any>null;
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["startDateTime"] = this.startDateTime !== undefined ? this.startDateTime : <any>null;
        data["priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["enteredByID"] = this.enteredByID !== undefined ? this.enteredByID : <any>null;
        data["enteredByFamilyName"] = this.enteredByFamilyName !== undefined ? this.enteredByFamilyName : <any>null;
        data["enteredByGivenName"] = this.enteredByGivenName !== undefined ? this.enteredByGivenName : <any>null;
        data["incomingOrderStatus"] = this.incomingOrderStatus !== undefined ? this.incomingOrderStatus : <any>null;
        data["lastProcessed"] = this.lastProcessed ? this.lastProcessed.toISOString() : <any>null;
        data["setID"] = this.setID !== undefined ? this.setID : <any>null;
        data["orderRequestIdentifier"] = this.orderRequestIdentifier !== undefined ? this.orderRequestIdentifier : <any>null;
        data["orderRequestText"] = this.orderRequestText !== undefined ? this.orderRequestText : <any>null;
        data["orderRequestCodingSystem"] = this.orderRequestCodingSystem !== undefined ? this.orderRequestCodingSystem : <any>null;
        data["orderRequestSegmentText"] = this.orderRequestSegmentText !== undefined ? this.orderRequestSegmentText : <any>null;
        data["actionRequired"] = this.actionRequired !== undefined ? this.actionRequired : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrderResult extends IProvideErrorMessage {
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    orderControl?: string | null;
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;
    placerGroupEntityIdentifier?: string | null;
    orderStatus?: string | null;
    startDateTime?: string | null;
    priority?: string | null;
    enteredByID?: string | null;
    enteredByFamilyName?: string | null;
    enteredByGivenName?: string | null;
    incomingOrderStatus?: number | null;
    lastProcessed?: Date | null;
    setID?: string | null;
    orderRequestIdentifier?: string | null;
    orderRequestText?: string | null;
    orderRequestCodingSystem?: string | null;
    orderRequestSegmentText?: string | null;
    actionRequired?: number | null;
}

export class AddOrUpdateIncomingOrderParams extends BaseRequestParams implements IAddOrUpdateIncomingOrderParams {
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    orderControl?: string | null;
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;
    placerGroupEntityIdentifier?: string | null;
    orderStatus?: string | null;
    startDateTime?: string | null;
    priority?: string | null;
    enteredByID?: string | null;
    enteredByFamilyName?: string | null;
    enteredByGivenName?: string | null;
    incomingOrderStatus?: number | null;
    lastProcessed?: Date | null;
    setID?: string | null;
    orderRequestIdentifier?: string | null;
    orderRequestText?: string | null;
    orderRequestCodingSystem?: string | null;
    orderRequestSegmentText?: string | null;
    actionRequired?: number | null;
    dateTimeStart?: Date | null;

    constructor(data?: IAddOrUpdateIncomingOrderParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.orderControl = data["orderControl"] !== undefined ? data["orderControl"] : <any>null;
            this.placerOrderEntityIdentifier = data["placerOrderEntityIdentifier"] !== undefined ? data["placerOrderEntityIdentifier"] : <any>null;
            this.placerOrderNamespaceID = data["placerOrderNamespaceID"] !== undefined ? data["placerOrderNamespaceID"] : <any>null;
            this.placerGroupEntityIdentifier = data["placerGroupEntityIdentifier"] !== undefined ? data["placerGroupEntityIdentifier"] : <any>null;
            this.orderStatus = data["orderStatus"] !== undefined ? data["orderStatus"] : <any>null;
            this.startDateTime = data["startDateTime"] !== undefined ? data["startDateTime"] : <any>null;
            this.priority = data["priority"] !== undefined ? data["priority"] : <any>null;
            this.enteredByID = data["enteredByID"] !== undefined ? data["enteredByID"] : <any>null;
            this.enteredByFamilyName = data["enteredByFamilyName"] !== undefined ? data["enteredByFamilyName"] : <any>null;
            this.enteredByGivenName = data["enteredByGivenName"] !== undefined ? data["enteredByGivenName"] : <any>null;
            this.incomingOrderStatus = data["incomingOrderStatus"] !== undefined ? data["incomingOrderStatus"] : <any>null;
            this.lastProcessed = data["lastProcessed"] ? new Date(data["lastProcessed"].toString()) : <any>null;
            this.setID = data["setID"] !== undefined ? data["setID"] : <any>null;
            this.orderRequestIdentifier = data["orderRequestIdentifier"] !== undefined ? data["orderRequestIdentifier"] : <any>null;
            this.orderRequestText = data["orderRequestText"] !== undefined ? data["orderRequestText"] : <any>null;
            this.orderRequestCodingSystem = data["orderRequestCodingSystem"] !== undefined ? data["orderRequestCodingSystem"] : <any>null;
            this.orderRequestSegmentText = data["orderRequestSegmentText"] !== undefined ? data["orderRequestSegmentText"] : <any>null;
            this.actionRequired = data["actionRequired"] !== undefined ? data["actionRequired"] : <any>null;
            this.dateTimeStart = data["dateTimeStart"] ? new Date(data["dateTimeStart"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrderParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrderParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["orderControl"] = this.orderControl !== undefined ? this.orderControl : <any>null;
        data["placerOrderEntityIdentifier"] = this.placerOrderEntityIdentifier !== undefined ? this.placerOrderEntityIdentifier : <any>null;
        data["placerOrderNamespaceID"] = this.placerOrderNamespaceID !== undefined ? this.placerOrderNamespaceID : <any>null;
        data["placerGroupEntityIdentifier"] = this.placerGroupEntityIdentifier !== undefined ? this.placerGroupEntityIdentifier : <any>null;
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["startDateTime"] = this.startDateTime !== undefined ? this.startDateTime : <any>null;
        data["priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["enteredByID"] = this.enteredByID !== undefined ? this.enteredByID : <any>null;
        data["enteredByFamilyName"] = this.enteredByFamilyName !== undefined ? this.enteredByFamilyName : <any>null;
        data["enteredByGivenName"] = this.enteredByGivenName !== undefined ? this.enteredByGivenName : <any>null;
        data["incomingOrderStatus"] = this.incomingOrderStatus !== undefined ? this.incomingOrderStatus : <any>null;
        data["lastProcessed"] = this.lastProcessed ? this.lastProcessed.toISOString() : <any>null;
        data["setID"] = this.setID !== undefined ? this.setID : <any>null;
        data["orderRequestIdentifier"] = this.orderRequestIdentifier !== undefined ? this.orderRequestIdentifier : <any>null;
        data["orderRequestText"] = this.orderRequestText !== undefined ? this.orderRequestText : <any>null;
        data["orderRequestCodingSystem"] = this.orderRequestCodingSystem !== undefined ? this.orderRequestCodingSystem : <any>null;
        data["orderRequestSegmentText"] = this.orderRequestSegmentText !== undefined ? this.orderRequestSegmentText : <any>null;
        data["actionRequired"] = this.actionRequired !== undefined ? this.actionRequired : <any>null;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrderParams extends IBaseRequestParams {
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    orderControl?: string | null;
    placerOrderEntityIdentifier?: string | null;
    placerOrderNamespaceID?: string | null;
    placerGroupEntityIdentifier?: string | null;
    orderStatus?: string | null;
    startDateTime?: string | null;
    priority?: string | null;
    enteredByID?: string | null;
    enteredByFamilyName?: string | null;
    enteredByGivenName?: string | null;
    incomingOrderStatus?: number | null;
    lastProcessed?: Date | null;
    setID?: string | null;
    orderRequestIdentifier?: string | null;
    orderRequestText?: string | null;
    orderRequestCodingSystem?: string | null;
    orderRequestSegmentText?: string | null;
    actionRequired?: number | null;
    dateTimeStart?: Date | null;
}

export class AddOrUpdateIncomingOrder extends AddOrUpdateIncomingOrderParams implements IAddOrUpdateIncomingOrder {

    constructor(data?: IAddOrUpdateIncomingOrder) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrder {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrder extends IAddOrUpdateIncomingOrderParams {
}

export class APIResponseOfAddOrUpdateIncomingOrderResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateIncomingOrderResult {
    data?: AddOrUpdateIncomingOrderResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateIncomingOrderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateIncomingOrderResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateIncomingOrderResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateIncomingOrderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateIncomingOrderResult extends IProvideErrorMessage {
    data?: IAddOrUpdateIncomingOrderResult | null;
}

export class AddOrUpdateIncomingOrderResult extends ProvideErrorMessage implements IAddOrUpdateIncomingOrderResult {
    incoming_ID?: string | null;

    constructor(data?: IAddOrUpdateIncomingOrderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrderResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrderResult extends IProvideErrorMessage {
    incoming_ID?: string | null;
}

export class GetIncomingHeaderParams extends CorrelatableRequestParams implements IGetIncomingHeaderParams {
    incoming_ID?: string | null;

    constructor(data?: IGetIncomingHeaderParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingHeaderParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingHeaderParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingHeaderParams extends ICorrelatableRequestParams {
    incoming_ID?: string | null;
}

export class GetIncomingHeader extends GetIncomingHeaderParams implements IGetIncomingHeader {

    constructor(data?: IGetIncomingHeader) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetIncomingHeader {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingHeader extends IGetIncomingHeaderParams {
}

export class APIResponseOfGetIncomingHeaderResult extends ProvideErrorMessage implements IAPIResponseOfGetIncomingHeaderResult {
    data?: GetIncomingHeaderResult | null;

    constructor(data?: IAPIResponseOfGetIncomingHeaderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetIncomingHeaderResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetIncomingHeaderResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetIncomingHeaderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetIncomingHeaderResult extends IProvideErrorMessage {
    data?: IGetIncomingHeaderResult | null;
}

export class GetIncomingHeaderResult extends ProvideErrorMessage implements IGetIncomingHeaderResult {
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    sendingFacilityCode?: string | null;
    patient_ID!: number;
    patientClass?: string | null;
    pointOfCare?: string | null;
    room?: string | null;
    bed?: string | null;
    locationFacility?: string | null;
    attendingDoctorID?: string | null;
    attendingDoctorName?: string | null;
    patientType?: string | null;
    visitNumber?: string | null;
    admittingDoctorID?: string | null;
    admittingDoctorName?: string | null;
    referringDoctorID?: string | null;
    referringDoctorName?: string | null;
    consultingDoctorID?: string | null;
    consultingDoctorName?: string | null;
    message_Type?: string | null;
    remotePatient_ID?: string | null;

    constructor(data?: IGetIncomingHeaderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.sendingFacilityCode = data["sendingFacilityCode"] !== undefined ? data["sendingFacilityCode"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.patientClass = data["patientClass"] !== undefined ? data["patientClass"] : <any>null;
            this.pointOfCare = data["pointOfCare"] !== undefined ? data["pointOfCare"] : <any>null;
            this.room = data["room"] !== undefined ? data["room"] : <any>null;
            this.bed = data["bed"] !== undefined ? data["bed"] : <any>null;
            this.locationFacility = data["locationFacility"] !== undefined ? data["locationFacility"] : <any>null;
            this.attendingDoctorID = data["attendingDoctorID"] !== undefined ? data["attendingDoctorID"] : <any>null;
            this.attendingDoctorName = data["attendingDoctorName"] !== undefined ? data["attendingDoctorName"] : <any>null;
            this.patientType = data["patientType"] !== undefined ? data["patientType"] : <any>null;
            this.visitNumber = data["visitNumber"] !== undefined ? data["visitNumber"] : <any>null;
            this.admittingDoctorID = data["admittingDoctorID"] !== undefined ? data["admittingDoctorID"] : <any>null;
            this.admittingDoctorName = data["admittingDoctorName"] !== undefined ? data["admittingDoctorName"] : <any>null;
            this.referringDoctorID = data["referringDoctorID"] !== undefined ? data["referringDoctorID"] : <any>null;
            this.referringDoctorName = data["referringDoctorName"] !== undefined ? data["referringDoctorName"] : <any>null;
            this.consultingDoctorID = data["consultingDoctorID"] !== undefined ? data["consultingDoctorID"] : <any>null;
            this.consultingDoctorName = data["consultingDoctorName"] !== undefined ? data["consultingDoctorName"] : <any>null;
            this.message_Type = data["message_Type"] !== undefined ? data["message_Type"] : <any>null;
            this.remotePatient_ID = data["remotePatient_ID"] !== undefined ? data["remotePatient_ID"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingHeaderResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingHeaderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["sendingFacilityCode"] = this.sendingFacilityCode !== undefined ? this.sendingFacilityCode : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["patientClass"] = this.patientClass !== undefined ? this.patientClass : <any>null;
        data["pointOfCare"] = this.pointOfCare !== undefined ? this.pointOfCare : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        data["bed"] = this.bed !== undefined ? this.bed : <any>null;
        data["locationFacility"] = this.locationFacility !== undefined ? this.locationFacility : <any>null;
        data["attendingDoctorID"] = this.attendingDoctorID !== undefined ? this.attendingDoctorID : <any>null;
        data["attendingDoctorName"] = this.attendingDoctorName !== undefined ? this.attendingDoctorName : <any>null;
        data["patientType"] = this.patientType !== undefined ? this.patientType : <any>null;
        data["visitNumber"] = this.visitNumber !== undefined ? this.visitNumber : <any>null;
        data["admittingDoctorID"] = this.admittingDoctorID !== undefined ? this.admittingDoctorID : <any>null;
        data["admittingDoctorName"] = this.admittingDoctorName !== undefined ? this.admittingDoctorName : <any>null;
        data["referringDoctorID"] = this.referringDoctorID !== undefined ? this.referringDoctorID : <any>null;
        data["referringDoctorName"] = this.referringDoctorName !== undefined ? this.referringDoctorName : <any>null;
        data["consultingDoctorID"] = this.consultingDoctorID !== undefined ? this.consultingDoctorID : <any>null;
        data["consultingDoctorName"] = this.consultingDoctorName !== undefined ? this.consultingDoctorName : <any>null;
        data["message_Type"] = this.message_Type !== undefined ? this.message_Type : <any>null;
        data["remotePatient_ID"] = this.remotePatient_ID !== undefined ? this.remotePatient_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingHeaderResult extends IProvideErrorMessage {
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    sendingFacilityCode?: string | null;
    patient_ID: number;
    patientClass?: string | null;
    pointOfCare?: string | null;
    room?: string | null;
    bed?: string | null;
    locationFacility?: string | null;
    attendingDoctorID?: string | null;
    attendingDoctorName?: string | null;
    patientType?: string | null;
    visitNumber?: string | null;
    admittingDoctorID?: string | null;
    admittingDoctorName?: string | null;
    referringDoctorID?: string | null;
    referringDoctorName?: string | null;
    consultingDoctorID?: string | null;
    consultingDoctorName?: string | null;
    message_Type?: string | null;
    remotePatient_ID?: string | null;
}

export class AddOrUpdateIncomingHeaderParams extends BaseRequestParams implements IAddOrUpdateIncomingHeaderParams {
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    sendingFacilityCode?: string | null;
    patient_ID!: number;
    patientClass?: string | null;
    pointOfCare?: string | null;
    room?: string | null;
    bed?: string | null;
    locationFacility?: string | null;
    attendingDoctorID?: string | null;
    attendingDoctorName?: string | null;
    patientType?: string | null;
    visitNumber?: string | null;
    admittingDoctorID?: string | null;
    admittingDoctorName?: string | null;
    referringDoctorID?: string | null;
    referringDoctorName?: string | null;
    consultingDoctorID?: string | null;
    consultingDoctorName?: string | null;
    message_Type?: string | null;
    remotePatient_ID?: string | null;

    constructor(data?: IAddOrUpdateIncomingHeaderParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.sendingFacilityCode = data["sendingFacilityCode"] !== undefined ? data["sendingFacilityCode"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.patientClass = data["patientClass"] !== undefined ? data["patientClass"] : <any>null;
            this.pointOfCare = data["pointOfCare"] !== undefined ? data["pointOfCare"] : <any>null;
            this.room = data["room"] !== undefined ? data["room"] : <any>null;
            this.bed = data["bed"] !== undefined ? data["bed"] : <any>null;
            this.locationFacility = data["locationFacility"] !== undefined ? data["locationFacility"] : <any>null;
            this.attendingDoctorID = data["attendingDoctorID"] !== undefined ? data["attendingDoctorID"] : <any>null;
            this.attendingDoctorName = data["attendingDoctorName"] !== undefined ? data["attendingDoctorName"] : <any>null;
            this.patientType = data["patientType"] !== undefined ? data["patientType"] : <any>null;
            this.visitNumber = data["visitNumber"] !== undefined ? data["visitNumber"] : <any>null;
            this.admittingDoctorID = data["admittingDoctorID"] !== undefined ? data["admittingDoctorID"] : <any>null;
            this.admittingDoctorName = data["admittingDoctorName"] !== undefined ? data["admittingDoctorName"] : <any>null;
            this.referringDoctorID = data["referringDoctorID"] !== undefined ? data["referringDoctorID"] : <any>null;
            this.referringDoctorName = data["referringDoctorName"] !== undefined ? data["referringDoctorName"] : <any>null;
            this.consultingDoctorID = data["consultingDoctorID"] !== undefined ? data["consultingDoctorID"] : <any>null;
            this.consultingDoctorName = data["consultingDoctorName"] !== undefined ? data["consultingDoctorName"] : <any>null;
            this.message_Type = data["message_Type"] !== undefined ? data["message_Type"] : <any>null;
            this.remotePatient_ID = data["remotePatient_ID"] !== undefined ? data["remotePatient_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingHeaderParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingHeaderParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["sendingFacilityCode"] = this.sendingFacilityCode !== undefined ? this.sendingFacilityCode : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["patientClass"] = this.patientClass !== undefined ? this.patientClass : <any>null;
        data["pointOfCare"] = this.pointOfCare !== undefined ? this.pointOfCare : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        data["bed"] = this.bed !== undefined ? this.bed : <any>null;
        data["locationFacility"] = this.locationFacility !== undefined ? this.locationFacility : <any>null;
        data["attendingDoctorID"] = this.attendingDoctorID !== undefined ? this.attendingDoctorID : <any>null;
        data["attendingDoctorName"] = this.attendingDoctorName !== undefined ? this.attendingDoctorName : <any>null;
        data["patientType"] = this.patientType !== undefined ? this.patientType : <any>null;
        data["visitNumber"] = this.visitNumber !== undefined ? this.visitNumber : <any>null;
        data["admittingDoctorID"] = this.admittingDoctorID !== undefined ? this.admittingDoctorID : <any>null;
        data["admittingDoctorName"] = this.admittingDoctorName !== undefined ? this.admittingDoctorName : <any>null;
        data["referringDoctorID"] = this.referringDoctorID !== undefined ? this.referringDoctorID : <any>null;
        data["referringDoctorName"] = this.referringDoctorName !== undefined ? this.referringDoctorName : <any>null;
        data["consultingDoctorID"] = this.consultingDoctorID !== undefined ? this.consultingDoctorID : <any>null;
        data["consultingDoctorName"] = this.consultingDoctorName !== undefined ? this.consultingDoctorName : <any>null;
        data["message_Type"] = this.message_Type !== undefined ? this.message_Type : <any>null;
        data["remotePatient_ID"] = this.remotePatient_ID !== undefined ? this.remotePatient_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingHeaderParams extends IBaseRequestParams {
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    sendingFacilityCode?: string | null;
    patient_ID: number;
    patientClass?: string | null;
    pointOfCare?: string | null;
    room?: string | null;
    bed?: string | null;
    locationFacility?: string | null;
    attendingDoctorID?: string | null;
    attendingDoctorName?: string | null;
    patientType?: string | null;
    visitNumber?: string | null;
    admittingDoctorID?: string | null;
    admittingDoctorName?: string | null;
    referringDoctorID?: string | null;
    referringDoctorName?: string | null;
    consultingDoctorID?: string | null;
    consultingDoctorName?: string | null;
    message_Type?: string | null;
    remotePatient_ID?: string | null;
}

export class AddOrUpdateIncomingHeader extends AddOrUpdateIncomingHeaderParams implements IAddOrUpdateIncomingHeader {

    constructor(data?: IAddOrUpdateIncomingHeader) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingHeader {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingHeader extends IAddOrUpdateIncomingHeaderParams {
}

export class APIResponseOfAddOrUpdateIncomingHeaderResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateIncomingHeaderResult {
    data?: AddOrUpdateIncomingHeaderResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateIncomingHeaderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateIncomingHeaderResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateIncomingHeaderResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateIncomingHeaderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateIncomingHeaderResult extends IProvideErrorMessage {
    data?: IAddOrUpdateIncomingHeaderResult | null;
}

export class AddOrUpdateIncomingHeaderResult extends ProvideErrorMessage implements IAddOrUpdateIncomingHeaderResult {
    incoming_ID?: string | null;
    incoming_ID_Number!: number;

    constructor(data?: IAddOrUpdateIncomingHeaderResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.incoming_ID_Number = data["incoming_ID_Number"] !== undefined ? data["incoming_ID_Number"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingHeaderResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingHeaderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["incoming_ID_Number"] = this.incoming_ID_Number !== undefined ? this.incoming_ID_Number : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingHeaderResult extends IProvideErrorMessage {
    incoming_ID?: string | null;
    incoming_ID_Number: number;
}

export class GetIncomingOrder_OBXParams extends CorrelatableRequestParams implements IGetIncomingOrder_OBXParams {
    incoming_ID?: string | null;
    idx?: string | null;

    constructor(data?: IGetIncomingOrder_OBXParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.idx = data["idx"] !== undefined ? data["idx"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingOrder_OBXParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrder_OBXParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["idx"] = this.idx !== undefined ? this.idx : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrder_OBXParams extends ICorrelatableRequestParams {
    incoming_ID?: string | null;
    idx?: string | null;
}

export class GetIncomingOrder_OBX extends GetIncomingOrder_OBXParams implements IGetIncomingOrder_OBX {

    constructor(data?: IGetIncomingOrder_OBX) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetIncomingOrder_OBX {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrder_OBX();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrder_OBX extends IGetIncomingOrder_OBXParams {
}

export class APIResponseOfGetIncomingOrder_OBXResult extends ProvideErrorMessage implements IAPIResponseOfGetIncomingOrder_OBXResult {
    data?: GetIncomingOrder_OBXResult | null;

    constructor(data?: IAPIResponseOfGetIncomingOrder_OBXResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetIncomingOrder_OBXResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetIncomingOrder_OBXResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetIncomingOrder_OBXResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetIncomingOrder_OBXResult extends IProvideErrorMessage {
    data?: IGetIncomingOrder_OBXResult | null;
}

export class GetIncomingOrder_OBXResult extends ProvideErrorMessage implements IGetIncomingOrder_OBXResult {
    incomingOrder_OBX_ID!: number;
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    idx!: number;
    obX_F1_C0?: string | null;
    obX_F1_C1?: string | null;
    obX_F2_C0?: string | null;
    obX_F2_C1?: string | null;
    obX_F3_C0?: string | null;
    obX_F3_C1?: string | null;
    obX_F3_C2?: string | null;
    obX_F3_C3?: string | null;
    obX_F3_C4?: string | null;
    obX_F3_C5?: string | null;
    obX_F3_C6?: string | null;
    obX_F4_C0?: string | null;
    obX_F4_C1?: string | null;
    obX_RESULTDATA?: string | null;
    obX_F6_C0?: string | null;
    obX_F6_C1?: string | null;
    obX_F6_C2?: string | null;
    obX_F6_C3?: string | null;
    obX_F6_C4?: string | null;
    obX_F6_C5?: string | null;
    obX_F6_C6?: string | null;
    obX_F7_C0?: string | null;
    obX_F7_C1?: string | null;
    obX_F8_C0?: string | null;
    obX_F8_C1?: string | null;
    obX_F9_C0?: string | null;
    obX_F9_C1?: string | null;
    obX_F10_C0?: string | null;
    obX_F10_C1?: string | null;
    obX_F11_C0?: string | null;
    obX_F11_C1?: string | null;
    obX_F12_C0?: string | null;
    obX_F12_C1?: string | null;
    obX_F12_C2?: string | null;
    obX_F13_C0?: string | null;
    obX_F13_C1?: string | null;
    obX_F14_C0?: string | null;
    obX_F14_C1?: string | null;
    obX_F14_C2?: string | null;
    obX_F15_C0?: string | null;
    obX_F15_C1?: string | null;
    obX_F15_C2?: string | null;
    obX_F15_C3?: string | null;
    obX_F15_C4?: string | null;
    obX_F15_C5?: string | null;
    obX_F15_C6?: string | null;
    obX_F16_C0?: string | null;
    obX_F16_C1?: string | null;
    obX_F16_C2?: string | null;
    obX_F16_C3?: string | null;
    obX_F16_C4?: string | null;
    obX_F16_C5?: string | null;
    obX_F16_C6?: string | null;
    obX_F16_C7?: string | null;
    obX_F17_C0?: string | null;
    obX_F17_C1?: string | null;
    obX_F17_C2?: string | null;
    obX_F17_C3?: string | null;
    obX_F17_C4?: string | null;
    obX_F17_C5?: string | null;
    obX_F17_C6?: string | null;
    obX_F18_C0?: string | null;
    obX_F18_C1?: string | null;
    obX_F18_C2?: string | null;
    obX_F18_C3?: string | null;
    obX_F18_C4?: string | null;
    obX_F19_C0?: string | null;
    obX_F19_C1?: string | null;
    obX_F19_C2?: string | null;

    constructor(data?: IGetIncomingOrder_OBXResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incomingOrder_OBX_ID = data["incomingOrder_OBX_ID"] !== undefined ? data["incomingOrder_OBX_ID"] : <any>null;
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.idx = data["idx"] !== undefined ? data["idx"] : <any>null;
            this.obX_F1_C0 = data["obX_F1_C0"] !== undefined ? data["obX_F1_C0"] : <any>null;
            this.obX_F1_C1 = data["obX_F1_C1"] !== undefined ? data["obX_F1_C1"] : <any>null;
            this.obX_F2_C0 = data["obX_F2_C0"] !== undefined ? data["obX_F2_C0"] : <any>null;
            this.obX_F2_C1 = data["obX_F2_C1"] !== undefined ? data["obX_F2_C1"] : <any>null;
            this.obX_F3_C0 = data["obX_F3_C0"] !== undefined ? data["obX_F3_C0"] : <any>null;
            this.obX_F3_C1 = data["obX_F3_C1"] !== undefined ? data["obX_F3_C1"] : <any>null;
            this.obX_F3_C2 = data["obX_F3_C2"] !== undefined ? data["obX_F3_C2"] : <any>null;
            this.obX_F3_C3 = data["obX_F3_C3"] !== undefined ? data["obX_F3_C3"] : <any>null;
            this.obX_F3_C4 = data["obX_F3_C4"] !== undefined ? data["obX_F3_C4"] : <any>null;
            this.obX_F3_C5 = data["obX_F3_C5"] !== undefined ? data["obX_F3_C5"] : <any>null;
            this.obX_F3_C6 = data["obX_F3_C6"] !== undefined ? data["obX_F3_C6"] : <any>null;
            this.obX_F4_C0 = data["obX_F4_C0"] !== undefined ? data["obX_F4_C0"] : <any>null;
            this.obX_F4_C1 = data["obX_F4_C1"] !== undefined ? data["obX_F4_C1"] : <any>null;
            this.obX_RESULTDATA = data["obX_RESULTDATA"] !== undefined ? data["obX_RESULTDATA"] : <any>null;
            this.obX_F6_C0 = data["obX_F6_C0"] !== undefined ? data["obX_F6_C0"] : <any>null;
            this.obX_F6_C1 = data["obX_F6_C1"] !== undefined ? data["obX_F6_C1"] : <any>null;
            this.obX_F6_C2 = data["obX_F6_C2"] !== undefined ? data["obX_F6_C2"] : <any>null;
            this.obX_F6_C3 = data["obX_F6_C3"] !== undefined ? data["obX_F6_C3"] : <any>null;
            this.obX_F6_C4 = data["obX_F6_C4"] !== undefined ? data["obX_F6_C4"] : <any>null;
            this.obX_F6_C5 = data["obX_F6_C5"] !== undefined ? data["obX_F6_C5"] : <any>null;
            this.obX_F6_C6 = data["obX_F6_C6"] !== undefined ? data["obX_F6_C6"] : <any>null;
            this.obX_F7_C0 = data["obX_F7_C0"] !== undefined ? data["obX_F7_C0"] : <any>null;
            this.obX_F7_C1 = data["obX_F7_C1"] !== undefined ? data["obX_F7_C1"] : <any>null;
            this.obX_F8_C0 = data["obX_F8_C0"] !== undefined ? data["obX_F8_C0"] : <any>null;
            this.obX_F8_C1 = data["obX_F8_C1"] !== undefined ? data["obX_F8_C1"] : <any>null;
            this.obX_F9_C0 = data["obX_F9_C0"] !== undefined ? data["obX_F9_C0"] : <any>null;
            this.obX_F9_C1 = data["obX_F9_C1"] !== undefined ? data["obX_F9_C1"] : <any>null;
            this.obX_F10_C0 = data["obX_F10_C0"] !== undefined ? data["obX_F10_C0"] : <any>null;
            this.obX_F10_C1 = data["obX_F10_C1"] !== undefined ? data["obX_F10_C1"] : <any>null;
            this.obX_F11_C0 = data["obX_F11_C0"] !== undefined ? data["obX_F11_C0"] : <any>null;
            this.obX_F11_C1 = data["obX_F11_C1"] !== undefined ? data["obX_F11_C1"] : <any>null;
            this.obX_F12_C0 = data["obX_F12_C0"] !== undefined ? data["obX_F12_C0"] : <any>null;
            this.obX_F12_C1 = data["obX_F12_C1"] !== undefined ? data["obX_F12_C1"] : <any>null;
            this.obX_F12_C2 = data["obX_F12_C2"] !== undefined ? data["obX_F12_C2"] : <any>null;
            this.obX_F13_C0 = data["obX_F13_C0"] !== undefined ? data["obX_F13_C0"] : <any>null;
            this.obX_F13_C1 = data["obX_F13_C1"] !== undefined ? data["obX_F13_C1"] : <any>null;
            this.obX_F14_C0 = data["obX_F14_C0"] !== undefined ? data["obX_F14_C0"] : <any>null;
            this.obX_F14_C1 = data["obX_F14_C1"] !== undefined ? data["obX_F14_C1"] : <any>null;
            this.obX_F14_C2 = data["obX_F14_C2"] !== undefined ? data["obX_F14_C2"] : <any>null;
            this.obX_F15_C0 = data["obX_F15_C0"] !== undefined ? data["obX_F15_C0"] : <any>null;
            this.obX_F15_C1 = data["obX_F15_C1"] !== undefined ? data["obX_F15_C1"] : <any>null;
            this.obX_F15_C2 = data["obX_F15_C2"] !== undefined ? data["obX_F15_C2"] : <any>null;
            this.obX_F15_C3 = data["obX_F15_C3"] !== undefined ? data["obX_F15_C3"] : <any>null;
            this.obX_F15_C4 = data["obX_F15_C4"] !== undefined ? data["obX_F15_C4"] : <any>null;
            this.obX_F15_C5 = data["obX_F15_C5"] !== undefined ? data["obX_F15_C5"] : <any>null;
            this.obX_F15_C6 = data["obX_F15_C6"] !== undefined ? data["obX_F15_C6"] : <any>null;
            this.obX_F16_C0 = data["obX_F16_C0"] !== undefined ? data["obX_F16_C0"] : <any>null;
            this.obX_F16_C1 = data["obX_F16_C1"] !== undefined ? data["obX_F16_C1"] : <any>null;
            this.obX_F16_C2 = data["obX_F16_C2"] !== undefined ? data["obX_F16_C2"] : <any>null;
            this.obX_F16_C3 = data["obX_F16_C3"] !== undefined ? data["obX_F16_C3"] : <any>null;
            this.obX_F16_C4 = data["obX_F16_C4"] !== undefined ? data["obX_F16_C4"] : <any>null;
            this.obX_F16_C5 = data["obX_F16_C5"] !== undefined ? data["obX_F16_C5"] : <any>null;
            this.obX_F16_C6 = data["obX_F16_C6"] !== undefined ? data["obX_F16_C6"] : <any>null;
            this.obX_F16_C7 = data["obX_F16_C7"] !== undefined ? data["obX_F16_C7"] : <any>null;
            this.obX_F17_C0 = data["obX_F17_C0"] !== undefined ? data["obX_F17_C0"] : <any>null;
            this.obX_F17_C1 = data["obX_F17_C1"] !== undefined ? data["obX_F17_C1"] : <any>null;
            this.obX_F17_C2 = data["obX_F17_C2"] !== undefined ? data["obX_F17_C2"] : <any>null;
            this.obX_F17_C3 = data["obX_F17_C3"] !== undefined ? data["obX_F17_C3"] : <any>null;
            this.obX_F17_C4 = data["obX_F17_C4"] !== undefined ? data["obX_F17_C4"] : <any>null;
            this.obX_F17_C5 = data["obX_F17_C5"] !== undefined ? data["obX_F17_C5"] : <any>null;
            this.obX_F17_C6 = data["obX_F17_C6"] !== undefined ? data["obX_F17_C6"] : <any>null;
            this.obX_F18_C0 = data["obX_F18_C0"] !== undefined ? data["obX_F18_C0"] : <any>null;
            this.obX_F18_C1 = data["obX_F18_C1"] !== undefined ? data["obX_F18_C1"] : <any>null;
            this.obX_F18_C2 = data["obX_F18_C2"] !== undefined ? data["obX_F18_C2"] : <any>null;
            this.obX_F18_C3 = data["obX_F18_C3"] !== undefined ? data["obX_F18_C3"] : <any>null;
            this.obX_F18_C4 = data["obX_F18_C4"] !== undefined ? data["obX_F18_C4"] : <any>null;
            this.obX_F19_C0 = data["obX_F19_C0"] !== undefined ? data["obX_F19_C0"] : <any>null;
            this.obX_F19_C1 = data["obX_F19_C1"] !== undefined ? data["obX_F19_C1"] : <any>null;
            this.obX_F19_C2 = data["obX_F19_C2"] !== undefined ? data["obX_F19_C2"] : <any>null;
        }
    }

    static fromJS(data: any): GetIncomingOrder_OBXResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomingOrder_OBXResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incomingOrder_OBX_ID"] = this.incomingOrder_OBX_ID !== undefined ? this.incomingOrder_OBX_ID : <any>null;
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["idx"] = this.idx !== undefined ? this.idx : <any>null;
        data["obX_F1_C0"] = this.obX_F1_C0 !== undefined ? this.obX_F1_C0 : <any>null;
        data["obX_F1_C1"] = this.obX_F1_C1 !== undefined ? this.obX_F1_C1 : <any>null;
        data["obX_F2_C0"] = this.obX_F2_C0 !== undefined ? this.obX_F2_C0 : <any>null;
        data["obX_F2_C1"] = this.obX_F2_C1 !== undefined ? this.obX_F2_C1 : <any>null;
        data["obX_F3_C0"] = this.obX_F3_C0 !== undefined ? this.obX_F3_C0 : <any>null;
        data["obX_F3_C1"] = this.obX_F3_C1 !== undefined ? this.obX_F3_C1 : <any>null;
        data["obX_F3_C2"] = this.obX_F3_C2 !== undefined ? this.obX_F3_C2 : <any>null;
        data["obX_F3_C3"] = this.obX_F3_C3 !== undefined ? this.obX_F3_C3 : <any>null;
        data["obX_F3_C4"] = this.obX_F3_C4 !== undefined ? this.obX_F3_C4 : <any>null;
        data["obX_F3_C5"] = this.obX_F3_C5 !== undefined ? this.obX_F3_C5 : <any>null;
        data["obX_F3_C6"] = this.obX_F3_C6 !== undefined ? this.obX_F3_C6 : <any>null;
        data["obX_F4_C0"] = this.obX_F4_C0 !== undefined ? this.obX_F4_C0 : <any>null;
        data["obX_F4_C1"] = this.obX_F4_C1 !== undefined ? this.obX_F4_C1 : <any>null;
        data["obX_RESULTDATA"] = this.obX_RESULTDATA !== undefined ? this.obX_RESULTDATA : <any>null;
        data["obX_F6_C0"] = this.obX_F6_C0 !== undefined ? this.obX_F6_C0 : <any>null;
        data["obX_F6_C1"] = this.obX_F6_C1 !== undefined ? this.obX_F6_C1 : <any>null;
        data["obX_F6_C2"] = this.obX_F6_C2 !== undefined ? this.obX_F6_C2 : <any>null;
        data["obX_F6_C3"] = this.obX_F6_C3 !== undefined ? this.obX_F6_C3 : <any>null;
        data["obX_F6_C4"] = this.obX_F6_C4 !== undefined ? this.obX_F6_C4 : <any>null;
        data["obX_F6_C5"] = this.obX_F6_C5 !== undefined ? this.obX_F6_C5 : <any>null;
        data["obX_F6_C6"] = this.obX_F6_C6 !== undefined ? this.obX_F6_C6 : <any>null;
        data["obX_F7_C0"] = this.obX_F7_C0 !== undefined ? this.obX_F7_C0 : <any>null;
        data["obX_F7_C1"] = this.obX_F7_C1 !== undefined ? this.obX_F7_C1 : <any>null;
        data["obX_F8_C0"] = this.obX_F8_C0 !== undefined ? this.obX_F8_C0 : <any>null;
        data["obX_F8_C1"] = this.obX_F8_C1 !== undefined ? this.obX_F8_C1 : <any>null;
        data["obX_F9_C0"] = this.obX_F9_C0 !== undefined ? this.obX_F9_C0 : <any>null;
        data["obX_F9_C1"] = this.obX_F9_C1 !== undefined ? this.obX_F9_C1 : <any>null;
        data["obX_F10_C0"] = this.obX_F10_C0 !== undefined ? this.obX_F10_C0 : <any>null;
        data["obX_F10_C1"] = this.obX_F10_C1 !== undefined ? this.obX_F10_C1 : <any>null;
        data["obX_F11_C0"] = this.obX_F11_C0 !== undefined ? this.obX_F11_C0 : <any>null;
        data["obX_F11_C1"] = this.obX_F11_C1 !== undefined ? this.obX_F11_C1 : <any>null;
        data["obX_F12_C0"] = this.obX_F12_C0 !== undefined ? this.obX_F12_C0 : <any>null;
        data["obX_F12_C1"] = this.obX_F12_C1 !== undefined ? this.obX_F12_C1 : <any>null;
        data["obX_F12_C2"] = this.obX_F12_C2 !== undefined ? this.obX_F12_C2 : <any>null;
        data["obX_F13_C0"] = this.obX_F13_C0 !== undefined ? this.obX_F13_C0 : <any>null;
        data["obX_F13_C1"] = this.obX_F13_C1 !== undefined ? this.obX_F13_C1 : <any>null;
        data["obX_F14_C0"] = this.obX_F14_C0 !== undefined ? this.obX_F14_C0 : <any>null;
        data["obX_F14_C1"] = this.obX_F14_C1 !== undefined ? this.obX_F14_C1 : <any>null;
        data["obX_F14_C2"] = this.obX_F14_C2 !== undefined ? this.obX_F14_C2 : <any>null;
        data["obX_F15_C0"] = this.obX_F15_C0 !== undefined ? this.obX_F15_C0 : <any>null;
        data["obX_F15_C1"] = this.obX_F15_C1 !== undefined ? this.obX_F15_C1 : <any>null;
        data["obX_F15_C2"] = this.obX_F15_C2 !== undefined ? this.obX_F15_C2 : <any>null;
        data["obX_F15_C3"] = this.obX_F15_C3 !== undefined ? this.obX_F15_C3 : <any>null;
        data["obX_F15_C4"] = this.obX_F15_C4 !== undefined ? this.obX_F15_C4 : <any>null;
        data["obX_F15_C5"] = this.obX_F15_C5 !== undefined ? this.obX_F15_C5 : <any>null;
        data["obX_F15_C6"] = this.obX_F15_C6 !== undefined ? this.obX_F15_C6 : <any>null;
        data["obX_F16_C0"] = this.obX_F16_C0 !== undefined ? this.obX_F16_C0 : <any>null;
        data["obX_F16_C1"] = this.obX_F16_C1 !== undefined ? this.obX_F16_C1 : <any>null;
        data["obX_F16_C2"] = this.obX_F16_C2 !== undefined ? this.obX_F16_C2 : <any>null;
        data["obX_F16_C3"] = this.obX_F16_C3 !== undefined ? this.obX_F16_C3 : <any>null;
        data["obX_F16_C4"] = this.obX_F16_C4 !== undefined ? this.obX_F16_C4 : <any>null;
        data["obX_F16_C5"] = this.obX_F16_C5 !== undefined ? this.obX_F16_C5 : <any>null;
        data["obX_F16_C6"] = this.obX_F16_C6 !== undefined ? this.obX_F16_C6 : <any>null;
        data["obX_F16_C7"] = this.obX_F16_C7 !== undefined ? this.obX_F16_C7 : <any>null;
        data["obX_F17_C0"] = this.obX_F17_C0 !== undefined ? this.obX_F17_C0 : <any>null;
        data["obX_F17_C1"] = this.obX_F17_C1 !== undefined ? this.obX_F17_C1 : <any>null;
        data["obX_F17_C2"] = this.obX_F17_C2 !== undefined ? this.obX_F17_C2 : <any>null;
        data["obX_F17_C3"] = this.obX_F17_C3 !== undefined ? this.obX_F17_C3 : <any>null;
        data["obX_F17_C4"] = this.obX_F17_C4 !== undefined ? this.obX_F17_C4 : <any>null;
        data["obX_F17_C5"] = this.obX_F17_C5 !== undefined ? this.obX_F17_C5 : <any>null;
        data["obX_F17_C6"] = this.obX_F17_C6 !== undefined ? this.obX_F17_C6 : <any>null;
        data["obX_F18_C0"] = this.obX_F18_C0 !== undefined ? this.obX_F18_C0 : <any>null;
        data["obX_F18_C1"] = this.obX_F18_C1 !== undefined ? this.obX_F18_C1 : <any>null;
        data["obX_F18_C2"] = this.obX_F18_C2 !== undefined ? this.obX_F18_C2 : <any>null;
        data["obX_F18_C3"] = this.obX_F18_C3 !== undefined ? this.obX_F18_C3 : <any>null;
        data["obX_F18_C4"] = this.obX_F18_C4 !== undefined ? this.obX_F18_C4 : <any>null;
        data["obX_F19_C0"] = this.obX_F19_C0 !== undefined ? this.obX_F19_C0 : <any>null;
        data["obX_F19_C1"] = this.obX_F19_C1 !== undefined ? this.obX_F19_C1 : <any>null;
        data["obX_F19_C2"] = this.obX_F19_C2 !== undefined ? this.obX_F19_C2 : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetIncomingOrder_OBXResult extends IProvideErrorMessage {
    incomingOrder_OBX_ID: number;
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    idx: number;
    obX_F1_C0?: string | null;
    obX_F1_C1?: string | null;
    obX_F2_C0?: string | null;
    obX_F2_C1?: string | null;
    obX_F3_C0?: string | null;
    obX_F3_C1?: string | null;
    obX_F3_C2?: string | null;
    obX_F3_C3?: string | null;
    obX_F3_C4?: string | null;
    obX_F3_C5?: string | null;
    obX_F3_C6?: string | null;
    obX_F4_C0?: string | null;
    obX_F4_C1?: string | null;
    obX_RESULTDATA?: string | null;
    obX_F6_C0?: string | null;
    obX_F6_C1?: string | null;
    obX_F6_C2?: string | null;
    obX_F6_C3?: string | null;
    obX_F6_C4?: string | null;
    obX_F6_C5?: string | null;
    obX_F6_C6?: string | null;
    obX_F7_C0?: string | null;
    obX_F7_C1?: string | null;
    obX_F8_C0?: string | null;
    obX_F8_C1?: string | null;
    obX_F9_C0?: string | null;
    obX_F9_C1?: string | null;
    obX_F10_C0?: string | null;
    obX_F10_C1?: string | null;
    obX_F11_C0?: string | null;
    obX_F11_C1?: string | null;
    obX_F12_C0?: string | null;
    obX_F12_C1?: string | null;
    obX_F12_C2?: string | null;
    obX_F13_C0?: string | null;
    obX_F13_C1?: string | null;
    obX_F14_C0?: string | null;
    obX_F14_C1?: string | null;
    obX_F14_C2?: string | null;
    obX_F15_C0?: string | null;
    obX_F15_C1?: string | null;
    obX_F15_C2?: string | null;
    obX_F15_C3?: string | null;
    obX_F15_C4?: string | null;
    obX_F15_C5?: string | null;
    obX_F15_C6?: string | null;
    obX_F16_C0?: string | null;
    obX_F16_C1?: string | null;
    obX_F16_C2?: string | null;
    obX_F16_C3?: string | null;
    obX_F16_C4?: string | null;
    obX_F16_C5?: string | null;
    obX_F16_C6?: string | null;
    obX_F16_C7?: string | null;
    obX_F17_C0?: string | null;
    obX_F17_C1?: string | null;
    obX_F17_C2?: string | null;
    obX_F17_C3?: string | null;
    obX_F17_C4?: string | null;
    obX_F17_C5?: string | null;
    obX_F17_C6?: string | null;
    obX_F18_C0?: string | null;
    obX_F18_C1?: string | null;
    obX_F18_C2?: string | null;
    obX_F18_C3?: string | null;
    obX_F18_C4?: string | null;
    obX_F19_C0?: string | null;
    obX_F19_C1?: string | null;
    obX_F19_C2?: string | null;
}

export class AddOrUpdateIncomingOrder_OBXParams extends BaseRequestParams implements IAddOrUpdateIncomingOrder_OBXParams {
    incomingOrder_OBX_ID!: number;
    incoming_ID!: number;
    associatedMessage_ID?: number | null;
    idx!: number;
    obX_F1_C0?: string | null;
    obX_F1_C1?: string | null;
    obX_F2_C0?: string | null;
    obX_F2_C1?: string | null;
    obX_F3_C0?: string | null;
    obX_F3_C1?: string | null;
    obX_F3_C2?: string | null;
    obX_F3_C3?: string | null;
    obX_F3_C4?: string | null;
    obX_F3_C5?: string | null;
    obX_F3_C6?: string | null;
    obX_F4_C0?: string | null;
    obX_F4_C1?: string | null;
    obX_RESULTDATA?: string | null;
    obX_F6_C0?: string | null;
    obX_F6_C1?: string | null;
    obX_F6_C2?: string | null;
    obX_F6_C3?: string | null;
    obX_F6_C4?: string | null;
    obX_F6_C5?: string | null;
    obX_F6_C6?: string | null;
    obX_F7_C0?: string | null;
    obX_F7_C1?: string | null;
    obX_F8_C0?: string | null;
    obX_F8_C1?: string | null;
    obX_F9_C0?: string | null;
    obX_F9_C1?: string | null;
    obX_F10_C0?: string | null;
    obX_F10_C1?: string | null;
    obX_F11_C0?: string | null;
    obX_F11_C1?: string | null;
    obX_F12_C0?: string | null;
    obX_F12_C1?: string | null;
    obX_F12_C2?: string | null;
    obX_F13_C0?: string | null;
    obX_F13_C1?: string | null;
    obX_F14_C0?: string | null;
    obX_F14_C1?: string | null;
    obX_F14_C2?: string | null;
    obX_F15_C0?: string | null;
    obX_F15_C1?: string | null;
    obX_F15_C2?: string | null;
    obX_F15_C3?: string | null;
    obX_F15_C4?: string | null;
    obX_F15_C5?: string | null;
    obX_F15_C6?: string | null;
    obX_F16_C0?: string | null;
    obX_F16_C1?: string | null;
    obX_F16_C2?: string | null;
    obX_F16_C3?: string | null;
    obX_F16_C4?: string | null;
    obX_F16_C5?: string | null;
    obX_F16_C6?: string | null;
    obX_F16_C7?: string | null;
    obX_F17_C0?: string | null;
    obX_F17_C1?: string | null;
    obX_F17_C2?: string | null;
    obX_F17_C3?: string | null;
    obX_F17_C4?: string | null;
    obX_F17_C5?: string | null;
    obX_F17_C6?: string | null;
    obX_F18_C0?: string | null;
    obX_F18_C1?: string | null;
    obX_F18_C2?: string | null;
    obX_F18_C3?: string | null;
    obX_F18_C4?: string | null;
    obX_F19_C0?: string | null;
    obX_F19_C1?: string | null;
    obX_F19_C2?: string | null;

    constructor(data?: IAddOrUpdateIncomingOrder_OBXParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incomingOrder_OBX_ID = data["incomingOrder_OBX_ID"] !== undefined ? data["incomingOrder_OBX_ID"] : <any>null;
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.associatedMessage_ID = data["associatedMessage_ID"] !== undefined ? data["associatedMessage_ID"] : <any>null;
            this.idx = data["idx"] !== undefined ? data["idx"] : <any>null;
            this.obX_F1_C0 = data["obX_F1_C0"] !== undefined ? data["obX_F1_C0"] : <any>null;
            this.obX_F1_C1 = data["obX_F1_C1"] !== undefined ? data["obX_F1_C1"] : <any>null;
            this.obX_F2_C0 = data["obX_F2_C0"] !== undefined ? data["obX_F2_C0"] : <any>null;
            this.obX_F2_C1 = data["obX_F2_C1"] !== undefined ? data["obX_F2_C1"] : <any>null;
            this.obX_F3_C0 = data["obX_F3_C0"] !== undefined ? data["obX_F3_C0"] : <any>null;
            this.obX_F3_C1 = data["obX_F3_C1"] !== undefined ? data["obX_F3_C1"] : <any>null;
            this.obX_F3_C2 = data["obX_F3_C2"] !== undefined ? data["obX_F3_C2"] : <any>null;
            this.obX_F3_C3 = data["obX_F3_C3"] !== undefined ? data["obX_F3_C3"] : <any>null;
            this.obX_F3_C4 = data["obX_F3_C4"] !== undefined ? data["obX_F3_C4"] : <any>null;
            this.obX_F3_C5 = data["obX_F3_C5"] !== undefined ? data["obX_F3_C5"] : <any>null;
            this.obX_F3_C6 = data["obX_F3_C6"] !== undefined ? data["obX_F3_C6"] : <any>null;
            this.obX_F4_C0 = data["obX_F4_C0"] !== undefined ? data["obX_F4_C0"] : <any>null;
            this.obX_F4_C1 = data["obX_F4_C1"] !== undefined ? data["obX_F4_C1"] : <any>null;
            this.obX_RESULTDATA = data["obX_RESULTDATA"] !== undefined ? data["obX_RESULTDATA"] : <any>null;
            this.obX_F6_C0 = data["obX_F6_C0"] !== undefined ? data["obX_F6_C0"] : <any>null;
            this.obX_F6_C1 = data["obX_F6_C1"] !== undefined ? data["obX_F6_C1"] : <any>null;
            this.obX_F6_C2 = data["obX_F6_C2"] !== undefined ? data["obX_F6_C2"] : <any>null;
            this.obX_F6_C3 = data["obX_F6_C3"] !== undefined ? data["obX_F6_C3"] : <any>null;
            this.obX_F6_C4 = data["obX_F6_C4"] !== undefined ? data["obX_F6_C4"] : <any>null;
            this.obX_F6_C5 = data["obX_F6_C5"] !== undefined ? data["obX_F6_C5"] : <any>null;
            this.obX_F6_C6 = data["obX_F6_C6"] !== undefined ? data["obX_F6_C6"] : <any>null;
            this.obX_F7_C0 = data["obX_F7_C0"] !== undefined ? data["obX_F7_C0"] : <any>null;
            this.obX_F7_C1 = data["obX_F7_C1"] !== undefined ? data["obX_F7_C1"] : <any>null;
            this.obX_F8_C0 = data["obX_F8_C0"] !== undefined ? data["obX_F8_C0"] : <any>null;
            this.obX_F8_C1 = data["obX_F8_C1"] !== undefined ? data["obX_F8_C1"] : <any>null;
            this.obX_F9_C0 = data["obX_F9_C0"] !== undefined ? data["obX_F9_C0"] : <any>null;
            this.obX_F9_C1 = data["obX_F9_C1"] !== undefined ? data["obX_F9_C1"] : <any>null;
            this.obX_F10_C0 = data["obX_F10_C0"] !== undefined ? data["obX_F10_C0"] : <any>null;
            this.obX_F10_C1 = data["obX_F10_C1"] !== undefined ? data["obX_F10_C1"] : <any>null;
            this.obX_F11_C0 = data["obX_F11_C0"] !== undefined ? data["obX_F11_C0"] : <any>null;
            this.obX_F11_C1 = data["obX_F11_C1"] !== undefined ? data["obX_F11_C1"] : <any>null;
            this.obX_F12_C0 = data["obX_F12_C0"] !== undefined ? data["obX_F12_C0"] : <any>null;
            this.obX_F12_C1 = data["obX_F12_C1"] !== undefined ? data["obX_F12_C1"] : <any>null;
            this.obX_F12_C2 = data["obX_F12_C2"] !== undefined ? data["obX_F12_C2"] : <any>null;
            this.obX_F13_C0 = data["obX_F13_C0"] !== undefined ? data["obX_F13_C0"] : <any>null;
            this.obX_F13_C1 = data["obX_F13_C1"] !== undefined ? data["obX_F13_C1"] : <any>null;
            this.obX_F14_C0 = data["obX_F14_C0"] !== undefined ? data["obX_F14_C0"] : <any>null;
            this.obX_F14_C1 = data["obX_F14_C1"] !== undefined ? data["obX_F14_C1"] : <any>null;
            this.obX_F14_C2 = data["obX_F14_C2"] !== undefined ? data["obX_F14_C2"] : <any>null;
            this.obX_F15_C0 = data["obX_F15_C0"] !== undefined ? data["obX_F15_C0"] : <any>null;
            this.obX_F15_C1 = data["obX_F15_C1"] !== undefined ? data["obX_F15_C1"] : <any>null;
            this.obX_F15_C2 = data["obX_F15_C2"] !== undefined ? data["obX_F15_C2"] : <any>null;
            this.obX_F15_C3 = data["obX_F15_C3"] !== undefined ? data["obX_F15_C3"] : <any>null;
            this.obX_F15_C4 = data["obX_F15_C4"] !== undefined ? data["obX_F15_C4"] : <any>null;
            this.obX_F15_C5 = data["obX_F15_C5"] !== undefined ? data["obX_F15_C5"] : <any>null;
            this.obX_F15_C6 = data["obX_F15_C6"] !== undefined ? data["obX_F15_C6"] : <any>null;
            this.obX_F16_C0 = data["obX_F16_C0"] !== undefined ? data["obX_F16_C0"] : <any>null;
            this.obX_F16_C1 = data["obX_F16_C1"] !== undefined ? data["obX_F16_C1"] : <any>null;
            this.obX_F16_C2 = data["obX_F16_C2"] !== undefined ? data["obX_F16_C2"] : <any>null;
            this.obX_F16_C3 = data["obX_F16_C3"] !== undefined ? data["obX_F16_C3"] : <any>null;
            this.obX_F16_C4 = data["obX_F16_C4"] !== undefined ? data["obX_F16_C4"] : <any>null;
            this.obX_F16_C5 = data["obX_F16_C5"] !== undefined ? data["obX_F16_C5"] : <any>null;
            this.obX_F16_C6 = data["obX_F16_C6"] !== undefined ? data["obX_F16_C6"] : <any>null;
            this.obX_F16_C7 = data["obX_F16_C7"] !== undefined ? data["obX_F16_C7"] : <any>null;
            this.obX_F17_C0 = data["obX_F17_C0"] !== undefined ? data["obX_F17_C0"] : <any>null;
            this.obX_F17_C1 = data["obX_F17_C1"] !== undefined ? data["obX_F17_C1"] : <any>null;
            this.obX_F17_C2 = data["obX_F17_C2"] !== undefined ? data["obX_F17_C2"] : <any>null;
            this.obX_F17_C3 = data["obX_F17_C3"] !== undefined ? data["obX_F17_C3"] : <any>null;
            this.obX_F17_C4 = data["obX_F17_C4"] !== undefined ? data["obX_F17_C4"] : <any>null;
            this.obX_F17_C5 = data["obX_F17_C5"] !== undefined ? data["obX_F17_C5"] : <any>null;
            this.obX_F17_C6 = data["obX_F17_C6"] !== undefined ? data["obX_F17_C6"] : <any>null;
            this.obX_F18_C0 = data["obX_F18_C0"] !== undefined ? data["obX_F18_C0"] : <any>null;
            this.obX_F18_C1 = data["obX_F18_C1"] !== undefined ? data["obX_F18_C1"] : <any>null;
            this.obX_F18_C2 = data["obX_F18_C2"] !== undefined ? data["obX_F18_C2"] : <any>null;
            this.obX_F18_C3 = data["obX_F18_C3"] !== undefined ? data["obX_F18_C3"] : <any>null;
            this.obX_F18_C4 = data["obX_F18_C4"] !== undefined ? data["obX_F18_C4"] : <any>null;
            this.obX_F19_C0 = data["obX_F19_C0"] !== undefined ? data["obX_F19_C0"] : <any>null;
            this.obX_F19_C1 = data["obX_F19_C1"] !== undefined ? data["obX_F19_C1"] : <any>null;
            this.obX_F19_C2 = data["obX_F19_C2"] !== undefined ? data["obX_F19_C2"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrder_OBXParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrder_OBXParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incomingOrder_OBX_ID"] = this.incomingOrder_OBX_ID !== undefined ? this.incomingOrder_OBX_ID : <any>null;
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["associatedMessage_ID"] = this.associatedMessage_ID !== undefined ? this.associatedMessage_ID : <any>null;
        data["idx"] = this.idx !== undefined ? this.idx : <any>null;
        data["obX_F1_C0"] = this.obX_F1_C0 !== undefined ? this.obX_F1_C0 : <any>null;
        data["obX_F1_C1"] = this.obX_F1_C1 !== undefined ? this.obX_F1_C1 : <any>null;
        data["obX_F2_C0"] = this.obX_F2_C0 !== undefined ? this.obX_F2_C0 : <any>null;
        data["obX_F2_C1"] = this.obX_F2_C1 !== undefined ? this.obX_F2_C1 : <any>null;
        data["obX_F3_C0"] = this.obX_F3_C0 !== undefined ? this.obX_F3_C0 : <any>null;
        data["obX_F3_C1"] = this.obX_F3_C1 !== undefined ? this.obX_F3_C1 : <any>null;
        data["obX_F3_C2"] = this.obX_F3_C2 !== undefined ? this.obX_F3_C2 : <any>null;
        data["obX_F3_C3"] = this.obX_F3_C3 !== undefined ? this.obX_F3_C3 : <any>null;
        data["obX_F3_C4"] = this.obX_F3_C4 !== undefined ? this.obX_F3_C4 : <any>null;
        data["obX_F3_C5"] = this.obX_F3_C5 !== undefined ? this.obX_F3_C5 : <any>null;
        data["obX_F3_C6"] = this.obX_F3_C6 !== undefined ? this.obX_F3_C6 : <any>null;
        data["obX_F4_C0"] = this.obX_F4_C0 !== undefined ? this.obX_F4_C0 : <any>null;
        data["obX_F4_C1"] = this.obX_F4_C1 !== undefined ? this.obX_F4_C1 : <any>null;
        data["obX_RESULTDATA"] = this.obX_RESULTDATA !== undefined ? this.obX_RESULTDATA : <any>null;
        data["obX_F6_C0"] = this.obX_F6_C0 !== undefined ? this.obX_F6_C0 : <any>null;
        data["obX_F6_C1"] = this.obX_F6_C1 !== undefined ? this.obX_F6_C1 : <any>null;
        data["obX_F6_C2"] = this.obX_F6_C2 !== undefined ? this.obX_F6_C2 : <any>null;
        data["obX_F6_C3"] = this.obX_F6_C3 !== undefined ? this.obX_F6_C3 : <any>null;
        data["obX_F6_C4"] = this.obX_F6_C4 !== undefined ? this.obX_F6_C4 : <any>null;
        data["obX_F6_C5"] = this.obX_F6_C5 !== undefined ? this.obX_F6_C5 : <any>null;
        data["obX_F6_C6"] = this.obX_F6_C6 !== undefined ? this.obX_F6_C6 : <any>null;
        data["obX_F7_C0"] = this.obX_F7_C0 !== undefined ? this.obX_F7_C0 : <any>null;
        data["obX_F7_C1"] = this.obX_F7_C1 !== undefined ? this.obX_F7_C1 : <any>null;
        data["obX_F8_C0"] = this.obX_F8_C0 !== undefined ? this.obX_F8_C0 : <any>null;
        data["obX_F8_C1"] = this.obX_F8_C1 !== undefined ? this.obX_F8_C1 : <any>null;
        data["obX_F9_C0"] = this.obX_F9_C0 !== undefined ? this.obX_F9_C0 : <any>null;
        data["obX_F9_C1"] = this.obX_F9_C1 !== undefined ? this.obX_F9_C1 : <any>null;
        data["obX_F10_C0"] = this.obX_F10_C0 !== undefined ? this.obX_F10_C0 : <any>null;
        data["obX_F10_C1"] = this.obX_F10_C1 !== undefined ? this.obX_F10_C1 : <any>null;
        data["obX_F11_C0"] = this.obX_F11_C0 !== undefined ? this.obX_F11_C0 : <any>null;
        data["obX_F11_C1"] = this.obX_F11_C1 !== undefined ? this.obX_F11_C1 : <any>null;
        data["obX_F12_C0"] = this.obX_F12_C0 !== undefined ? this.obX_F12_C0 : <any>null;
        data["obX_F12_C1"] = this.obX_F12_C1 !== undefined ? this.obX_F12_C1 : <any>null;
        data["obX_F12_C2"] = this.obX_F12_C2 !== undefined ? this.obX_F12_C2 : <any>null;
        data["obX_F13_C0"] = this.obX_F13_C0 !== undefined ? this.obX_F13_C0 : <any>null;
        data["obX_F13_C1"] = this.obX_F13_C1 !== undefined ? this.obX_F13_C1 : <any>null;
        data["obX_F14_C0"] = this.obX_F14_C0 !== undefined ? this.obX_F14_C0 : <any>null;
        data["obX_F14_C1"] = this.obX_F14_C1 !== undefined ? this.obX_F14_C1 : <any>null;
        data["obX_F14_C2"] = this.obX_F14_C2 !== undefined ? this.obX_F14_C2 : <any>null;
        data["obX_F15_C0"] = this.obX_F15_C0 !== undefined ? this.obX_F15_C0 : <any>null;
        data["obX_F15_C1"] = this.obX_F15_C1 !== undefined ? this.obX_F15_C1 : <any>null;
        data["obX_F15_C2"] = this.obX_F15_C2 !== undefined ? this.obX_F15_C2 : <any>null;
        data["obX_F15_C3"] = this.obX_F15_C3 !== undefined ? this.obX_F15_C3 : <any>null;
        data["obX_F15_C4"] = this.obX_F15_C4 !== undefined ? this.obX_F15_C4 : <any>null;
        data["obX_F15_C5"] = this.obX_F15_C5 !== undefined ? this.obX_F15_C5 : <any>null;
        data["obX_F15_C6"] = this.obX_F15_C6 !== undefined ? this.obX_F15_C6 : <any>null;
        data["obX_F16_C0"] = this.obX_F16_C0 !== undefined ? this.obX_F16_C0 : <any>null;
        data["obX_F16_C1"] = this.obX_F16_C1 !== undefined ? this.obX_F16_C1 : <any>null;
        data["obX_F16_C2"] = this.obX_F16_C2 !== undefined ? this.obX_F16_C2 : <any>null;
        data["obX_F16_C3"] = this.obX_F16_C3 !== undefined ? this.obX_F16_C3 : <any>null;
        data["obX_F16_C4"] = this.obX_F16_C4 !== undefined ? this.obX_F16_C4 : <any>null;
        data["obX_F16_C5"] = this.obX_F16_C5 !== undefined ? this.obX_F16_C5 : <any>null;
        data["obX_F16_C6"] = this.obX_F16_C6 !== undefined ? this.obX_F16_C6 : <any>null;
        data["obX_F16_C7"] = this.obX_F16_C7 !== undefined ? this.obX_F16_C7 : <any>null;
        data["obX_F17_C0"] = this.obX_F17_C0 !== undefined ? this.obX_F17_C0 : <any>null;
        data["obX_F17_C1"] = this.obX_F17_C1 !== undefined ? this.obX_F17_C1 : <any>null;
        data["obX_F17_C2"] = this.obX_F17_C2 !== undefined ? this.obX_F17_C2 : <any>null;
        data["obX_F17_C3"] = this.obX_F17_C3 !== undefined ? this.obX_F17_C3 : <any>null;
        data["obX_F17_C4"] = this.obX_F17_C4 !== undefined ? this.obX_F17_C4 : <any>null;
        data["obX_F17_C5"] = this.obX_F17_C5 !== undefined ? this.obX_F17_C5 : <any>null;
        data["obX_F17_C6"] = this.obX_F17_C6 !== undefined ? this.obX_F17_C6 : <any>null;
        data["obX_F18_C0"] = this.obX_F18_C0 !== undefined ? this.obX_F18_C0 : <any>null;
        data["obX_F18_C1"] = this.obX_F18_C1 !== undefined ? this.obX_F18_C1 : <any>null;
        data["obX_F18_C2"] = this.obX_F18_C2 !== undefined ? this.obX_F18_C2 : <any>null;
        data["obX_F18_C3"] = this.obX_F18_C3 !== undefined ? this.obX_F18_C3 : <any>null;
        data["obX_F18_C4"] = this.obX_F18_C4 !== undefined ? this.obX_F18_C4 : <any>null;
        data["obX_F19_C0"] = this.obX_F19_C0 !== undefined ? this.obX_F19_C0 : <any>null;
        data["obX_F19_C1"] = this.obX_F19_C1 !== undefined ? this.obX_F19_C1 : <any>null;
        data["obX_F19_C2"] = this.obX_F19_C2 !== undefined ? this.obX_F19_C2 : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrder_OBXParams extends IBaseRequestParams {
    incomingOrder_OBX_ID: number;
    incoming_ID: number;
    associatedMessage_ID?: number | null;
    idx: number;
    obX_F1_C0?: string | null;
    obX_F1_C1?: string | null;
    obX_F2_C0?: string | null;
    obX_F2_C1?: string | null;
    obX_F3_C0?: string | null;
    obX_F3_C1?: string | null;
    obX_F3_C2?: string | null;
    obX_F3_C3?: string | null;
    obX_F3_C4?: string | null;
    obX_F3_C5?: string | null;
    obX_F3_C6?: string | null;
    obX_F4_C0?: string | null;
    obX_F4_C1?: string | null;
    obX_RESULTDATA?: string | null;
    obX_F6_C0?: string | null;
    obX_F6_C1?: string | null;
    obX_F6_C2?: string | null;
    obX_F6_C3?: string | null;
    obX_F6_C4?: string | null;
    obX_F6_C5?: string | null;
    obX_F6_C6?: string | null;
    obX_F7_C0?: string | null;
    obX_F7_C1?: string | null;
    obX_F8_C0?: string | null;
    obX_F8_C1?: string | null;
    obX_F9_C0?: string | null;
    obX_F9_C1?: string | null;
    obX_F10_C0?: string | null;
    obX_F10_C1?: string | null;
    obX_F11_C0?: string | null;
    obX_F11_C1?: string | null;
    obX_F12_C0?: string | null;
    obX_F12_C1?: string | null;
    obX_F12_C2?: string | null;
    obX_F13_C0?: string | null;
    obX_F13_C1?: string | null;
    obX_F14_C0?: string | null;
    obX_F14_C1?: string | null;
    obX_F14_C2?: string | null;
    obX_F15_C0?: string | null;
    obX_F15_C1?: string | null;
    obX_F15_C2?: string | null;
    obX_F15_C3?: string | null;
    obX_F15_C4?: string | null;
    obX_F15_C5?: string | null;
    obX_F15_C6?: string | null;
    obX_F16_C0?: string | null;
    obX_F16_C1?: string | null;
    obX_F16_C2?: string | null;
    obX_F16_C3?: string | null;
    obX_F16_C4?: string | null;
    obX_F16_C5?: string | null;
    obX_F16_C6?: string | null;
    obX_F16_C7?: string | null;
    obX_F17_C0?: string | null;
    obX_F17_C1?: string | null;
    obX_F17_C2?: string | null;
    obX_F17_C3?: string | null;
    obX_F17_C4?: string | null;
    obX_F17_C5?: string | null;
    obX_F17_C6?: string | null;
    obX_F18_C0?: string | null;
    obX_F18_C1?: string | null;
    obX_F18_C2?: string | null;
    obX_F18_C3?: string | null;
    obX_F18_C4?: string | null;
    obX_F19_C0?: string | null;
    obX_F19_C1?: string | null;
    obX_F19_C2?: string | null;
}

export class AddOrUpdateIncomingOrder_OBX extends AddOrUpdateIncomingOrder_OBXParams implements IAddOrUpdateIncomingOrder_OBX {

    constructor(data?: IAddOrUpdateIncomingOrder_OBX) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrder_OBX {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrder_OBX();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrder_OBX extends IAddOrUpdateIncomingOrder_OBXParams {
}

export class APIResponseOfAddOrUpdateIncomingOrder_OBXResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateIncomingOrder_OBXResult {
    data?: AddOrUpdateIncomingOrder_OBXResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateIncomingOrder_OBXResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateIncomingOrder_OBXResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateIncomingOrder_OBXResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateIncomingOrder_OBXResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateIncomingOrder_OBXResult extends IProvideErrorMessage {
    data?: IAddOrUpdateIncomingOrder_OBXResult | null;
}

export class AddOrUpdateIncomingOrder_OBXResult extends ProvideErrorMessage implements IAddOrUpdateIncomingOrder_OBXResult {
    incoming_ID?: string | null;
    idx?: string | null;

    constructor(data?: IAddOrUpdateIncomingOrder_OBXResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incoming_ID = data["incoming_ID"] !== undefined ? data["incoming_ID"] : <any>null;
            this.idx = data["idx"] !== undefined ? data["idx"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateIncomingOrder_OBXResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateIncomingOrder_OBXResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incoming_ID"] = this.incoming_ID !== undefined ? this.incoming_ID : <any>null;
        data["idx"] = this.idx !== undefined ? this.idx : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateIncomingOrder_OBXResult extends IProvideErrorMessage {
    incoming_ID?: string | null;
    idx?: string | null;
}

export class APIResponseOfIEnumerableOfPatientProgram extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfPatientProgram {
    data?: PatientProgram[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfPatientProgram) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PatientProgram.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfPatientProgram {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfPatientProgram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfPatientProgram extends IProvideErrorMessage {
    data?: IPatientProgram[] | null;
}

export class PatientProgram implements IPatientProgram {
    id!: number;
    definition?: ProgramDO | null;
    definitionId!: number;
    program?: string | null;
    patient?: Patient | null;
    patientId!: number;
    patientName?: string | null;
    locationId!: number;
    locationName?: string | null;
    attendingDoctorId!: number;
    attendingMO?: string | null;
    noteText?: string | null;
    nextActionDescription?: string | null;
    nextConnectDue!: Date;
    deleted!: boolean;
    booking_ID!: number;
    referral_ID!: number;
    cycleCount!: number;
    cyclesToComplete!: number;
    cycleWeeks!: number;
    nextStep!: number;
    nextStepDescription?: string | null;
    enrollmentDate?: Date | null;
    referenceDate!: Date;
    complete!: boolean;
    connectStatus!: ConnectStatus;
    batchId!: number;
    connectWarning?: string | null;
    bookingDate?: Date | null;
    frequency!: number;
    history?: PatientConnectLogDO[] | null;
    replyContent?: ReplyContentDO[] | null;
    dateCreated!: Date;
    userCreated?: string | null;
    dateLastModified!: Date;
    userLastModified?: string | null;
    dateDeleted!: Date;
    userDeleted?: string | null;
    frequencyUnit?: string | null;
    frequencyValue!: number;
    bookingTypes?: string | null;
    canPrintPreview!: boolean;

    constructor(data?: IPatientProgram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.definition = data.definition && !(<any>data.definition).toJSON ? new ProgramDO(data.definition) : <ProgramDO>this.definition; 
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
            if (data.history) {
                this.history = [];
                for (let i = 0; i < data.history.length; i++) {
                    let item = data.history[i];
                    this.history[i] = item && !(<any>item).toJSON ? new PatientConnectLogDO(item) : <PatientConnectLogDO>item;
                }
            }
            if (data.replyContent) {
                this.replyContent = [];
                for (let i = 0; i < data.replyContent.length; i++) {
                    let item = data.replyContent[i];
                    this.replyContent[i] = item && !(<any>item).toJSON ? new ReplyContentDO(item) : <ReplyContentDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.definition = data["definition"] ? ProgramDO.fromJS(data["definition"]) : <any>null;
            this.definitionId = data["definitionId"] !== undefined ? data["definitionId"] : <any>null;
            this.program = data["program"] !== undefined ? data["program"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.locationName = data["locationName"] !== undefined ? data["locationName"] : <any>null;
            this.attendingDoctorId = data["attendingDoctorId"] !== undefined ? data["attendingDoctorId"] : <any>null;
            this.attendingMO = data["attendingMO"] !== undefined ? data["attendingMO"] : <any>null;
            this.noteText = data["noteText"] !== undefined ? data["noteText"] : <any>null;
            this.nextActionDescription = data["nextActionDescription"] !== undefined ? data["nextActionDescription"] : <any>null;
            this.nextConnectDue = data["nextConnectDue"] ? new Date(data["nextConnectDue"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
            this.cycleCount = data["cycleCount"] !== undefined ? data["cycleCount"] : <any>null;
            this.cyclesToComplete = data["cyclesToComplete"] !== undefined ? data["cyclesToComplete"] : <any>null;
            this.cycleWeeks = data["cycleWeeks"] !== undefined ? data["cycleWeeks"] : <any>null;
            this.nextStep = data["nextStep"] !== undefined ? data["nextStep"] : <any>null;
            this.nextStepDescription = data["nextStepDescription"] !== undefined ? data["nextStepDescription"] : <any>null;
            this.enrollmentDate = data["enrollmentDate"] ? new Date(data["enrollmentDate"].toString()) : <any>null;
            this.referenceDate = data["referenceDate"] ? new Date(data["referenceDate"].toString()) : <any>null;
            this.complete = data["complete"] !== undefined ? data["complete"] : <any>null;
            this.connectStatus = data["connectStatus"] !== undefined ? data["connectStatus"] : <any>null;
            this.batchId = data["batchId"] !== undefined ? data["batchId"] : <any>null;
            this.connectWarning = data["connectWarning"] !== undefined ? data["connectWarning"] : <any>null;
            this.bookingDate = data["bookingDate"] ? new Date(data["bookingDate"].toString()) : <any>null;
            this.frequency = data["frequency"] !== undefined ? data["frequency"] : <any>null;
            if (data["history"] && data["history"].constructor === Array) {
                this.history = [];
                for (let item of data["history"])
                    this.history.push(PatientConnectLogDO.fromJS(item));
            }
            if (data["replyContent"] && data["replyContent"].constructor === Array) {
                this.replyContent = [];
                for (let item of data["replyContent"])
                    this.replyContent.push(ReplyContentDO.fromJS(item));
            }
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateDeleted = data["dateDeleted"] ? new Date(data["dateDeleted"].toString()) : <any>null;
            this.userDeleted = data["userDeleted"] !== undefined ? data["userDeleted"] : <any>null;
            this.frequencyUnit = data["frequencyUnit"] !== undefined ? data["frequencyUnit"] : <any>null;
            this.frequencyValue = data["frequencyValue"] !== undefined ? data["frequencyValue"] : <any>null;
            this.bookingTypes = data["bookingTypes"] !== undefined ? data["bookingTypes"] : <any>null;
            this.canPrintPreview = data["canPrintPreview"] !== undefined ? data["canPrintPreview"] : <any>null;
        }
    }

    static fromJS(data: any): PatientProgram {
        data = typeof data === 'object' ? data : {};
        let result = new PatientProgram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["definition"] = this.definition ? this.definition.toJSON() : <any>null;
        data["definitionId"] = this.definitionId !== undefined ? this.definitionId : <any>null;
        data["program"] = this.program !== undefined ? this.program : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["locationName"] = this.locationName !== undefined ? this.locationName : <any>null;
        data["attendingDoctorId"] = this.attendingDoctorId !== undefined ? this.attendingDoctorId : <any>null;
        data["attendingMO"] = this.attendingMO !== undefined ? this.attendingMO : <any>null;
        data["noteText"] = this.noteText !== undefined ? this.noteText : <any>null;
        data["nextActionDescription"] = this.nextActionDescription !== undefined ? this.nextActionDescription : <any>null;
        data["nextConnectDue"] = this.nextConnectDue ? this.nextConnectDue.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        data["cycleCount"] = this.cycleCount !== undefined ? this.cycleCount : <any>null;
        data["cyclesToComplete"] = this.cyclesToComplete !== undefined ? this.cyclesToComplete : <any>null;
        data["cycleWeeks"] = this.cycleWeeks !== undefined ? this.cycleWeeks : <any>null;
        data["nextStep"] = this.nextStep !== undefined ? this.nextStep : <any>null;
        data["nextStepDescription"] = this.nextStepDescription !== undefined ? this.nextStepDescription : <any>null;
        data["enrollmentDate"] = this.enrollmentDate ? this.enrollmentDate.toISOString() : <any>null;
        data["referenceDate"] = this.referenceDate ? this.referenceDate.toISOString() : <any>null;
        data["complete"] = this.complete !== undefined ? this.complete : <any>null;
        data["connectStatus"] = this.connectStatus !== undefined ? this.connectStatus : <any>null;
        data["batchId"] = this.batchId !== undefined ? this.batchId : <any>null;
        data["connectWarning"] = this.connectWarning !== undefined ? this.connectWarning : <any>null;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>null;
        data["frequency"] = this.frequency !== undefined ? this.frequency : <any>null;
        if (this.history && this.history.constructor === Array) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        if (this.replyContent && this.replyContent.constructor === Array) {
            data["replyContent"] = [];
            for (let item of this.replyContent)
                data["replyContent"].push(item.toJSON());
        }
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateDeleted"] = this.dateDeleted ? this.dateDeleted.toISOString() : <any>null;
        data["userDeleted"] = this.userDeleted !== undefined ? this.userDeleted : <any>null;
        data["frequencyUnit"] = this.frequencyUnit !== undefined ? this.frequencyUnit : <any>null;
        data["frequencyValue"] = this.frequencyValue !== undefined ? this.frequencyValue : <any>null;
        data["bookingTypes"] = this.bookingTypes !== undefined ? this.bookingTypes : <any>null;
        data["canPrintPreview"] = this.canPrintPreview !== undefined ? this.canPrintPreview : <any>null;
        return data; 
    }
}

export interface IPatientProgram {
    id: number;
    definition?: IProgramDO | null;
    definitionId: number;
    program?: string | null;
    patient?: IPatient | null;
    patientId: number;
    patientName?: string | null;
    locationId: number;
    locationName?: string | null;
    attendingDoctorId: number;
    attendingMO?: string | null;
    noteText?: string | null;
    nextActionDescription?: string | null;
    nextConnectDue: Date;
    deleted: boolean;
    booking_ID: number;
    referral_ID: number;
    cycleCount: number;
    cyclesToComplete: number;
    cycleWeeks: number;
    nextStep: number;
    nextStepDescription?: string | null;
    enrollmentDate?: Date | null;
    referenceDate: Date;
    complete: boolean;
    connectStatus: ConnectStatus;
    batchId: number;
    connectWarning?: string | null;
    bookingDate?: Date | null;
    frequency: number;
    history?: IPatientConnectLogDO[] | null;
    replyContent?: IReplyContentDO[] | null;
    dateCreated: Date;
    userCreated?: string | null;
    dateLastModified: Date;
    userLastModified?: string | null;
    dateDeleted: Date;
    userDeleted?: string | null;
    frequencyUnit?: string | null;
    frequencyValue: number;
    bookingTypes?: string | null;
    canPrintPreview: boolean;
}

export class ProgramDO implements IProgramDO {
    id!: number;
    type!: ProgramType;
    reason?: string | null;
    enabled!: boolean;
    weeks!: number;
    recurringCount!: number;
    bookingToCompleteType!: BookingToCompleteType;
    actions?: ActionDO[] | null;
    bookingTypes?: SelectedBookingTypeDO[] | null;
    deleted!: boolean;
    frequencyUnit?: string | null;
    frequencyValue!: number;
    userLastModified?: string | null;
    effectedConnects?: EffectedConnectsOnProgramDO | null;
    hasReplyContent!: boolean;

    constructor(data?: IProgramDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.actions) {
                this.actions = [];
                for (let i = 0; i < data.actions.length; i++) {
                    let item = data.actions[i];
                    this.actions[i] = item && !(<any>item).toJSON ? new ActionDO(item) : <ActionDO>item;
                }
            }
            if (data.bookingTypes) {
                this.bookingTypes = [];
                for (let i = 0; i < data.bookingTypes.length; i++) {
                    let item = data.bookingTypes[i];
                    this.bookingTypes[i] = item && !(<any>item).toJSON ? new SelectedBookingTypeDO(item) : <SelectedBookingTypeDO>item;
                }
            }
            this.effectedConnects = data.effectedConnects && !(<any>data.effectedConnects).toJSON ? new EffectedConnectsOnProgramDO(data.effectedConnects) : <EffectedConnectsOnProgramDO>this.effectedConnects; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.reason = data["reason"] !== undefined ? data["reason"] : <any>null;
            this.enabled = data["enabled"] !== undefined ? data["enabled"] : <any>null;
            this.weeks = data["weeks"] !== undefined ? data["weeks"] : <any>null;
            this.recurringCount = data["recurringCount"] !== undefined ? data["recurringCount"] : <any>null;
            this.bookingToCompleteType = data["bookingToCompleteType"] !== undefined ? data["bookingToCompleteType"] : <any>null;
            if (data["actions"] && data["actions"].constructor === Array) {
                this.actions = [];
                for (let item of data["actions"])
                    this.actions.push(ActionDO.fromJS(item));
            }
            if (data["bookingTypes"] && data["bookingTypes"].constructor === Array) {
                this.bookingTypes = [];
                for (let item of data["bookingTypes"])
                    this.bookingTypes.push(SelectedBookingTypeDO.fromJS(item));
            }
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.frequencyUnit = data["frequencyUnit"] !== undefined ? data["frequencyUnit"] : <any>null;
            this.frequencyValue = data["frequencyValue"] !== undefined ? data["frequencyValue"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.effectedConnects = data["effectedConnects"] ? EffectedConnectsOnProgramDO.fromJS(data["effectedConnects"]) : <any>null;
            this.hasReplyContent = data["hasReplyContent"] !== undefined ? data["hasReplyContent"] : <any>null;
        }
    }

    static fromJS(data: any): ProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["reason"] = this.reason !== undefined ? this.reason : <any>null;
        data["enabled"] = this.enabled !== undefined ? this.enabled : <any>null;
        data["weeks"] = this.weeks !== undefined ? this.weeks : <any>null;
        data["recurringCount"] = this.recurringCount !== undefined ? this.recurringCount : <any>null;
        data["bookingToCompleteType"] = this.bookingToCompleteType !== undefined ? this.bookingToCompleteType : <any>null;
        if (this.actions && this.actions.constructor === Array) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        if (this.bookingTypes && this.bookingTypes.constructor === Array) {
            data["bookingTypes"] = [];
            for (let item of this.bookingTypes)
                data["bookingTypes"].push(item.toJSON());
        }
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["frequencyUnit"] = this.frequencyUnit !== undefined ? this.frequencyUnit : <any>null;
        data["frequencyValue"] = this.frequencyValue !== undefined ? this.frequencyValue : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["effectedConnects"] = this.effectedConnects ? this.effectedConnects.toJSON() : <any>null;
        data["hasReplyContent"] = this.hasReplyContent !== undefined ? this.hasReplyContent : <any>null;
        return data; 
    }
}

export interface IProgramDO {
    id: number;
    type: ProgramType;
    reason?: string | null;
    enabled: boolean;
    weeks: number;
    recurringCount: number;
    bookingToCompleteType: BookingToCompleteType;
    actions?: IActionDO[] | null;
    bookingTypes?: ISelectedBookingTypeDO[] | null;
    deleted: boolean;
    frequencyUnit?: string | null;
    frequencyValue: number;
    userLastModified?: string | null;
    effectedConnects?: IEffectedConnectsOnProgramDO | null;
    hasReplyContent: boolean;
}

export enum ProgramType {
    Recall = 1, 
    Program = 2, 
    Booking = 3, 
    Referral = 4, 
    General = 5, 
}

export enum BookingToCompleteType {
    Ignore = 0, 
    Any = 1, 
    Selected = 2, 
}

export class ActionDO implements IActionDO {
    id!: number;
    programId!: number;
    step!: number;
    action!: PcAction;
    actionDays!: number;
    actionName?: string | null;
    isNextAction!: boolean;
    smsTemplate?: string | null;
    letterTemplateId!: number;
    letterTemplateDescription?: string | null;
    description?: string | null;
    content!: boolean;
    contentField?: string | null;
    contentRangeType!: number;
    contentRangeHigh!: number;
    contentRangeLow!: number;
    pauseOnError!: boolean;
    printOption!: number;
    deleted!: boolean;
    actionDate?: Date | null;
    portalConfiguration?: PortalConfiguration | null;

    constructor(data?: IActionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.portalConfiguration = data.portalConfiguration && !(<any>data.portalConfiguration).toJSON ? new PortalConfiguration(data.portalConfiguration) : <PortalConfiguration>this.portalConfiguration; 
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.step = data["step"] !== undefined ? data["step"] : <any>null;
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.actionDays = data["actionDays"] !== undefined ? data["actionDays"] : <any>null;
            this.actionName = data["actionName"] !== undefined ? data["actionName"] : <any>null;
            this.isNextAction = data["isNextAction"] !== undefined ? data["isNextAction"] : <any>null;
            this.smsTemplate = data["smsTemplate"] !== undefined ? data["smsTemplate"] : <any>null;
            this.letterTemplateId = data["letterTemplateId"] !== undefined ? data["letterTemplateId"] : <any>null;
            this.letterTemplateDescription = data["letterTemplateDescription"] !== undefined ? data["letterTemplateDescription"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.contentField = data["contentField"] !== undefined ? data["contentField"] : <any>null;
            this.contentRangeType = data["contentRangeType"] !== undefined ? data["contentRangeType"] : <any>null;
            this.contentRangeHigh = data["contentRangeHigh"] !== undefined ? data["contentRangeHigh"] : <any>null;
            this.contentRangeLow = data["contentRangeLow"] !== undefined ? data["contentRangeLow"] : <any>null;
            this.pauseOnError = data["pauseOnError"] !== undefined ? data["pauseOnError"] : <any>null;
            this.printOption = data["printOption"] !== undefined ? data["printOption"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.actionDate = data["actionDate"] ? new Date(data["actionDate"].toString()) : <any>null;
            this.portalConfiguration = data["portalConfiguration"] ? PortalConfiguration.fromJS(data["portalConfiguration"]) : <any>null;
        }
    }

    static fromJS(data: any): ActionDO {
        data = typeof data === 'object' ? data : {};
        let result = new ActionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["step"] = this.step !== undefined ? this.step : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["actionDays"] = this.actionDays !== undefined ? this.actionDays : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["isNextAction"] = this.isNextAction !== undefined ? this.isNextAction : <any>null;
        data["smsTemplate"] = this.smsTemplate !== undefined ? this.smsTemplate : <any>null;
        data["letterTemplateId"] = this.letterTemplateId !== undefined ? this.letterTemplateId : <any>null;
        data["letterTemplateDescription"] = this.letterTemplateDescription !== undefined ? this.letterTemplateDescription : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["contentField"] = this.contentField !== undefined ? this.contentField : <any>null;
        data["contentRangeType"] = this.contentRangeType !== undefined ? this.contentRangeType : <any>null;
        data["contentRangeHigh"] = this.contentRangeHigh !== undefined ? this.contentRangeHigh : <any>null;
        data["contentRangeLow"] = this.contentRangeLow !== undefined ? this.contentRangeLow : <any>null;
        data["pauseOnError"] = this.pauseOnError !== undefined ? this.pauseOnError : <any>null;
        data["printOption"] = this.printOption !== undefined ? this.printOption : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["actionDate"] = this.actionDate ? this.actionDate.toISOString() : <any>null;
        data["portalConfiguration"] = this.portalConfiguration ? this.portalConfiguration.toJSON() : <any>null;
        return data; 
    }
}

export interface IActionDO {
    id: number;
    programId: number;
    step: number;
    action: PcAction;
    actionDays: number;
    actionName?: string | null;
    isNextAction: boolean;
    smsTemplate?: string | null;
    letterTemplateId: number;
    letterTemplateDescription?: string | null;
    description?: string | null;
    content: boolean;
    contentField?: string | null;
    contentRangeType: number;
    contentRangeHigh: number;
    contentRangeLow: number;
    pauseOnError: boolean;
    printOption: number;
    deleted: boolean;
    actionDate?: Date | null;
    portalConfiguration?: IPortalConfiguration | null;
}

export enum PcAction {
    All = 0, 
    Sms = 1, 
    LetterToPatient = 2, 
    LetterToGP = 3, 
    PauseUserAction = 4, 
    PauseUserActionWithOutError = 5, 
    EmailToPatient = 6, 
    Portal = 7, 
    CycleCompleted = 10001, 
    Deleted = 10002, 
}

export class PortalConfiguration implements IPortalConfiguration {
    messageList_ID!: number;
    documentsList?: number[] | null;
    screensList?: PortalScreenItem[] | null;

    constructor(data?: IPortalConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.screensList) {
                this.screensList = [];
                for (let i = 0; i < data.screensList.length; i++) {
                    let item = data.screensList[i];
                    this.screensList[i] = item && !(<any>item).toJSON ? new PortalScreenItem(item) : <PortalScreenItem>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageList_ID = data["messageList_ID"] !== undefined ? data["messageList_ID"] : <any>null;
            if (data["documentsList"] && data["documentsList"].constructor === Array) {
                this.documentsList = [];
                for (let item of data["documentsList"])
                    this.documentsList.push(item);
            }
            if (data["screensList"] && data["screensList"].constructor === Array) {
                this.screensList = [];
                for (let item of data["screensList"])
                    this.screensList.push(PortalScreenItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PortalConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new PortalConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageList_ID"] = this.messageList_ID !== undefined ? this.messageList_ID : <any>null;
        if (this.documentsList && this.documentsList.constructor === Array) {
            data["documentsList"] = [];
            for (let item of this.documentsList)
                data["documentsList"].push(item);
        }
        if (this.screensList && this.screensList.constructor === Array) {
            data["screensList"] = [];
            for (let item of this.screensList)
                data["screensList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPortalConfiguration {
    messageList_ID: number;
    documentsList?: number[] | null;
    screensList?: IPortalScreenItem[] | null;
}

export class PortalScreenItem implements IPortalScreenItem {
    list_ID!: number;
    displayOrder!: number;

    constructor(data?: IPortalScreenItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.list_ID = data["list_ID"] !== undefined ? data["list_ID"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
        }
    }

    static fromJS(data: any): PortalScreenItem {
        data = typeof data === 'object' ? data : {};
        let result = new PortalScreenItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["list_ID"] = this.list_ID !== undefined ? this.list_ID : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        return data; 
    }
}

export interface IPortalScreenItem {
    list_ID: number;
    displayOrder: number;
}

export class EffectedConnectsOnProgramDO implements IEffectedConnectsOnProgramDO {
    programId!: number;
    patientCount!: number;
    effectedConnectSteps?: EffectedConnectStepDO[] | null;

    constructor(data?: IEffectedConnectsOnProgramDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.effectedConnectSteps) {
                this.effectedConnectSteps = [];
                for (let i = 0; i < data.effectedConnectSteps.length; i++) {
                    let item = data.effectedConnectSteps[i];
                    this.effectedConnectSteps[i] = item && !(<any>item).toJSON ? new EffectedConnectStepDO(item) : <EffectedConnectStepDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.patientCount = data["patientCount"] !== undefined ? data["patientCount"] : <any>null;
            if (data["effectedConnectSteps"] && data["effectedConnectSteps"].constructor === Array) {
                this.effectedConnectSteps = [];
                for (let item of data["effectedConnectSteps"])
                    this.effectedConnectSteps.push(EffectedConnectStepDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EffectedConnectsOnProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new EffectedConnectsOnProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["patientCount"] = this.patientCount !== undefined ? this.patientCount : <any>null;
        if (this.effectedConnectSteps && this.effectedConnectSteps.constructor === Array) {
            data["effectedConnectSteps"] = [];
            for (let item of this.effectedConnectSteps)
                data["effectedConnectSteps"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEffectedConnectsOnProgramDO {
    programId: number;
    patientCount: number;
    effectedConnectSteps?: IEffectedConnectStepDO[] | null;
}

export class EffectedConnectStepDO implements IEffectedConnectStepDO {
    step!: number;
    stepAction?: string | null;
    effectedCount!: number;
    effectedNextStep!: number;
    effectedImmediately!: boolean;

    constructor(data?: IEffectedConnectStepDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.step = data["step"] !== undefined ? data["step"] : <any>null;
            this.stepAction = data["stepAction"] !== undefined ? data["stepAction"] : <any>null;
            this.effectedCount = data["effectedCount"] !== undefined ? data["effectedCount"] : <any>null;
            this.effectedNextStep = data["effectedNextStep"] !== undefined ? data["effectedNextStep"] : <any>null;
            this.effectedImmediately = data["effectedImmediately"] !== undefined ? data["effectedImmediately"] : <any>null;
        }
    }

    static fromJS(data: any): EffectedConnectStepDO {
        data = typeof data === 'object' ? data : {};
        let result = new EffectedConnectStepDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["step"] = this.step !== undefined ? this.step : <any>null;
        data["stepAction"] = this.stepAction !== undefined ? this.stepAction : <any>null;
        data["effectedCount"] = this.effectedCount !== undefined ? this.effectedCount : <any>null;
        data["effectedNextStep"] = this.effectedNextStep !== undefined ? this.effectedNextStep : <any>null;
        data["effectedImmediately"] = this.effectedImmediately !== undefined ? this.effectedImmediately : <any>null;
        return data; 
    }
}

export interface IEffectedConnectStepDO {
    step: number;
    stepAction?: string | null;
    effectedCount: number;
    effectedNextStep: number;
    effectedImmediately: boolean;
}

export class Patient implements IPatient {
    patient_ID!: number;
    company_ID?: number | null;
    firstName?: string | null;
    surname?: string | null;
    knownAs?: string | null;
    initials?: string | null;
    title?: string | null;
    sex?: string | null;
    dob?: Date | null;
    ethnicity?: string | null;
    family_ID?: number | null;
    inFamily!: boolean;
    hasAlias!: boolean;
    mrn?: string | null;
    occupation?: string | null;
    patientType!: number;
    homePhone?: string | null;
    workPhone?: string | null;
    mobile?: string | null;
    homeFax?: string | null;
    workFax?: string | null;
    email?: string | null;
    pStatus?: string | null;
    dateDeceased?: Date | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    note_ID?: number | null;
    snd_name?: string | null;
    cntBookingNoShow?: number | null;
    cntBookingCancel?: number | null;
    cntBookingChange?: number | null;
    medicare?: string | null;
    medicareRefNo?: string | null;
    mediExpYYYY?: number | null;
    mediExpMM?: number | null;
    medicareVerifyDate?: Date | null;
    vetAffairs?: string | null;
    healthFundID?: number | null;
    fundNumber?: string | null;
    fundNumberUPI?: string | null;
    fundExpYYYY?: number | null;
    fundExpMM?: number | null;
    fundPlan?: number | null;
    feeTable_ID?: number | null;
    attendingMO?: number | null;
    primaryHealthProvider?: number | null;
    lastVisitGP?: Date | null;
    treatmentLocation?: number | null;
    fullReg?: boolean | null;
    billingType?: number | null;
    hospitalBillingClass?: string | null;
    privacyDisclaimer?: boolean | null;
    archive?: boolean | null;
    pensionNumber?: string | null;
    commenced?: Date | null;
    ceased?: Date | null;
    userIdentifier1?: string | null;
    userIdentifier2?: string | null;
    extPatient_ID?: string | null;
    possibleDuplicate!: boolean;
    deleted!: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    jobtitle?: string | null;
    primaryPhone?: number | null;
    dateFirstBooking?: Date | null;
    dateFirstInvoice?: Date | null;
    alertBilling!: boolean;
    alertPatientNote!: boolean;
    alertUser1!: number;
    alertUser2!: number;
    ctimestamp?: string | null;
    patientInfoForm!: boolean;
    inpatient!: boolean;
    ward?: string | null;
    dateLatestBooking?: Date | null;
    noStatementDate?: Date | null;
    noStatementReason?: string | null;
    accountHoldDate?: Date | null;
    accountHoldReason?: string | null;
    programLatestExpiryDate?: Date | null;
    chartDoNotMove!: boolean;
    lastSuccessfulPVM?: Date | null;
    lastSuccessfulPVF?: Date | null;
    lastSuccessfulOVV?: Date | null;
    familyHistoryPresent!: boolean;
    allergiesPresent!: boolean;
    transport?: number | null;
    mrN_Feed?: number | null;
    birthOrder!: number;
    allowAutomatedSMS?: boolean | null;
    surnameSoundex?: string | null;
    preferredPhone?: string | null;
    devicesNotRecorded?: number | null;
    clinicalNote?: number | null;
    dvaCardType?: number | null;
    hasCustomFieldAlerts!: boolean;
    patient1?: Patient[] | null;
    patient2?: Patient | null;
    addresses?: Address[] | null;
    alerts?: Alert[] | null;
    allergies?: Allergy[] | null;
    hL7_PatientMapping?: HL7_PatientMapping[] | null;
    nextOfKins?: NextOfKin[] | null;
    queue_MergeRequest?: Queue_MergeRequest[] | null;
    queue_MergeRequest1?: Queue_MergeRequest[] | null;
    company?: Company | null;
    patient_Alias?: Patient_Alias[] | null;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.patient1) {
                this.patient1 = [];
                for (let i = 0; i < data.patient1.length; i++) {
                    let item = data.patient1[i];
                    this.patient1[i] = item && !(<any>item).toJSON ? new Patient(item) : <Patient>item;
                }
            }
            this.patient2 = data.patient2 && !(<any>data.patient2).toJSON ? new Patient(data.patient2) : <Patient>this.patient2; 
            if (data.addresses) {
                this.addresses = [];
                for (let i = 0; i < data.addresses.length; i++) {
                    let item = data.addresses[i];
                    this.addresses[i] = item && !(<any>item).toJSON ? new Address(item) : <Address>item;
                }
            }
            if (data.alerts) {
                this.alerts = [];
                for (let i = 0; i < data.alerts.length; i++) {
                    let item = data.alerts[i];
                    this.alerts[i] = item && !(<any>item).toJSON ? new Alert(item) : <Alert>item;
                }
            }
            if (data.allergies) {
                this.allergies = [];
                for (let i = 0; i < data.allergies.length; i++) {
                    let item = data.allergies[i];
                    this.allergies[i] = item && !(<any>item).toJSON ? new Allergy(item) : <Allergy>item;
                }
            }
            if (data.hL7_PatientMapping) {
                this.hL7_PatientMapping = [];
                for (let i = 0; i < data.hL7_PatientMapping.length; i++) {
                    let item = data.hL7_PatientMapping[i];
                    this.hL7_PatientMapping[i] = item && !(<any>item).toJSON ? new HL7_PatientMapping(item) : <HL7_PatientMapping>item;
                }
            }
            if (data.nextOfKins) {
                this.nextOfKins = [];
                for (let i = 0; i < data.nextOfKins.length; i++) {
                    let item = data.nextOfKins[i];
                    this.nextOfKins[i] = item && !(<any>item).toJSON ? new NextOfKin(item) : <NextOfKin>item;
                }
            }
            if (data.queue_MergeRequest) {
                this.queue_MergeRequest = [];
                for (let i = 0; i < data.queue_MergeRequest.length; i++) {
                    let item = data.queue_MergeRequest[i];
                    this.queue_MergeRequest[i] = item && !(<any>item).toJSON ? new Queue_MergeRequest(item) : <Queue_MergeRequest>item;
                }
            }
            if (data.queue_MergeRequest1) {
                this.queue_MergeRequest1 = [];
                for (let i = 0; i < data.queue_MergeRequest1.length; i++) {
                    let item = data.queue_MergeRequest1[i];
                    this.queue_MergeRequest1[i] = item && !(<any>item).toJSON ? new Queue_MergeRequest(item) : <Queue_MergeRequest>item;
                }
            }
            this.company = data.company && !(<any>data.company).toJSON ? new Company(data.company) : <Company>this.company; 
            if (data.patient_Alias) {
                this.patient_Alias = [];
                for (let i = 0; i < data.patient_Alias.length; i++) {
                    let item = data.patient_Alias[i];
                    this.patient_Alias[i] = item && !(<any>item).toJSON ? new Patient_Alias(item) : <Patient_Alias>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.knownAs = data["knownAs"] !== undefined ? data["knownAs"] : <any>null;
            this.initials = data["initials"] !== undefined ? data["initials"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.sex = data["sex"] !== undefined ? data["sex"] : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
            this.ethnicity = data["ethnicity"] !== undefined ? data["ethnicity"] : <any>null;
            this.family_ID = data["family_ID"] !== undefined ? data["family_ID"] : <any>null;
            this.inFamily = data["inFamily"] !== undefined ? data["inFamily"] : <any>null;
            this.hasAlias = data["hasAlias"] !== undefined ? data["hasAlias"] : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.occupation = data["occupation"] !== undefined ? data["occupation"] : <any>null;
            this.patientType = data["patientType"] !== undefined ? data["patientType"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.homeFax = data["homeFax"] !== undefined ? data["homeFax"] : <any>null;
            this.workFax = data["workFax"] !== undefined ? data["workFax"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.pStatus = data["pStatus"] !== undefined ? data["pStatus"] : <any>null;
            this.dateDeceased = data["dateDeceased"] ? new Date(data["dateDeceased"].toString()) : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.snd_name = data["snd_name"] !== undefined ? data["snd_name"] : <any>null;
            this.cntBookingNoShow = data["cntBookingNoShow"] !== undefined ? data["cntBookingNoShow"] : <any>null;
            this.cntBookingCancel = data["cntBookingCancel"] !== undefined ? data["cntBookingCancel"] : <any>null;
            this.cntBookingChange = data["cntBookingChange"] !== undefined ? data["cntBookingChange"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.medicareRefNo = data["medicareRefNo"] !== undefined ? data["medicareRefNo"] : <any>null;
            this.mediExpYYYY = data["mediExpYYYY"] !== undefined ? data["mediExpYYYY"] : <any>null;
            this.mediExpMM = data["mediExpMM"] !== undefined ? data["mediExpMM"] : <any>null;
            this.medicareVerifyDate = data["medicareVerifyDate"] ? new Date(data["medicareVerifyDate"].toString()) : <any>null;
            this.vetAffairs = data["vetAffairs"] !== undefined ? data["vetAffairs"] : <any>null;
            this.healthFundID = data["healthFundID"] !== undefined ? data["healthFundID"] : <any>null;
            this.fundNumber = data["fundNumber"] !== undefined ? data["fundNumber"] : <any>null;
            this.fundNumberUPI = data["fundNumberUPI"] !== undefined ? data["fundNumberUPI"] : <any>null;
            this.fundExpYYYY = data["fundExpYYYY"] !== undefined ? data["fundExpYYYY"] : <any>null;
            this.fundExpMM = data["fundExpMM"] !== undefined ? data["fundExpMM"] : <any>null;
            this.fundPlan = data["fundPlan"] !== undefined ? data["fundPlan"] : <any>null;
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.attendingMO = data["attendingMO"] !== undefined ? data["attendingMO"] : <any>null;
            this.primaryHealthProvider = data["primaryHealthProvider"] !== undefined ? data["primaryHealthProvider"] : <any>null;
            this.lastVisitGP = data["lastVisitGP"] ? new Date(data["lastVisitGP"].toString()) : <any>null;
            this.treatmentLocation = data["treatmentLocation"] !== undefined ? data["treatmentLocation"] : <any>null;
            this.fullReg = data["fullReg"] !== undefined ? data["fullReg"] : <any>null;
            this.billingType = data["billingType"] !== undefined ? data["billingType"] : <any>null;
            this.hospitalBillingClass = data["hospitalBillingClass"] !== undefined ? data["hospitalBillingClass"] : <any>null;
            this.privacyDisclaimer = data["privacyDisclaimer"] !== undefined ? data["privacyDisclaimer"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
            this.pensionNumber = data["pensionNumber"] !== undefined ? data["pensionNumber"] : <any>null;
            this.commenced = data["commenced"] ? new Date(data["commenced"].toString()) : <any>null;
            this.ceased = data["ceased"] ? new Date(data["ceased"].toString()) : <any>null;
            this.userIdentifier1 = data["userIdentifier1"] !== undefined ? data["userIdentifier1"] : <any>null;
            this.userIdentifier2 = data["userIdentifier2"] !== undefined ? data["userIdentifier2"] : <any>null;
            this.extPatient_ID = data["extPatient_ID"] !== undefined ? data["extPatient_ID"] : <any>null;
            this.possibleDuplicate = data["possibleDuplicate"] !== undefined ? data["possibleDuplicate"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.jobtitle = data["jobtitle"] !== undefined ? data["jobtitle"] : <any>null;
            this.primaryPhone = data["primaryPhone"] !== undefined ? data["primaryPhone"] : <any>null;
            this.dateFirstBooking = data["dateFirstBooking"] ? new Date(data["dateFirstBooking"].toString()) : <any>null;
            this.dateFirstInvoice = data["dateFirstInvoice"] ? new Date(data["dateFirstInvoice"].toString()) : <any>null;
            this.alertBilling = data["alertBilling"] !== undefined ? data["alertBilling"] : <any>null;
            this.alertPatientNote = data["alertPatientNote"] !== undefined ? data["alertPatientNote"] : <any>null;
            this.alertUser1 = data["alertUser1"] !== undefined ? data["alertUser1"] : <any>null;
            this.alertUser2 = data["alertUser2"] !== undefined ? data["alertUser2"] : <any>null;
            this.ctimestamp = data["ctimestamp"] !== undefined ? data["ctimestamp"] : <any>null;
            this.patientInfoForm = data["patientInfoForm"] !== undefined ? data["patientInfoForm"] : <any>null;
            this.inpatient = data["inpatient"] !== undefined ? data["inpatient"] : <any>null;
            this.ward = data["ward"] !== undefined ? data["ward"] : <any>null;
            this.dateLatestBooking = data["dateLatestBooking"] ? new Date(data["dateLatestBooking"].toString()) : <any>null;
            this.noStatementDate = data["noStatementDate"] ? new Date(data["noStatementDate"].toString()) : <any>null;
            this.noStatementReason = data["noStatementReason"] !== undefined ? data["noStatementReason"] : <any>null;
            this.accountHoldDate = data["accountHoldDate"] ? new Date(data["accountHoldDate"].toString()) : <any>null;
            this.accountHoldReason = data["accountHoldReason"] !== undefined ? data["accountHoldReason"] : <any>null;
            this.programLatestExpiryDate = data["programLatestExpiryDate"] ? new Date(data["programLatestExpiryDate"].toString()) : <any>null;
            this.chartDoNotMove = data["chartDoNotMove"] !== undefined ? data["chartDoNotMove"] : <any>null;
            this.lastSuccessfulPVM = data["lastSuccessfulPVM"] ? new Date(data["lastSuccessfulPVM"].toString()) : <any>null;
            this.lastSuccessfulPVF = data["lastSuccessfulPVF"] ? new Date(data["lastSuccessfulPVF"].toString()) : <any>null;
            this.lastSuccessfulOVV = data["lastSuccessfulOVV"] ? new Date(data["lastSuccessfulOVV"].toString()) : <any>null;
            this.familyHistoryPresent = data["familyHistoryPresent"] !== undefined ? data["familyHistoryPresent"] : <any>null;
            this.allergiesPresent = data["allergiesPresent"] !== undefined ? data["allergiesPresent"] : <any>null;
            this.transport = data["transport"] !== undefined ? data["transport"] : <any>null;
            this.mrN_Feed = data["mrN_Feed"] !== undefined ? data["mrN_Feed"] : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
            this.allowAutomatedSMS = data["allowAutomatedSMS"] !== undefined ? data["allowAutomatedSMS"] : <any>null;
            this.surnameSoundex = data["surnameSoundex"] !== undefined ? data["surnameSoundex"] : <any>null;
            this.preferredPhone = data["preferredPhone"] !== undefined ? data["preferredPhone"] : <any>null;
            this.devicesNotRecorded = data["devicesNotRecorded"] !== undefined ? data["devicesNotRecorded"] : <any>null;
            this.clinicalNote = data["clinicalNote"] !== undefined ? data["clinicalNote"] : <any>null;
            this.dvaCardType = data["dvaCardType"] !== undefined ? data["dvaCardType"] : <any>null;
            this.hasCustomFieldAlerts = data["hasCustomFieldAlerts"] !== undefined ? data["hasCustomFieldAlerts"] : <any>null;
            if (data["patient1"] && data["patient1"].constructor === Array) {
                this.patient1 = [];
                for (let item of data["patient1"])
                    this.patient1.push(Patient.fromJS(item));
            }
            this.patient2 = data["patient2"] ? Patient.fromJS(data["patient2"]) : <any>null;
            if (data["addresses"] && data["addresses"].constructor === Array) {
                this.addresses = [];
                for (let item of data["addresses"])
                    this.addresses.push(Address.fromJS(item));
            }
            if (data["alerts"] && data["alerts"].constructor === Array) {
                this.alerts = [];
                for (let item of data["alerts"])
                    this.alerts.push(Alert.fromJS(item));
            }
            if (data["allergies"] && data["allergies"].constructor === Array) {
                this.allergies = [];
                for (let item of data["allergies"])
                    this.allergies.push(Allergy.fromJS(item));
            }
            if (data["hL7_PatientMapping"] && data["hL7_PatientMapping"].constructor === Array) {
                this.hL7_PatientMapping = [];
                for (let item of data["hL7_PatientMapping"])
                    this.hL7_PatientMapping.push(HL7_PatientMapping.fromJS(item));
            }
            if (data["nextOfKins"] && data["nextOfKins"].constructor === Array) {
                this.nextOfKins = [];
                for (let item of data["nextOfKins"])
                    this.nextOfKins.push(NextOfKin.fromJS(item));
            }
            if (data["queue_MergeRequest"] && data["queue_MergeRequest"].constructor === Array) {
                this.queue_MergeRequest = [];
                for (let item of data["queue_MergeRequest"])
                    this.queue_MergeRequest.push(Queue_MergeRequest.fromJS(item));
            }
            if (data["queue_MergeRequest1"] && data["queue_MergeRequest1"].constructor === Array) {
                this.queue_MergeRequest1 = [];
                for (let item of data["queue_MergeRequest1"])
                    this.queue_MergeRequest1.push(Queue_MergeRequest.fromJS(item));
            }
            this.company = data["company"] ? Company.fromJS(data["company"]) : <any>null;
            if (data["patient_Alias"] && data["patient_Alias"].constructor === Array) {
                this.patient_Alias = [];
                for (let item of data["patient_Alias"])
                    this.patient_Alias.push(Patient_Alias.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["knownAs"] = this.knownAs !== undefined ? this.knownAs : <any>null;
        data["initials"] = this.initials !== undefined ? this.initials : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["sex"] = this.sex !== undefined ? this.sex : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        data["ethnicity"] = this.ethnicity !== undefined ? this.ethnicity : <any>null;
        data["family_ID"] = this.family_ID !== undefined ? this.family_ID : <any>null;
        data["inFamily"] = this.inFamily !== undefined ? this.inFamily : <any>null;
        data["hasAlias"] = this.hasAlias !== undefined ? this.hasAlias : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["occupation"] = this.occupation !== undefined ? this.occupation : <any>null;
        data["patientType"] = this.patientType !== undefined ? this.patientType : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["homeFax"] = this.homeFax !== undefined ? this.homeFax : <any>null;
        data["workFax"] = this.workFax !== undefined ? this.workFax : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["pStatus"] = this.pStatus !== undefined ? this.pStatus : <any>null;
        data["dateDeceased"] = this.dateDeceased ? this.dateDeceased.toISOString() : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["snd_name"] = this.snd_name !== undefined ? this.snd_name : <any>null;
        data["cntBookingNoShow"] = this.cntBookingNoShow !== undefined ? this.cntBookingNoShow : <any>null;
        data["cntBookingCancel"] = this.cntBookingCancel !== undefined ? this.cntBookingCancel : <any>null;
        data["cntBookingChange"] = this.cntBookingChange !== undefined ? this.cntBookingChange : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["medicareRefNo"] = this.medicareRefNo !== undefined ? this.medicareRefNo : <any>null;
        data["mediExpYYYY"] = this.mediExpYYYY !== undefined ? this.mediExpYYYY : <any>null;
        data["mediExpMM"] = this.mediExpMM !== undefined ? this.mediExpMM : <any>null;
        data["medicareVerifyDate"] = this.medicareVerifyDate ? this.medicareVerifyDate.toISOString() : <any>null;
        data["vetAffairs"] = this.vetAffairs !== undefined ? this.vetAffairs : <any>null;
        data["healthFundID"] = this.healthFundID !== undefined ? this.healthFundID : <any>null;
        data["fundNumber"] = this.fundNumber !== undefined ? this.fundNumber : <any>null;
        data["fundNumberUPI"] = this.fundNumberUPI !== undefined ? this.fundNumberUPI : <any>null;
        data["fundExpYYYY"] = this.fundExpYYYY !== undefined ? this.fundExpYYYY : <any>null;
        data["fundExpMM"] = this.fundExpMM !== undefined ? this.fundExpMM : <any>null;
        data["fundPlan"] = this.fundPlan !== undefined ? this.fundPlan : <any>null;
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["attendingMO"] = this.attendingMO !== undefined ? this.attendingMO : <any>null;
        data["primaryHealthProvider"] = this.primaryHealthProvider !== undefined ? this.primaryHealthProvider : <any>null;
        data["lastVisitGP"] = this.lastVisitGP ? this.lastVisitGP.toISOString() : <any>null;
        data["treatmentLocation"] = this.treatmentLocation !== undefined ? this.treatmentLocation : <any>null;
        data["fullReg"] = this.fullReg !== undefined ? this.fullReg : <any>null;
        data["billingType"] = this.billingType !== undefined ? this.billingType : <any>null;
        data["hospitalBillingClass"] = this.hospitalBillingClass !== undefined ? this.hospitalBillingClass : <any>null;
        data["privacyDisclaimer"] = this.privacyDisclaimer !== undefined ? this.privacyDisclaimer : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        data["pensionNumber"] = this.pensionNumber !== undefined ? this.pensionNumber : <any>null;
        data["commenced"] = this.commenced ? this.commenced.toISOString() : <any>null;
        data["ceased"] = this.ceased ? this.ceased.toISOString() : <any>null;
        data["userIdentifier1"] = this.userIdentifier1 !== undefined ? this.userIdentifier1 : <any>null;
        data["userIdentifier2"] = this.userIdentifier2 !== undefined ? this.userIdentifier2 : <any>null;
        data["extPatient_ID"] = this.extPatient_ID !== undefined ? this.extPatient_ID : <any>null;
        data["possibleDuplicate"] = this.possibleDuplicate !== undefined ? this.possibleDuplicate : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["jobtitle"] = this.jobtitle !== undefined ? this.jobtitle : <any>null;
        data["primaryPhone"] = this.primaryPhone !== undefined ? this.primaryPhone : <any>null;
        data["dateFirstBooking"] = this.dateFirstBooking ? this.dateFirstBooking.toISOString() : <any>null;
        data["dateFirstInvoice"] = this.dateFirstInvoice ? this.dateFirstInvoice.toISOString() : <any>null;
        data["alertBilling"] = this.alertBilling !== undefined ? this.alertBilling : <any>null;
        data["alertPatientNote"] = this.alertPatientNote !== undefined ? this.alertPatientNote : <any>null;
        data["alertUser1"] = this.alertUser1 !== undefined ? this.alertUser1 : <any>null;
        data["alertUser2"] = this.alertUser2 !== undefined ? this.alertUser2 : <any>null;
        data["ctimestamp"] = this.ctimestamp !== undefined ? this.ctimestamp : <any>null;
        data["patientInfoForm"] = this.patientInfoForm !== undefined ? this.patientInfoForm : <any>null;
        data["inpatient"] = this.inpatient !== undefined ? this.inpatient : <any>null;
        data["ward"] = this.ward !== undefined ? this.ward : <any>null;
        data["dateLatestBooking"] = this.dateLatestBooking ? this.dateLatestBooking.toISOString() : <any>null;
        data["noStatementDate"] = this.noStatementDate ? this.noStatementDate.toISOString() : <any>null;
        data["noStatementReason"] = this.noStatementReason !== undefined ? this.noStatementReason : <any>null;
        data["accountHoldDate"] = this.accountHoldDate ? this.accountHoldDate.toISOString() : <any>null;
        data["accountHoldReason"] = this.accountHoldReason !== undefined ? this.accountHoldReason : <any>null;
        data["programLatestExpiryDate"] = this.programLatestExpiryDate ? this.programLatestExpiryDate.toISOString() : <any>null;
        data["chartDoNotMove"] = this.chartDoNotMove !== undefined ? this.chartDoNotMove : <any>null;
        data["lastSuccessfulPVM"] = this.lastSuccessfulPVM ? this.lastSuccessfulPVM.toISOString() : <any>null;
        data["lastSuccessfulPVF"] = this.lastSuccessfulPVF ? this.lastSuccessfulPVF.toISOString() : <any>null;
        data["lastSuccessfulOVV"] = this.lastSuccessfulOVV ? this.lastSuccessfulOVV.toISOString() : <any>null;
        data["familyHistoryPresent"] = this.familyHistoryPresent !== undefined ? this.familyHistoryPresent : <any>null;
        data["allergiesPresent"] = this.allergiesPresent !== undefined ? this.allergiesPresent : <any>null;
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["mrN_Feed"] = this.mrN_Feed !== undefined ? this.mrN_Feed : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        data["allowAutomatedSMS"] = this.allowAutomatedSMS !== undefined ? this.allowAutomatedSMS : <any>null;
        data["surnameSoundex"] = this.surnameSoundex !== undefined ? this.surnameSoundex : <any>null;
        data["preferredPhone"] = this.preferredPhone !== undefined ? this.preferredPhone : <any>null;
        data["devicesNotRecorded"] = this.devicesNotRecorded !== undefined ? this.devicesNotRecorded : <any>null;
        data["clinicalNote"] = this.clinicalNote !== undefined ? this.clinicalNote : <any>null;
        data["dvaCardType"] = this.dvaCardType !== undefined ? this.dvaCardType : <any>null;
        data["hasCustomFieldAlerts"] = this.hasCustomFieldAlerts !== undefined ? this.hasCustomFieldAlerts : <any>null;
        if (this.patient1 && this.patient1.constructor === Array) {
            data["patient1"] = [];
            for (let item of this.patient1)
                data["patient1"].push(item.toJSON());
        }
        data["patient2"] = this.patient2 ? this.patient2.toJSON() : <any>null;
        if (this.addresses && this.addresses.constructor === Array) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (this.alerts && this.alerts.constructor === Array) {
            data["alerts"] = [];
            for (let item of this.alerts)
                data["alerts"].push(item.toJSON());
        }
        if (this.allergies && this.allergies.constructor === Array) {
            data["allergies"] = [];
            for (let item of this.allergies)
                data["allergies"].push(item.toJSON());
        }
        if (this.hL7_PatientMapping && this.hL7_PatientMapping.constructor === Array) {
            data["hL7_PatientMapping"] = [];
            for (let item of this.hL7_PatientMapping)
                data["hL7_PatientMapping"].push(item.toJSON());
        }
        if (this.nextOfKins && this.nextOfKins.constructor === Array) {
            data["nextOfKins"] = [];
            for (let item of this.nextOfKins)
                data["nextOfKins"].push(item.toJSON());
        }
        if (this.queue_MergeRequest && this.queue_MergeRequest.constructor === Array) {
            data["queue_MergeRequest"] = [];
            for (let item of this.queue_MergeRequest)
                data["queue_MergeRequest"].push(item.toJSON());
        }
        if (this.queue_MergeRequest1 && this.queue_MergeRequest1.constructor === Array) {
            data["queue_MergeRequest1"] = [];
            for (let item of this.queue_MergeRequest1)
                data["queue_MergeRequest1"].push(item.toJSON());
        }
        data["company"] = this.company ? this.company.toJSON() : <any>null;
        if (this.patient_Alias && this.patient_Alias.constructor === Array) {
            data["patient_Alias"] = [];
            for (let item of this.patient_Alias)
                data["patient_Alias"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPatient {
    patient_ID: number;
    company_ID?: number | null;
    firstName?: string | null;
    surname?: string | null;
    knownAs?: string | null;
    initials?: string | null;
    title?: string | null;
    sex?: string | null;
    dob?: Date | null;
    ethnicity?: string | null;
    family_ID?: number | null;
    inFamily: boolean;
    hasAlias: boolean;
    mrn?: string | null;
    occupation?: string | null;
    patientType: number;
    homePhone?: string | null;
    workPhone?: string | null;
    mobile?: string | null;
    homeFax?: string | null;
    workFax?: string | null;
    email?: string | null;
    pStatus?: string | null;
    dateDeceased?: Date | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    note_ID?: number | null;
    snd_name?: string | null;
    cntBookingNoShow?: number | null;
    cntBookingCancel?: number | null;
    cntBookingChange?: number | null;
    medicare?: string | null;
    medicareRefNo?: string | null;
    mediExpYYYY?: number | null;
    mediExpMM?: number | null;
    medicareVerifyDate?: Date | null;
    vetAffairs?: string | null;
    healthFundID?: number | null;
    fundNumber?: string | null;
    fundNumberUPI?: string | null;
    fundExpYYYY?: number | null;
    fundExpMM?: number | null;
    fundPlan?: number | null;
    feeTable_ID?: number | null;
    attendingMO?: number | null;
    primaryHealthProvider?: number | null;
    lastVisitGP?: Date | null;
    treatmentLocation?: number | null;
    fullReg?: boolean | null;
    billingType?: number | null;
    hospitalBillingClass?: string | null;
    privacyDisclaimer?: boolean | null;
    archive?: boolean | null;
    pensionNumber?: string | null;
    commenced?: Date | null;
    ceased?: Date | null;
    userIdentifier1?: string | null;
    userIdentifier2?: string | null;
    extPatient_ID?: string | null;
    possibleDuplicate: boolean;
    deleted: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    jobtitle?: string | null;
    primaryPhone?: number | null;
    dateFirstBooking?: Date | null;
    dateFirstInvoice?: Date | null;
    alertBilling: boolean;
    alertPatientNote: boolean;
    alertUser1: number;
    alertUser2: number;
    ctimestamp?: string | null;
    patientInfoForm: boolean;
    inpatient: boolean;
    ward?: string | null;
    dateLatestBooking?: Date | null;
    noStatementDate?: Date | null;
    noStatementReason?: string | null;
    accountHoldDate?: Date | null;
    accountHoldReason?: string | null;
    programLatestExpiryDate?: Date | null;
    chartDoNotMove: boolean;
    lastSuccessfulPVM?: Date | null;
    lastSuccessfulPVF?: Date | null;
    lastSuccessfulOVV?: Date | null;
    familyHistoryPresent: boolean;
    allergiesPresent: boolean;
    transport?: number | null;
    mrN_Feed?: number | null;
    birthOrder: number;
    allowAutomatedSMS?: boolean | null;
    surnameSoundex?: string | null;
    preferredPhone?: string | null;
    devicesNotRecorded?: number | null;
    clinicalNote?: number | null;
    dvaCardType?: number | null;
    hasCustomFieldAlerts: boolean;
    patient1?: IPatient[] | null;
    patient2?: IPatient | null;
    addresses?: IAddress[] | null;
    alerts?: IAlert[] | null;
    allergies?: IAllergy[] | null;
    hL7_PatientMapping?: IHL7_PatientMapping[] | null;
    nextOfKins?: INextOfKin[] | null;
    queue_MergeRequest?: IQueue_MergeRequest[] | null;
    queue_MergeRequest1?: IQueue_MergeRequest[] | null;
    company?: ICompany | null;
    patient_Alias?: IPatient_Alias[] | null;
}

export class Address implements IAddress {
    owner_ID!: number;
    addressType!: number;
    primaryAddress!: boolean;
    invoiceAddress!: boolean;
    mailingAddress!: boolean;
    address1?: string | null;
    address2?: string | null;
    suburb?: string | null;
    postcode?: string | null;
    country?: string | null;
    state?: string | null;
    department?: string | null;
    description?: string | null;
    patient?: Patient | null;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.owner_ID = data["owner_ID"] !== undefined ? data["owner_ID"] : <any>null;
            this.addressType = data["addressType"] !== undefined ? data["addressType"] : <any>null;
            this.primaryAddress = data["primaryAddress"] !== undefined ? data["primaryAddress"] : <any>null;
            this.invoiceAddress = data["invoiceAddress"] !== undefined ? data["invoiceAddress"] : <any>null;
            this.mailingAddress = data["mailingAddress"] !== undefined ? data["mailingAddress"] : <any>null;
            this.address1 = data["address1"] !== undefined ? data["address1"] : <any>null;
            this.address2 = data["address2"] !== undefined ? data["address2"] : <any>null;
            this.suburb = data["suburb"] !== undefined ? data["suburb"] : <any>null;
            this.postcode = data["postcode"] !== undefined ? data["postcode"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.department = data["department"] !== undefined ? data["department"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["owner_ID"] = this.owner_ID !== undefined ? this.owner_ID : <any>null;
        data["addressType"] = this.addressType !== undefined ? this.addressType : <any>null;
        data["primaryAddress"] = this.primaryAddress !== undefined ? this.primaryAddress : <any>null;
        data["invoiceAddress"] = this.invoiceAddress !== undefined ? this.invoiceAddress : <any>null;
        data["mailingAddress"] = this.mailingAddress !== undefined ? this.mailingAddress : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["suburb"] = this.suburb !== undefined ? this.suburb : <any>null;
        data["postcode"] = this.postcode !== undefined ? this.postcode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["department"] = this.department !== undefined ? this.department : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface IAddress {
    owner_ID: number;
    addressType: number;
    primaryAddress: boolean;
    invoiceAddress: boolean;
    mailingAddress: boolean;
    address1?: string | null;
    address2?: string | null;
    suburb?: string | null;
    postcode?: string | null;
    country?: string | null;
    state?: string | null;
    department?: string | null;
    description?: string | null;
    patient?: IPatient | null;
}

export class Alert implements IAlert {
    alert_ID!: number;
    patient_ID!: number;
    type!: number;
    message?: string | null;
    user_ID?: string | null;
    role?: number | null;
    source?: number | null;
    source_ID?: number | null;
    dateCreated!: Date;
    startDate?: Date | null;
    endDate?: Date | null;
    dueDate?: Date | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    patient?: Patient | null;

    constructor(data?: IAlert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.alert_ID = data["alert_ID"] !== undefined ? data["alert_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.user_ID = data["user_ID"] !== undefined ? data["user_ID"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.source_ID = data["source_ID"] !== undefined ? data["source_ID"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): Alert {
        data = typeof data === 'object' ? data : {};
        let result = new Alert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alert_ID"] = this.alert_ID !== undefined ? this.alert_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["user_ID"] = this.user_ID !== undefined ? this.user_ID : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["source_ID"] = this.source_ID !== undefined ? this.source_ID : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface IAlert {
    alert_ID: number;
    patient_ID: number;
    type: number;
    message?: string | null;
    user_ID?: string | null;
    role?: number | null;
    source?: number | null;
    source_ID?: number | null;
    dateCreated: Date;
    startDate?: Date | null;
    endDate?: Date | null;
    dueDate?: Date | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    patient?: IPatient | null;
}

export class Allergy implements IAllergy {
    allergy_ID!: number;
    patient_ID!: number;
    note_ID?: number | null;
    allergy_Type?: string | null;
    allergy_Code?: string | null;
    allergy_Severity?: string | null;
    allergy_IdentificationDate?: Date | null;
    allergy_Reaction?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    allergy_StartDate?: Date | null;
    allergy_ExposureDate?: Date | null;
    allergy_AdverseReactionPresence?: number | null;
    allergy_InformationProvidedBy?: number | null;
    allergy_AgentCertainty?: number | null;
    allergy_RactionType?: number | null;
    allergy_ReactionDescription?: string | null;
    allergy_AdverseReactionStatus?: number | null;
    allergy_AdverseReactionOutcome?: number | null;
    allergy_Reporter?: string | null;
    allergy_Alert?: boolean | null;
    allergy_Current!: boolean;
    patient?: Patient | null;

    constructor(data?: IAllergy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.allergy_ID = data["allergy_ID"] !== undefined ? data["allergy_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.allergy_Type = data["allergy_Type"] !== undefined ? data["allergy_Type"] : <any>null;
            this.allergy_Code = data["allergy_Code"] !== undefined ? data["allergy_Code"] : <any>null;
            this.allergy_Severity = data["allergy_Severity"] !== undefined ? data["allergy_Severity"] : <any>null;
            this.allergy_IdentificationDate = data["allergy_IdentificationDate"] ? new Date(data["allergy_IdentificationDate"].toString()) : <any>null;
            this.allergy_Reaction = data["allergy_Reaction"] !== undefined ? data["allergy_Reaction"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.allergy_StartDate = data["allergy_StartDate"] ? new Date(data["allergy_StartDate"].toString()) : <any>null;
            this.allergy_ExposureDate = data["allergy_ExposureDate"] ? new Date(data["allergy_ExposureDate"].toString()) : <any>null;
            this.allergy_AdverseReactionPresence = data["allergy_AdverseReactionPresence"] !== undefined ? data["allergy_AdverseReactionPresence"] : <any>null;
            this.allergy_InformationProvidedBy = data["allergy_InformationProvidedBy"] !== undefined ? data["allergy_InformationProvidedBy"] : <any>null;
            this.allergy_AgentCertainty = data["allergy_AgentCertainty"] !== undefined ? data["allergy_AgentCertainty"] : <any>null;
            this.allergy_RactionType = data["allergy_RactionType"] !== undefined ? data["allergy_RactionType"] : <any>null;
            this.allergy_ReactionDescription = data["allergy_ReactionDescription"] !== undefined ? data["allergy_ReactionDescription"] : <any>null;
            this.allergy_AdverseReactionStatus = data["allergy_AdverseReactionStatus"] !== undefined ? data["allergy_AdverseReactionStatus"] : <any>null;
            this.allergy_AdverseReactionOutcome = data["allergy_AdverseReactionOutcome"] !== undefined ? data["allergy_AdverseReactionOutcome"] : <any>null;
            this.allergy_Reporter = data["allergy_Reporter"] !== undefined ? data["allergy_Reporter"] : <any>null;
            this.allergy_Alert = data["allergy_Alert"] !== undefined ? data["allergy_Alert"] : <any>null;
            this.allergy_Current = data["allergy_Current"] !== undefined ? data["allergy_Current"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): Allergy {
        data = typeof data === 'object' ? data : {};
        let result = new Allergy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allergy_ID"] = this.allergy_ID !== undefined ? this.allergy_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["allergy_Type"] = this.allergy_Type !== undefined ? this.allergy_Type : <any>null;
        data["allergy_Code"] = this.allergy_Code !== undefined ? this.allergy_Code : <any>null;
        data["allergy_Severity"] = this.allergy_Severity !== undefined ? this.allergy_Severity : <any>null;
        data["allergy_IdentificationDate"] = this.allergy_IdentificationDate ? this.allergy_IdentificationDate.toISOString() : <any>null;
        data["allergy_Reaction"] = this.allergy_Reaction !== undefined ? this.allergy_Reaction : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["allergy_StartDate"] = this.allergy_StartDate ? this.allergy_StartDate.toISOString() : <any>null;
        data["allergy_ExposureDate"] = this.allergy_ExposureDate ? this.allergy_ExposureDate.toISOString() : <any>null;
        data["allergy_AdverseReactionPresence"] = this.allergy_AdverseReactionPresence !== undefined ? this.allergy_AdverseReactionPresence : <any>null;
        data["allergy_InformationProvidedBy"] = this.allergy_InformationProvidedBy !== undefined ? this.allergy_InformationProvidedBy : <any>null;
        data["allergy_AgentCertainty"] = this.allergy_AgentCertainty !== undefined ? this.allergy_AgentCertainty : <any>null;
        data["allergy_RactionType"] = this.allergy_RactionType !== undefined ? this.allergy_RactionType : <any>null;
        data["allergy_ReactionDescription"] = this.allergy_ReactionDescription !== undefined ? this.allergy_ReactionDescription : <any>null;
        data["allergy_AdverseReactionStatus"] = this.allergy_AdverseReactionStatus !== undefined ? this.allergy_AdverseReactionStatus : <any>null;
        data["allergy_AdverseReactionOutcome"] = this.allergy_AdverseReactionOutcome !== undefined ? this.allergy_AdverseReactionOutcome : <any>null;
        data["allergy_Reporter"] = this.allergy_Reporter !== undefined ? this.allergy_Reporter : <any>null;
        data["allergy_Alert"] = this.allergy_Alert !== undefined ? this.allergy_Alert : <any>null;
        data["allergy_Current"] = this.allergy_Current !== undefined ? this.allergy_Current : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface IAllergy {
    allergy_ID: number;
    patient_ID: number;
    note_ID?: number | null;
    allergy_Type?: string | null;
    allergy_Code?: string | null;
    allergy_Severity?: string | null;
    allergy_IdentificationDate?: Date | null;
    allergy_Reaction?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    allergy_StartDate?: Date | null;
    allergy_ExposureDate?: Date | null;
    allergy_AdverseReactionPresence?: number | null;
    allergy_InformationProvidedBy?: number | null;
    allergy_AgentCertainty?: number | null;
    allergy_RactionType?: number | null;
    allergy_ReactionDescription?: string | null;
    allergy_AdverseReactionStatus?: number | null;
    allergy_AdverseReactionOutcome?: number | null;
    allergy_Reporter?: string | null;
    allergy_Alert?: boolean | null;
    allergy_Current: boolean;
    patient?: IPatient | null;
}

export class HL7_PatientMapping implements IHL7_PatientMapping {
    feed_ID!: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner!: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder!: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched!: boolean;
    userMatched!: boolean;
    username?: string | null;
    userCannotMatch!: boolean;
    possibleDuplicate?: boolean | null;
    merged!: boolean;
    inErrorCode!: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted!: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;
    external_Feed_Config?: External_Feed_Config | null;
    patient?: Patient | null;

    constructor(data?: IHL7_PatientMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.external_Feed_Config = data.external_Feed_Config && !(<any>data.external_Feed_Config).toJSON ? new External_Feed_Config(data.external_Feed_Config) : <External_Feed_Config>this.external_Feed_Config; 
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.remotePatient_ID = data["remotePatient_ID"] !== undefined ? data["remotePatient_ID"] : <any>null;
            this.patientIdentifierList = data["patientIdentifierList"] !== undefined ? data["patientIdentifierList"] : <any>null;
            this.localPatient_ID = data["localPatient_ID"] !== undefined ? data["localPatient_ID"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.assigningAuthority = data["assigningAuthority"] !== undefined ? data["assigningAuthority"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.middleName = data["middleName"] !== undefined ? data["middleName"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
            this.addrStreet = data["addrStreet"] !== undefined ? data["addrStreet"] : <any>null;
            this.addrCity = data["addrCity"] !== undefined ? data["addrCity"] : <any>null;
            this.addrState = data["addrState"] !== undefined ? data["addrState"] : <any>null;
            this.addrPostCode = data["addrPostCode"] !== undefined ? data["addrPostCode"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.messageCode = data["messageCode"] !== undefined ? data["messageCode"] : <any>null;
            this.triggerEvent = data["triggerEvent"] !== undefined ? data["triggerEvent"] : <any>null;
            this.systemMatched = data["systemMatched"] !== undefined ? data["systemMatched"] : <any>null;
            this.userMatched = data["userMatched"] !== undefined ? data["userMatched"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.userCannotMatch = data["userCannotMatch"] !== undefined ? data["userCannotMatch"] : <any>null;
            this.possibleDuplicate = data["possibleDuplicate"] !== undefined ? data["possibleDuplicate"] : <any>null;
            this.merged = data["merged"] !== undefined ? data["merged"] : <any>null;
            this.inErrorCode = data["inErrorCode"] !== undefined ? data["inErrorCode"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateModified = data["dateModified"] ? new Date(data["dateModified"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletedUser = data["deletedUser"] !== undefined ? data["deletedUser"] : <any>null;
            this.deletedDate = data["deletedDate"] ? new Date(data["deletedDate"].toString()) : <any>null;
            this.external_Feed_Config = data["external_Feed_Config"] ? External_Feed_Config.fromJS(data["external_Feed_Config"]) : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): HL7_PatientMapping {
        data = typeof data === 'object' ? data : {};
        let result = new HL7_PatientMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["remotePatient_ID"] = this.remotePatient_ID !== undefined ? this.remotePatient_ID : <any>null;
        data["patientIdentifierList"] = this.patientIdentifierList !== undefined ? this.patientIdentifierList : <any>null;
        data["localPatient_ID"] = this.localPatient_ID !== undefined ? this.localPatient_ID : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["assigningAuthority"] = this.assigningAuthority !== undefined ? this.assigningAuthority : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        data["addrStreet"] = this.addrStreet !== undefined ? this.addrStreet : <any>null;
        data["addrCity"] = this.addrCity !== undefined ? this.addrCity : <any>null;
        data["addrState"] = this.addrState !== undefined ? this.addrState : <any>null;
        data["addrPostCode"] = this.addrPostCode !== undefined ? this.addrPostCode : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["messageCode"] = this.messageCode !== undefined ? this.messageCode : <any>null;
        data["triggerEvent"] = this.triggerEvent !== undefined ? this.triggerEvent : <any>null;
        data["systemMatched"] = this.systemMatched !== undefined ? this.systemMatched : <any>null;
        data["userMatched"] = this.userMatched !== undefined ? this.userMatched : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["userCannotMatch"] = this.userCannotMatch !== undefined ? this.userCannotMatch : <any>null;
        data["possibleDuplicate"] = this.possibleDuplicate !== undefined ? this.possibleDuplicate : <any>null;
        data["merged"] = this.merged !== undefined ? this.merged : <any>null;
        data["inErrorCode"] = this.inErrorCode !== undefined ? this.inErrorCode : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletedUser"] = this.deletedUser !== undefined ? this.deletedUser : <any>null;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : <any>null;
        data["external_Feed_Config"] = this.external_Feed_Config ? this.external_Feed_Config.toJSON() : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface IHL7_PatientMapping {
    feed_ID: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched: boolean;
    userMatched: boolean;
    username?: string | null;
    userCannotMatch: boolean;
    possibleDuplicate?: boolean | null;
    merged: boolean;
    inErrorCode: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;
    external_Feed_Config?: IExternal_Feed_Config | null;
    patient?: IPatient | null;
}

export class External_Feed_Config implements IExternal_Feed_Config {
    feed_ID!: number;
    service_Category?: number | null;
    service_Name?: string | null;
    service_ID!: number;
    feed_Type!: number;
    feed_InDirectory?: string | null;
    feed_OutDirectory?: string | null;
    feed_OutHostname?: string | null;
    feed_OutPort?: number | null;
    location_ID?: number | null;
    doctor_ID?: number | null;
    embedded_Files!: boolean;
    feed_Provider?: number | null;
    feed_Enabled!: boolean;
    requestForm_Enabled!: boolean;
    feed_BackupDirectory?: string | null;
    modifiedDate?: Date | null;
    modifiedUser?: string | null;
    requestForm?: string | null;
    lastActivityDateTime?: Date | null;
    lastWarningDateTime?: Date | null;
    warnOperatorIfNoActivity!: boolean;
    warnThresholdHours?: number | null;
    warnHoursBetweenWarnings?: number | null;
    warnStartHour?: number | null;
    warnStopHour?: number | null;
    warnEmailAddresses?: string | null;
    synopsisPrefix?: string | null;
    d_type?: number | null;
    onPatientFind?: string | null;
    onPatientFindQuery?: string | null;
    onClinicalRecord?: string | null;
    sqlConnectionString?: string | null;
    feed_ReprocessDirectory?: string | null;
    mappingFeed_ID?: number | null;
    userDefined!: boolean;
    logging_Enabled!: boolean;
    keepMessagesDays?: number | null;
    previewLOINCS?: string | null;
    mrnPatientMatch!: boolean;
    generateFillerCode!: boolean;
    ignoreSystemMatch!: boolean;
    disable_ClinicalRecordMove!: boolean;
    supportsHMSOrder!: boolean;
    assigningAuthority?: string | null;
    outboundAssigningAuthority?: string | null;
    groupFeed_ID?: number | null;
    hT_MRN!: boolean;
    fileLayout?: string | null;
    demographicsMRN!: boolean;
    supportsMultipleTestTypes!: boolean;
    canBeVerified!: boolean;
    hL7_PatientMapping?: HL7_PatientMapping[] | null;
    external_Feed_MatchingScore?: External_Feed_MatchingScore | null;

    constructor(data?: IExternal_Feed_Config) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.hL7_PatientMapping) {
                this.hL7_PatientMapping = [];
                for (let i = 0; i < data.hL7_PatientMapping.length; i++) {
                    let item = data.hL7_PatientMapping[i];
                    this.hL7_PatientMapping[i] = item && !(<any>item).toJSON ? new HL7_PatientMapping(item) : <HL7_PatientMapping>item;
                }
            }
            this.external_Feed_MatchingScore = data.external_Feed_MatchingScore && !(<any>data.external_Feed_MatchingScore).toJSON ? new External_Feed_MatchingScore(data.external_Feed_MatchingScore) : <External_Feed_MatchingScore>this.external_Feed_MatchingScore; 
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.service_Category = data["service_Category"] !== undefined ? data["service_Category"] : <any>null;
            this.service_Name = data["service_Name"] !== undefined ? data["service_Name"] : <any>null;
            this.service_ID = data["service_ID"] !== undefined ? data["service_ID"] : <any>null;
            this.feed_Type = data["feed_Type"] !== undefined ? data["feed_Type"] : <any>null;
            this.feed_InDirectory = data["feed_InDirectory"] !== undefined ? data["feed_InDirectory"] : <any>null;
            this.feed_OutDirectory = data["feed_OutDirectory"] !== undefined ? data["feed_OutDirectory"] : <any>null;
            this.feed_OutHostname = data["feed_OutHostname"] !== undefined ? data["feed_OutHostname"] : <any>null;
            this.feed_OutPort = data["feed_OutPort"] !== undefined ? data["feed_OutPort"] : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
            this.doctor_ID = data["doctor_ID"] !== undefined ? data["doctor_ID"] : <any>null;
            this.embedded_Files = data["embedded_Files"] !== undefined ? data["embedded_Files"] : <any>null;
            this.feed_Provider = data["feed_Provider"] !== undefined ? data["feed_Provider"] : <any>null;
            this.feed_Enabled = data["feed_Enabled"] !== undefined ? data["feed_Enabled"] : <any>null;
            this.requestForm_Enabled = data["requestForm_Enabled"] !== undefined ? data["requestForm_Enabled"] : <any>null;
            this.feed_BackupDirectory = data["feed_BackupDirectory"] !== undefined ? data["feed_BackupDirectory"] : <any>null;
            this.modifiedDate = data["modifiedDate"] ? new Date(data["modifiedDate"].toString()) : <any>null;
            this.modifiedUser = data["modifiedUser"] !== undefined ? data["modifiedUser"] : <any>null;
            this.requestForm = data["requestForm"] !== undefined ? data["requestForm"] : <any>null;
            this.lastActivityDateTime = data["lastActivityDateTime"] ? new Date(data["lastActivityDateTime"].toString()) : <any>null;
            this.lastWarningDateTime = data["lastWarningDateTime"] ? new Date(data["lastWarningDateTime"].toString()) : <any>null;
            this.warnOperatorIfNoActivity = data["warnOperatorIfNoActivity"] !== undefined ? data["warnOperatorIfNoActivity"] : <any>null;
            this.warnThresholdHours = data["warnThresholdHours"] !== undefined ? data["warnThresholdHours"] : <any>null;
            this.warnHoursBetweenWarnings = data["warnHoursBetweenWarnings"] !== undefined ? data["warnHoursBetweenWarnings"] : <any>null;
            this.warnStartHour = data["warnStartHour"] !== undefined ? data["warnStartHour"] : <any>null;
            this.warnStopHour = data["warnStopHour"] !== undefined ? data["warnStopHour"] : <any>null;
            this.warnEmailAddresses = data["warnEmailAddresses"] !== undefined ? data["warnEmailAddresses"] : <any>null;
            this.synopsisPrefix = data["synopsisPrefix"] !== undefined ? data["synopsisPrefix"] : <any>null;
            this.d_type = data["d_type"] !== undefined ? data["d_type"] : <any>null;
            this.onPatientFind = data["onPatientFind"] !== undefined ? data["onPatientFind"] : <any>null;
            this.onPatientFindQuery = data["onPatientFindQuery"] !== undefined ? data["onPatientFindQuery"] : <any>null;
            this.onClinicalRecord = data["onClinicalRecord"] !== undefined ? data["onClinicalRecord"] : <any>null;
            this.sqlConnectionString = data["sqlConnectionString"] !== undefined ? data["sqlConnectionString"] : <any>null;
            this.feed_ReprocessDirectory = data["feed_ReprocessDirectory"] !== undefined ? data["feed_ReprocessDirectory"] : <any>null;
            this.mappingFeed_ID = data["mappingFeed_ID"] !== undefined ? data["mappingFeed_ID"] : <any>null;
            this.userDefined = data["userDefined"] !== undefined ? data["userDefined"] : <any>null;
            this.logging_Enabled = data["logging_Enabled"] !== undefined ? data["logging_Enabled"] : <any>null;
            this.keepMessagesDays = data["keepMessagesDays"] !== undefined ? data["keepMessagesDays"] : <any>null;
            this.previewLOINCS = data["previewLOINCS"] !== undefined ? data["previewLOINCS"] : <any>null;
            this.mrnPatientMatch = data["mrnPatientMatch"] !== undefined ? data["mrnPatientMatch"] : <any>null;
            this.generateFillerCode = data["generateFillerCode"] !== undefined ? data["generateFillerCode"] : <any>null;
            this.ignoreSystemMatch = data["ignoreSystemMatch"] !== undefined ? data["ignoreSystemMatch"] : <any>null;
            this.disable_ClinicalRecordMove = data["disable_ClinicalRecordMove"] !== undefined ? data["disable_ClinicalRecordMove"] : <any>null;
            this.supportsHMSOrder = data["supportsHMSOrder"] !== undefined ? data["supportsHMSOrder"] : <any>null;
            this.assigningAuthority = data["assigningAuthority"] !== undefined ? data["assigningAuthority"] : <any>null;
            this.outboundAssigningAuthority = data["outboundAssigningAuthority"] !== undefined ? data["outboundAssigningAuthority"] : <any>null;
            this.groupFeed_ID = data["groupFeed_ID"] !== undefined ? data["groupFeed_ID"] : <any>null;
            this.hT_MRN = data["hT_MRN"] !== undefined ? data["hT_MRN"] : <any>null;
            this.fileLayout = data["fileLayout"] !== undefined ? data["fileLayout"] : <any>null;
            this.demographicsMRN = data["demographicsMRN"] !== undefined ? data["demographicsMRN"] : <any>null;
            this.supportsMultipleTestTypes = data["supportsMultipleTestTypes"] !== undefined ? data["supportsMultipleTestTypes"] : <any>null;
            this.canBeVerified = data["canBeVerified"] !== undefined ? data["canBeVerified"] : <any>null;
            if (data["hL7_PatientMapping"] && data["hL7_PatientMapping"].constructor === Array) {
                this.hL7_PatientMapping = [];
                for (let item of data["hL7_PatientMapping"])
                    this.hL7_PatientMapping.push(HL7_PatientMapping.fromJS(item));
            }
            this.external_Feed_MatchingScore = data["external_Feed_MatchingScore"] ? External_Feed_MatchingScore.fromJS(data["external_Feed_MatchingScore"]) : <any>null;
        }
    }

    static fromJS(data: any): External_Feed_Config {
        data = typeof data === 'object' ? data : {};
        let result = new External_Feed_Config();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["service_Category"] = this.service_Category !== undefined ? this.service_Category : <any>null;
        data["service_Name"] = this.service_Name !== undefined ? this.service_Name : <any>null;
        data["service_ID"] = this.service_ID !== undefined ? this.service_ID : <any>null;
        data["feed_Type"] = this.feed_Type !== undefined ? this.feed_Type : <any>null;
        data["feed_InDirectory"] = this.feed_InDirectory !== undefined ? this.feed_InDirectory : <any>null;
        data["feed_OutDirectory"] = this.feed_OutDirectory !== undefined ? this.feed_OutDirectory : <any>null;
        data["feed_OutHostname"] = this.feed_OutHostname !== undefined ? this.feed_OutHostname : <any>null;
        data["feed_OutPort"] = this.feed_OutPort !== undefined ? this.feed_OutPort : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        data["doctor_ID"] = this.doctor_ID !== undefined ? this.doctor_ID : <any>null;
        data["embedded_Files"] = this.embedded_Files !== undefined ? this.embedded_Files : <any>null;
        data["feed_Provider"] = this.feed_Provider !== undefined ? this.feed_Provider : <any>null;
        data["feed_Enabled"] = this.feed_Enabled !== undefined ? this.feed_Enabled : <any>null;
        data["requestForm_Enabled"] = this.requestForm_Enabled !== undefined ? this.requestForm_Enabled : <any>null;
        data["feed_BackupDirectory"] = this.feed_BackupDirectory !== undefined ? this.feed_BackupDirectory : <any>null;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>null;
        data["modifiedUser"] = this.modifiedUser !== undefined ? this.modifiedUser : <any>null;
        data["requestForm"] = this.requestForm !== undefined ? this.requestForm : <any>null;
        data["lastActivityDateTime"] = this.lastActivityDateTime ? this.lastActivityDateTime.toISOString() : <any>null;
        data["lastWarningDateTime"] = this.lastWarningDateTime ? this.lastWarningDateTime.toISOString() : <any>null;
        data["warnOperatorIfNoActivity"] = this.warnOperatorIfNoActivity !== undefined ? this.warnOperatorIfNoActivity : <any>null;
        data["warnThresholdHours"] = this.warnThresholdHours !== undefined ? this.warnThresholdHours : <any>null;
        data["warnHoursBetweenWarnings"] = this.warnHoursBetweenWarnings !== undefined ? this.warnHoursBetweenWarnings : <any>null;
        data["warnStartHour"] = this.warnStartHour !== undefined ? this.warnStartHour : <any>null;
        data["warnStopHour"] = this.warnStopHour !== undefined ? this.warnStopHour : <any>null;
        data["warnEmailAddresses"] = this.warnEmailAddresses !== undefined ? this.warnEmailAddresses : <any>null;
        data["synopsisPrefix"] = this.synopsisPrefix !== undefined ? this.synopsisPrefix : <any>null;
        data["d_type"] = this.d_type !== undefined ? this.d_type : <any>null;
        data["onPatientFind"] = this.onPatientFind !== undefined ? this.onPatientFind : <any>null;
        data["onPatientFindQuery"] = this.onPatientFindQuery !== undefined ? this.onPatientFindQuery : <any>null;
        data["onClinicalRecord"] = this.onClinicalRecord !== undefined ? this.onClinicalRecord : <any>null;
        data["sqlConnectionString"] = this.sqlConnectionString !== undefined ? this.sqlConnectionString : <any>null;
        data["feed_ReprocessDirectory"] = this.feed_ReprocessDirectory !== undefined ? this.feed_ReprocessDirectory : <any>null;
        data["mappingFeed_ID"] = this.mappingFeed_ID !== undefined ? this.mappingFeed_ID : <any>null;
        data["userDefined"] = this.userDefined !== undefined ? this.userDefined : <any>null;
        data["logging_Enabled"] = this.logging_Enabled !== undefined ? this.logging_Enabled : <any>null;
        data["keepMessagesDays"] = this.keepMessagesDays !== undefined ? this.keepMessagesDays : <any>null;
        data["previewLOINCS"] = this.previewLOINCS !== undefined ? this.previewLOINCS : <any>null;
        data["mrnPatientMatch"] = this.mrnPatientMatch !== undefined ? this.mrnPatientMatch : <any>null;
        data["generateFillerCode"] = this.generateFillerCode !== undefined ? this.generateFillerCode : <any>null;
        data["ignoreSystemMatch"] = this.ignoreSystemMatch !== undefined ? this.ignoreSystemMatch : <any>null;
        data["disable_ClinicalRecordMove"] = this.disable_ClinicalRecordMove !== undefined ? this.disable_ClinicalRecordMove : <any>null;
        data["supportsHMSOrder"] = this.supportsHMSOrder !== undefined ? this.supportsHMSOrder : <any>null;
        data["assigningAuthority"] = this.assigningAuthority !== undefined ? this.assigningAuthority : <any>null;
        data["outboundAssigningAuthority"] = this.outboundAssigningAuthority !== undefined ? this.outboundAssigningAuthority : <any>null;
        data["groupFeed_ID"] = this.groupFeed_ID !== undefined ? this.groupFeed_ID : <any>null;
        data["hT_MRN"] = this.hT_MRN !== undefined ? this.hT_MRN : <any>null;
        data["fileLayout"] = this.fileLayout !== undefined ? this.fileLayout : <any>null;
        data["demographicsMRN"] = this.demographicsMRN !== undefined ? this.demographicsMRN : <any>null;
        data["supportsMultipleTestTypes"] = this.supportsMultipleTestTypes !== undefined ? this.supportsMultipleTestTypes : <any>null;
        data["canBeVerified"] = this.canBeVerified !== undefined ? this.canBeVerified : <any>null;
        if (this.hL7_PatientMapping && this.hL7_PatientMapping.constructor === Array) {
            data["hL7_PatientMapping"] = [];
            for (let item of this.hL7_PatientMapping)
                data["hL7_PatientMapping"].push(item.toJSON());
        }
        data["external_Feed_MatchingScore"] = this.external_Feed_MatchingScore ? this.external_Feed_MatchingScore.toJSON() : <any>null;
        return data; 
    }
}

export interface IExternal_Feed_Config {
    feed_ID: number;
    service_Category?: number | null;
    service_Name?: string | null;
    service_ID: number;
    feed_Type: number;
    feed_InDirectory?: string | null;
    feed_OutDirectory?: string | null;
    feed_OutHostname?: string | null;
    feed_OutPort?: number | null;
    location_ID?: number | null;
    doctor_ID?: number | null;
    embedded_Files: boolean;
    feed_Provider?: number | null;
    feed_Enabled: boolean;
    requestForm_Enabled: boolean;
    feed_BackupDirectory?: string | null;
    modifiedDate?: Date | null;
    modifiedUser?: string | null;
    requestForm?: string | null;
    lastActivityDateTime?: Date | null;
    lastWarningDateTime?: Date | null;
    warnOperatorIfNoActivity: boolean;
    warnThresholdHours?: number | null;
    warnHoursBetweenWarnings?: number | null;
    warnStartHour?: number | null;
    warnStopHour?: number | null;
    warnEmailAddresses?: string | null;
    synopsisPrefix?: string | null;
    d_type?: number | null;
    onPatientFind?: string | null;
    onPatientFindQuery?: string | null;
    onClinicalRecord?: string | null;
    sqlConnectionString?: string | null;
    feed_ReprocessDirectory?: string | null;
    mappingFeed_ID?: number | null;
    userDefined: boolean;
    logging_Enabled: boolean;
    keepMessagesDays?: number | null;
    previewLOINCS?: string | null;
    mrnPatientMatch: boolean;
    generateFillerCode: boolean;
    ignoreSystemMatch: boolean;
    disable_ClinicalRecordMove: boolean;
    supportsHMSOrder: boolean;
    assigningAuthority?: string | null;
    outboundAssigningAuthority?: string | null;
    groupFeed_ID?: number | null;
    hT_MRN: boolean;
    fileLayout?: string | null;
    demographicsMRN: boolean;
    supportsMultipleTestTypes: boolean;
    canBeVerified: boolean;
    hL7_PatientMapping?: IHL7_PatientMapping[] | null;
    external_Feed_MatchingScore?: IExternal_Feed_MatchingScore | null;
}

export class External_Feed_MatchingScore implements IExternal_Feed_MatchingScore {
    feed_ID!: number;
    firstNameScore?: number | null;
    surnameScore?: number | null;
    dobScore?: number | null;
    medicareScore?: number | null;
    patientApprovedScore?: number | null;
    external_Feed_Config?: External_Feed_Config | null;

    constructor(data?: IExternal_Feed_MatchingScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.external_Feed_Config = data.external_Feed_Config && !(<any>data.external_Feed_Config).toJSON ? new External_Feed_Config(data.external_Feed_Config) : <External_Feed_Config>this.external_Feed_Config; 
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.firstNameScore = data["firstNameScore"] !== undefined ? data["firstNameScore"] : <any>null;
            this.surnameScore = data["surnameScore"] !== undefined ? data["surnameScore"] : <any>null;
            this.dobScore = data["dobScore"] !== undefined ? data["dobScore"] : <any>null;
            this.medicareScore = data["medicareScore"] !== undefined ? data["medicareScore"] : <any>null;
            this.patientApprovedScore = data["patientApprovedScore"] !== undefined ? data["patientApprovedScore"] : <any>null;
            this.external_Feed_Config = data["external_Feed_Config"] ? External_Feed_Config.fromJS(data["external_Feed_Config"]) : <any>null;
        }
    }

    static fromJS(data: any): External_Feed_MatchingScore {
        data = typeof data === 'object' ? data : {};
        let result = new External_Feed_MatchingScore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["firstNameScore"] = this.firstNameScore !== undefined ? this.firstNameScore : <any>null;
        data["surnameScore"] = this.surnameScore !== undefined ? this.surnameScore : <any>null;
        data["dobScore"] = this.dobScore !== undefined ? this.dobScore : <any>null;
        data["medicareScore"] = this.medicareScore !== undefined ? this.medicareScore : <any>null;
        data["patientApprovedScore"] = this.patientApprovedScore !== undefined ? this.patientApprovedScore : <any>null;
        data["external_Feed_Config"] = this.external_Feed_Config ? this.external_Feed_Config.toJSON() : <any>null;
        return data; 
    }
}

export interface IExternal_Feed_MatchingScore {
    feed_ID: number;
    firstNameScore?: number | null;
    surnameScore?: number | null;
    dobScore?: number | null;
    medicareScore?: number | null;
    patientApprovedScore?: number | null;
    external_Feed_Config?: IExternal_Feed_Config | null;
}

export class NextOfKin implements INextOfKin {
    patient_ID!: number;
    nokIndex!: number;
    title?: string | null;
    firstName?: string | null;
    surname?: string | null;
    relationship?: string | null;
    homePhone?: string | null;
    mobile?: string | null;
    workPhone?: string | null;
    email?: string | null;
    archive?: boolean | null;
    patient?: Patient | null;

    constructor(data?: INextOfKin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.nokIndex = data["nokIndex"] !== undefined ? data["nokIndex"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.relationship = data["relationship"] !== undefined ? data["relationship"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): NextOfKin {
        data = typeof data === 'object' ? data : {};
        let result = new NextOfKin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["nokIndex"] = this.nokIndex !== undefined ? this.nokIndex : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["relationship"] = this.relationship !== undefined ? this.relationship : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface INextOfKin {
    patient_ID: number;
    nokIndex: number;
    title?: string | null;
    firstName?: string | null;
    surname?: string | null;
    relationship?: string | null;
    homePhone?: string | null;
    mobile?: string | null;
    workPhone?: string | null;
    email?: string | null;
    archive?: boolean | null;
    patient?: IPatient | null;
}

export class Queue_MergeRequest implements IQueue_MergeRequest {
    queueMergeID!: number;
    sourceRequested?: string | null;
    sourceMessageID?: string | null;
    fromPatientID!: number;
    toPatientID!: number;
    requestedDate?: Date | null;
    processed!: boolean;
    processedDate?: Date | null;
    errored!: boolean;
    errorLog?: string | null;
    patient?: Patient | null;
    patient1?: Patient | null;

    constructor(data?: IQueue_MergeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
            this.patient1 = data.patient1 && !(<any>data.patient1).toJSON ? new Patient(data.patient1) : <Patient>this.patient1; 
        }
    }

    init(data?: any) {
        if (data) {
            this.queueMergeID = data["queueMergeID"] !== undefined ? data["queueMergeID"] : <any>null;
            this.sourceRequested = data["sourceRequested"] !== undefined ? data["sourceRequested"] : <any>null;
            this.sourceMessageID = data["sourceMessageID"] !== undefined ? data["sourceMessageID"] : <any>null;
            this.fromPatientID = data["fromPatientID"] !== undefined ? data["fromPatientID"] : <any>null;
            this.toPatientID = data["toPatientID"] !== undefined ? data["toPatientID"] : <any>null;
            this.requestedDate = data["requestedDate"] ? new Date(data["requestedDate"].toString()) : <any>null;
            this.processed = data["processed"] !== undefined ? data["processed"] : <any>null;
            this.processedDate = data["processedDate"] ? new Date(data["processedDate"].toString()) : <any>null;
            this.errored = data["errored"] !== undefined ? data["errored"] : <any>null;
            this.errorLog = data["errorLog"] !== undefined ? data["errorLog"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
            this.patient1 = data["patient1"] ? Patient.fromJS(data["patient1"]) : <any>null;
        }
    }

    static fromJS(data: any): Queue_MergeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new Queue_MergeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["queueMergeID"] = this.queueMergeID !== undefined ? this.queueMergeID : <any>null;
        data["sourceRequested"] = this.sourceRequested !== undefined ? this.sourceRequested : <any>null;
        data["sourceMessageID"] = this.sourceMessageID !== undefined ? this.sourceMessageID : <any>null;
        data["fromPatientID"] = this.fromPatientID !== undefined ? this.fromPatientID : <any>null;
        data["toPatientID"] = this.toPatientID !== undefined ? this.toPatientID : <any>null;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>null;
        data["processed"] = this.processed !== undefined ? this.processed : <any>null;
        data["processedDate"] = this.processedDate ? this.processedDate.toISOString() : <any>null;
        data["errored"] = this.errored !== undefined ? this.errored : <any>null;
        data["errorLog"] = this.errorLog !== undefined ? this.errorLog : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        data["patient1"] = this.patient1 ? this.patient1.toJSON() : <any>null;
        return data; 
    }
}

export interface IQueue_MergeRequest {
    queueMergeID: number;
    sourceRequested?: string | null;
    sourceMessageID?: string | null;
    fromPatientID: number;
    toPatientID: number;
    requestedDate?: Date | null;
    processed: boolean;
    processedDate?: Date | null;
    errored: boolean;
    errorLog?: string | null;
    patient?: IPatient | null;
    patient1?: IPatient | null;
}

export class Company implements ICompany {
    company_ID!: number;
    companyName?: string | null;
    companyABN?: string | null;
    companyACN?: string | null;
    companyPhone?: string | null;
    companyFax?: string | null;
    note_ID?: number | null;
    deleted!: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    invoiceToUse?: string | null;
    billing_Practice!: boolean;
    billing_Scheduled!: boolean;
    billing_Medicare!: boolean;
    billing_HealthFund!: boolean;
    billing_Other!: boolean;
    feeTable_ID?: number | null;
    gapCover!: boolean;
    coversheetPrintSet?: string | null;
    chequeBSB?: string | null;
    healthFundType?: string | null;
    onlineFundCode?: string | null;
    hL7MappingID?: string | null;
    onlineRecordUpdated?: Date | null;
    onlineRegistered!: boolean;
    onlineActivated!: boolean;
    hmS_HealthfundReference?: number | null;
    feed_ID?: number | null;
    requires_PracticeID!: boolean;
    onlineContactPhone?: string | null;
    onlineChangeReport?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    extCompany_ID?: string | null;
    patients?: Patient[] | null;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.patients) {
                this.patients = [];
                for (let i = 0; i < data.patients.length; i++) {
                    let item = data.patients[i];
                    this.patients[i] = item && !(<any>item).toJSON ? new Patient(item) : <Patient>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.companyABN = data["companyABN"] !== undefined ? data["companyABN"] : <any>null;
            this.companyACN = data["companyACN"] !== undefined ? data["companyACN"] : <any>null;
            this.companyPhone = data["companyPhone"] !== undefined ? data["companyPhone"] : <any>null;
            this.companyFax = data["companyFax"] !== undefined ? data["companyFax"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.invoiceToUse = data["invoiceToUse"] !== undefined ? data["invoiceToUse"] : <any>null;
            this.billing_Practice = data["billing_Practice"] !== undefined ? data["billing_Practice"] : <any>null;
            this.billing_Scheduled = data["billing_Scheduled"] !== undefined ? data["billing_Scheduled"] : <any>null;
            this.billing_Medicare = data["billing_Medicare"] !== undefined ? data["billing_Medicare"] : <any>null;
            this.billing_HealthFund = data["billing_HealthFund"] !== undefined ? data["billing_HealthFund"] : <any>null;
            this.billing_Other = data["billing_Other"] !== undefined ? data["billing_Other"] : <any>null;
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.gapCover = data["gapCover"] !== undefined ? data["gapCover"] : <any>null;
            this.coversheetPrintSet = data["coversheetPrintSet"] !== undefined ? data["coversheetPrintSet"] : <any>null;
            this.chequeBSB = data["chequeBSB"] !== undefined ? data["chequeBSB"] : <any>null;
            this.healthFundType = data["healthFundType"] !== undefined ? data["healthFundType"] : <any>null;
            this.onlineFundCode = data["onlineFundCode"] !== undefined ? data["onlineFundCode"] : <any>null;
            this.hL7MappingID = data["hL7MappingID"] !== undefined ? data["hL7MappingID"] : <any>null;
            this.onlineRecordUpdated = data["onlineRecordUpdated"] ? new Date(data["onlineRecordUpdated"].toString()) : <any>null;
            this.onlineRegistered = data["onlineRegistered"] !== undefined ? data["onlineRegistered"] : <any>null;
            this.onlineActivated = data["onlineActivated"] !== undefined ? data["onlineActivated"] : <any>null;
            this.hmS_HealthfundReference = data["hmS_HealthfundReference"] !== undefined ? data["hmS_HealthfundReference"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.requires_PracticeID = data["requires_PracticeID"] !== undefined ? data["requires_PracticeID"] : <any>null;
            this.onlineContactPhone = data["onlineContactPhone"] !== undefined ? data["onlineContactPhone"] : <any>null;
            this.onlineChangeReport = data["onlineChangeReport"] !== undefined ? data["onlineChangeReport"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.extCompany_ID = data["extCompany_ID"] !== undefined ? data["extCompany_ID"] : <any>null;
            if (data["patients"] && data["patients"].constructor === Array) {
                this.patients = [];
                for (let item of data["patients"])
                    this.patients.push(Patient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Company {
        data = typeof data === 'object' ? data : {};
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["companyABN"] = this.companyABN !== undefined ? this.companyABN : <any>null;
        data["companyACN"] = this.companyACN !== undefined ? this.companyACN : <any>null;
        data["companyPhone"] = this.companyPhone !== undefined ? this.companyPhone : <any>null;
        data["companyFax"] = this.companyFax !== undefined ? this.companyFax : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["invoiceToUse"] = this.invoiceToUse !== undefined ? this.invoiceToUse : <any>null;
        data["billing_Practice"] = this.billing_Practice !== undefined ? this.billing_Practice : <any>null;
        data["billing_Scheduled"] = this.billing_Scheduled !== undefined ? this.billing_Scheduled : <any>null;
        data["billing_Medicare"] = this.billing_Medicare !== undefined ? this.billing_Medicare : <any>null;
        data["billing_HealthFund"] = this.billing_HealthFund !== undefined ? this.billing_HealthFund : <any>null;
        data["billing_Other"] = this.billing_Other !== undefined ? this.billing_Other : <any>null;
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["gapCover"] = this.gapCover !== undefined ? this.gapCover : <any>null;
        data["coversheetPrintSet"] = this.coversheetPrintSet !== undefined ? this.coversheetPrintSet : <any>null;
        data["chequeBSB"] = this.chequeBSB !== undefined ? this.chequeBSB : <any>null;
        data["healthFundType"] = this.healthFundType !== undefined ? this.healthFundType : <any>null;
        data["onlineFundCode"] = this.onlineFundCode !== undefined ? this.onlineFundCode : <any>null;
        data["hL7MappingID"] = this.hL7MappingID !== undefined ? this.hL7MappingID : <any>null;
        data["onlineRecordUpdated"] = this.onlineRecordUpdated ? this.onlineRecordUpdated.toISOString() : <any>null;
        data["onlineRegistered"] = this.onlineRegistered !== undefined ? this.onlineRegistered : <any>null;
        data["onlineActivated"] = this.onlineActivated !== undefined ? this.onlineActivated : <any>null;
        data["hmS_HealthfundReference"] = this.hmS_HealthfundReference !== undefined ? this.hmS_HealthfundReference : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["requires_PracticeID"] = this.requires_PracticeID !== undefined ? this.requires_PracticeID : <any>null;
        data["onlineContactPhone"] = this.onlineContactPhone !== undefined ? this.onlineContactPhone : <any>null;
        data["onlineChangeReport"] = this.onlineChangeReport !== undefined ? this.onlineChangeReport : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["extCompany_ID"] = this.extCompany_ID !== undefined ? this.extCompany_ID : <any>null;
        if (this.patients && this.patients.constructor === Array) {
            data["patients"] = [];
            for (let item of this.patients)
                data["patients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICompany {
    company_ID: number;
    companyName?: string | null;
    companyABN?: string | null;
    companyACN?: string | null;
    companyPhone?: string | null;
    companyFax?: string | null;
    note_ID?: number | null;
    deleted: boolean;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    invoiceToUse?: string | null;
    billing_Practice: boolean;
    billing_Scheduled: boolean;
    billing_Medicare: boolean;
    billing_HealthFund: boolean;
    billing_Other: boolean;
    feeTable_ID?: number | null;
    gapCover: boolean;
    coversheetPrintSet?: string | null;
    chequeBSB?: string | null;
    healthFundType?: string | null;
    onlineFundCode?: string | null;
    hL7MappingID?: string | null;
    onlineRecordUpdated?: Date | null;
    onlineRegistered: boolean;
    onlineActivated: boolean;
    hmS_HealthfundReference?: number | null;
    feed_ID?: number | null;
    requires_PracticeID: boolean;
    onlineContactPhone?: string | null;
    onlineChangeReport?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    extCompany_ID?: string | null;
    patients?: IPatient[] | null;
}

export class Patient_Alias implements IPatient_Alias {
    alias_ID!: number;
    patient_ID!: number;
    surname?: string | null;
    surnameSoundex?: string | null;
    firstName?: string | null;
    alias_Comment?: string | null;
    alias_Type?: string | null;
    readOnly!: boolean;
    patient?: Patient | null;

    constructor(data?: IPatient_Alias) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new Patient(data.patient) : <Patient>this.patient; 
        }
    }

    init(data?: any) {
        if (data) {
            this.alias_ID = data["alias_ID"] !== undefined ? data["alias_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.surnameSoundex = data["surnameSoundex"] !== undefined ? data["surnameSoundex"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.alias_Comment = data["alias_Comment"] !== undefined ? data["alias_Comment"] : <any>null;
            this.alias_Type = data["alias_Type"] !== undefined ? data["alias_Type"] : <any>null;
            this.readOnly = data["readOnly"] !== undefined ? data["readOnly"] : <any>null;
            this.patient = data["patient"] ? Patient.fromJS(data["patient"]) : <any>null;
        }
    }

    static fromJS(data: any): Patient_Alias {
        data = typeof data === 'object' ? data : {};
        let result = new Patient_Alias();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alias_ID"] = this.alias_ID !== undefined ? this.alias_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["surnameSoundex"] = this.surnameSoundex !== undefined ? this.surnameSoundex : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["alias_Comment"] = this.alias_Comment !== undefined ? this.alias_Comment : <any>null;
        data["alias_Type"] = this.alias_Type !== undefined ? this.alias_Type : <any>null;
        data["readOnly"] = this.readOnly !== undefined ? this.readOnly : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        return data; 
    }
}

export interface IPatient_Alias {
    alias_ID: number;
    patient_ID: number;
    surname?: string | null;
    surnameSoundex?: string | null;
    firstName?: string | null;
    alias_Comment?: string | null;
    alias_Type?: string | null;
    readOnly: boolean;
    patient?: IPatient | null;
}

export enum ConnectStatus {
    Active = 0, 
    Paused = 1, 
    Error = 2, 
    Completed = 3, 
    Deleted = 4, 
}

export class PatientConnectLogDO implements IPatientConnectLogDO {
    id!: number;
    patientConnectId!: number;
    batchID!: number;
    action!: PcAction;
    actionName?: string | null;
    actionDate!: Date;
    definitionStepId!: number;
    step!: number;
    repeat!: number;
    cycleCount!: number;
    status!: ConnectStatus;
    statusName?: string | null;
    complete!: boolean;
    smsTemplate?: string | null;
    letterTemplateId!: number;
    description?: string | null;
    notes?: string | null;
    dateCreated!: Date;
    createdBy?: string | null;
    actionTaken!: boolean;
    actionNote?: string | null;

    constructor(data?: IPatientConnectLogDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.patientConnectId = data["patientConnectId"] !== undefined ? data["patientConnectId"] : <any>null;
            this.batchID = data["batchID"] !== undefined ? data["batchID"] : <any>null;
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.actionName = data["actionName"] !== undefined ? data["actionName"] : <any>null;
            this.actionDate = data["actionDate"] ? new Date(data["actionDate"].toString()) : <any>null;
            this.definitionStepId = data["definitionStepId"] !== undefined ? data["definitionStepId"] : <any>null;
            this.step = data["step"] !== undefined ? data["step"] : <any>null;
            this.repeat = data["repeat"] !== undefined ? data["repeat"] : <any>null;
            this.cycleCount = data["cycleCount"] !== undefined ? data["cycleCount"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.statusName = data["statusName"] !== undefined ? data["statusName"] : <any>null;
            this.complete = data["complete"] !== undefined ? data["complete"] : <any>null;
            this.smsTemplate = data["smsTemplate"] !== undefined ? data["smsTemplate"] : <any>null;
            this.letterTemplateId = data["letterTemplateId"] !== undefined ? data["letterTemplateId"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.notes = data["notes"] !== undefined ? data["notes"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : <any>null;
            this.actionTaken = data["actionTaken"] !== undefined ? data["actionTaken"] : <any>null;
            this.actionNote = data["actionNote"] !== undefined ? data["actionNote"] : <any>null;
        }
    }

    static fromJS(data: any): PatientConnectLogDO {
        data = typeof data === 'object' ? data : {};
        let result = new PatientConnectLogDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["patientConnectId"] = this.patientConnectId !== undefined ? this.patientConnectId : <any>null;
        data["batchID"] = this.batchID !== undefined ? this.batchID : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["actionDate"] = this.actionDate ? this.actionDate.toISOString() : <any>null;
        data["definitionStepId"] = this.definitionStepId !== undefined ? this.definitionStepId : <any>null;
        data["step"] = this.step !== undefined ? this.step : <any>null;
        data["repeat"] = this.repeat !== undefined ? this.repeat : <any>null;
        data["cycleCount"] = this.cycleCount !== undefined ? this.cycleCount : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["statusName"] = this.statusName !== undefined ? this.statusName : <any>null;
        data["complete"] = this.complete !== undefined ? this.complete : <any>null;
        data["smsTemplate"] = this.smsTemplate !== undefined ? this.smsTemplate : <any>null;
        data["letterTemplateId"] = this.letterTemplateId !== undefined ? this.letterTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["actionTaken"] = this.actionTaken !== undefined ? this.actionTaken : <any>null;
        data["actionNote"] = this.actionNote !== undefined ? this.actionNote : <any>null;
        return data; 
    }
}

export interface IPatientConnectLogDO {
    id: number;
    patientConnectId: number;
    batchID: number;
    action: PcAction;
    actionName?: string | null;
    actionDate: Date;
    definitionStepId: number;
    step: number;
    repeat: number;
    cycleCount: number;
    status: ConnectStatus;
    statusName?: string | null;
    complete: boolean;
    smsTemplate?: string | null;
    letterTemplateId: number;
    description?: string | null;
    notes?: string | null;
    dateCreated: Date;
    createdBy?: string | null;
    actionTaken: boolean;
    actionNote?: string | null;
}

export class ReplyContentDO implements IReplyContentDO {
    content?: string | null;
    id!: number;
    deleted!: boolean;
    dateReceived!: Date;
    dateLastModified!: Date;
    dateDeleted!: Date;
    dateCreated!: Date;
    contentValue!: number;
    contentRangeType!: number;
    contentField?: string | null;
    patientId!: number;
    patientName?: string | null;
    mobile?: string | null;
    userCreated?: string | null;
    userDeleted?: string | null;
    userLastModified?: string | null;
    logID!: number;
    patientConnectId!: number;
    validContent!: boolean;
    highRangeValue!: number;
    lowRangeValue!: number;
    outOfRange!: boolean;
    outOfRangeHigh!: boolean;
    replyStatus?: string | null;
    definition?: ProgramDO | null;
    actionTaken?: boolean | null;
    actionNote?: string | null;

    constructor(data?: IReplyContentDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.definition = data.definition && !(<any>data.definition).toJSON ? new ProgramDO(data.definition) : <ProgramDO>this.definition; 
        }
    }

    init(data?: any) {
        if (data) {
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.dateReceived = data["dateReceived"] ? new Date(data["dateReceived"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.dateDeleted = data["dateDeleted"] ? new Date(data["dateDeleted"].toString()) : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.contentValue = data["contentValue"] !== undefined ? data["contentValue"] : <any>null;
            this.contentRangeType = data["contentRangeType"] !== undefined ? data["contentRangeType"] : <any>null;
            this.contentField = data["contentField"] !== undefined ? data["contentField"] : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userDeleted = data["userDeleted"] !== undefined ? data["userDeleted"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.logID = data["logID"] !== undefined ? data["logID"] : <any>null;
            this.patientConnectId = data["patientConnectId"] !== undefined ? data["patientConnectId"] : <any>null;
            this.validContent = data["validContent"] !== undefined ? data["validContent"] : <any>null;
            this.highRangeValue = data["highRangeValue"] !== undefined ? data["highRangeValue"] : <any>null;
            this.lowRangeValue = data["lowRangeValue"] !== undefined ? data["lowRangeValue"] : <any>null;
            this.outOfRange = data["outOfRange"] !== undefined ? data["outOfRange"] : <any>null;
            this.outOfRangeHigh = data["outOfRangeHigh"] !== undefined ? data["outOfRangeHigh"] : <any>null;
            this.replyStatus = data["replyStatus"] !== undefined ? data["replyStatus"] : <any>null;
            this.definition = data["definition"] ? ProgramDO.fromJS(data["definition"]) : <any>null;
            this.actionTaken = data["actionTaken"] !== undefined ? data["actionTaken"] : <any>null;
            this.actionNote = data["actionNote"] !== undefined ? data["actionNote"] : <any>null;
        }
    }

    static fromJS(data: any): ReplyContentDO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyContentDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["dateReceived"] = this.dateReceived ? this.dateReceived.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["dateDeleted"] = this.dateDeleted ? this.dateDeleted.toISOString() : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["contentValue"] = this.contentValue !== undefined ? this.contentValue : <any>null;
        data["contentRangeType"] = this.contentRangeType !== undefined ? this.contentRangeType : <any>null;
        data["contentField"] = this.contentField !== undefined ? this.contentField : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userDeleted"] = this.userDeleted !== undefined ? this.userDeleted : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["logID"] = this.logID !== undefined ? this.logID : <any>null;
        data["patientConnectId"] = this.patientConnectId !== undefined ? this.patientConnectId : <any>null;
        data["validContent"] = this.validContent !== undefined ? this.validContent : <any>null;
        data["highRangeValue"] = this.highRangeValue !== undefined ? this.highRangeValue : <any>null;
        data["lowRangeValue"] = this.lowRangeValue !== undefined ? this.lowRangeValue : <any>null;
        data["outOfRange"] = this.outOfRange !== undefined ? this.outOfRange : <any>null;
        data["outOfRangeHigh"] = this.outOfRangeHigh !== undefined ? this.outOfRangeHigh : <any>null;
        data["replyStatus"] = this.replyStatus !== undefined ? this.replyStatus : <any>null;
        data["definition"] = this.definition ? this.definition.toJSON() : <any>null;
        data["actionTaken"] = this.actionTaken !== undefined ? this.actionTaken : <any>null;
        data["actionNote"] = this.actionNote !== undefined ? this.actionNote : <any>null;
        return data; 
    }
}

export interface IReplyContentDO {
    content?: string | null;
    id: number;
    deleted: boolean;
    dateReceived: Date;
    dateLastModified: Date;
    dateDeleted: Date;
    dateCreated: Date;
    contentValue: number;
    contentRangeType: number;
    contentField?: string | null;
    patientId: number;
    patientName?: string | null;
    mobile?: string | null;
    userCreated?: string | null;
    userDeleted?: string | null;
    userLastModified?: string | null;
    logID: number;
    patientConnectId: number;
    validContent: boolean;
    highRangeValue: number;
    lowRangeValue: number;
    outOfRange: boolean;
    outOfRangeHigh: boolean;
    replyStatus?: string | null;
    definition?: IProgramDO | null;
    actionTaken?: boolean | null;
    actionNote?: string | null;
}

export class APIResponseOfPatientProgram extends ProvideErrorMessage implements IAPIResponseOfPatientProgram {
    data?: PatientProgram | null;

    constructor(data?: IAPIResponseOfPatientProgram) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? PatientProgram.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfPatientProgram {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfPatientProgram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfPatientProgram extends IProvideErrorMessage {
    data?: IPatientProgram | null;
}

export class APIResponseOfIEnumerableOfConnectStatusDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfConnectStatusDO {
    data?: ConnectStatusDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfConnectStatusDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ConnectStatusDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfConnectStatusDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfConnectStatusDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfConnectStatusDO extends IProvideErrorMessage {
    data?: IConnectStatusDO[] | null;
}

export class ConnectStatusDO implements IConnectStatusDO {
    connectStatus!: ConnectStatus;
    statusName?: string | null;

    constructor(data?: IConnectStatusDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.connectStatus = data["connectStatus"] !== undefined ? data["connectStatus"] : <any>null;
            this.statusName = data["statusName"] !== undefined ? data["statusName"] : <any>null;
        }
    }

    static fromJS(data: any): ConnectStatusDO {
        data = typeof data === 'object' ? data : {};
        let result = new ConnectStatusDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connectStatus"] = this.connectStatus !== undefined ? this.connectStatus : <any>null;
        data["statusName"] = this.statusName !== undefined ? this.statusName : <any>null;
        return data; 
    }
}

export interface IConnectStatusDO {
    connectStatus: ConnectStatus;
    statusName?: string | null;
}

export class APIResponseOfActionDO extends ProvideErrorMessage implements IAPIResponseOfActionDO {
    data?: ActionDO | null;

    constructor(data?: IAPIResponseOfActionDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? ActionDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfActionDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfActionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfActionDO extends IProvideErrorMessage {
    data?: IActionDO | null;
}

export class PatientConnectFilterDO implements IPatientConnectFilterDO {
    dueFrom!: Date;
    dueTo!: Date;
    action!: PcAction;
    programId!: number;
    attendingMOId!: number;
    locationId!: number;

    constructor(data?: IPatientConnectFilterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dueFrom = data["dueFrom"] ? new Date(data["dueFrom"].toString()) : <any>null;
            this.dueTo = data["dueTo"] ? new Date(data["dueTo"].toString()) : <any>null;
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.attendingMOId = data["attendingMOId"] !== undefined ? data["attendingMOId"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
        }
    }

    static fromJS(data: any): PatientConnectFilterDO {
        data = typeof data === 'object' ? data : {};
        let result = new PatientConnectFilterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dueFrom"] = this.dueFrom ? this.dueFrom.toISOString() : <any>null;
        data["dueTo"] = this.dueTo ? this.dueTo.toISOString() : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["attendingMOId"] = this.attendingMOId !== undefined ? this.attendingMOId : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        return data; 
    }
}

export interface IPatientConnectFilterDO {
    dueFrom: Date;
    dueTo: Date;
    action: PcAction;
    programId: number;
    attendingMOId: number;
    locationId: number;
}

export class APIResponseOfIEnumerableOfPracticeWideConnectDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfPracticeWideConnectDO {
    data?: PracticeWideConnectDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfPracticeWideConnectDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PracticeWideConnectDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfPracticeWideConnectDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfPracticeWideConnectDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfPracticeWideConnectDO extends IProvideErrorMessage {
    data?: IPracticeWideConnectDO[] | null;
}

export class PracticeWideConnectDO implements IPracticeWideConnectDO {
    id!: number;
    patientId!: number;
    isSelected!: boolean;
    connectStatus!: ConnectStatus;
    status?: string | null;
    program?: string | null;
    patientName?: string | null;
    attendingMO?: string | null;
    locationName?: string | null;
    referenceDate!: Date;
    nextConnectDue!: Date;
    nextStep!: number;
    cycleCount!: number;
    nextActionDescription?: string | null;
    nextStepDescription?: string | null;
    userLastModified?: string | null;
    deleted!: boolean;
    batchId!: number;

    constructor(data?: IPracticeWideConnectDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.isSelected = data["isSelected"] !== undefined ? data["isSelected"] : <any>null;
            this.connectStatus = data["connectStatus"] !== undefined ? data["connectStatus"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.program = data["program"] !== undefined ? data["program"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.attendingMO = data["attendingMO"] !== undefined ? data["attendingMO"] : <any>null;
            this.locationName = data["locationName"] !== undefined ? data["locationName"] : <any>null;
            this.referenceDate = data["referenceDate"] ? new Date(data["referenceDate"].toString()) : <any>null;
            this.nextConnectDue = data["nextConnectDue"] ? new Date(data["nextConnectDue"].toString()) : <any>null;
            this.nextStep = data["nextStep"] !== undefined ? data["nextStep"] : <any>null;
            this.cycleCount = data["cycleCount"] !== undefined ? data["cycleCount"] : <any>null;
            this.nextActionDescription = data["nextActionDescription"] !== undefined ? data["nextActionDescription"] : <any>null;
            this.nextStepDescription = data["nextStepDescription"] !== undefined ? data["nextStepDescription"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.batchId = data["batchId"] !== undefined ? data["batchId"] : <any>null;
        }
    }

    static fromJS(data: any): PracticeWideConnectDO {
        data = typeof data === 'object' ? data : {};
        let result = new PracticeWideConnectDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["connectStatus"] = this.connectStatus !== undefined ? this.connectStatus : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["program"] = this.program !== undefined ? this.program : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["attendingMO"] = this.attendingMO !== undefined ? this.attendingMO : <any>null;
        data["locationName"] = this.locationName !== undefined ? this.locationName : <any>null;
        data["referenceDate"] = this.referenceDate ? this.referenceDate.toISOString() : <any>null;
        data["nextConnectDue"] = this.nextConnectDue ? this.nextConnectDue.toISOString() : <any>null;
        data["nextStep"] = this.nextStep !== undefined ? this.nextStep : <any>null;
        data["cycleCount"] = this.cycleCount !== undefined ? this.cycleCount : <any>null;
        data["nextActionDescription"] = this.nextActionDescription !== undefined ? this.nextActionDescription : <any>null;
        data["nextStepDescription"] = this.nextStepDescription !== undefined ? this.nextStepDescription : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["batchId"] = this.batchId !== undefined ? this.batchId : <any>null;
        return data; 
    }
}

export interface IPracticeWideConnectDO {
    id: number;
    patientId: number;
    isSelected: boolean;
    connectStatus: ConnectStatus;
    status?: string | null;
    program?: string | null;
    patientName?: string | null;
    attendingMO?: string | null;
    locationName?: string | null;
    referenceDate: Date;
    nextConnectDue: Date;
    nextStep: number;
    cycleCount: number;
    nextActionDescription?: string | null;
    nextStepDescription?: string | null;
    userLastModified?: string | null;
    deleted: boolean;
    batchId: number;
}

export class PracticeWideBatchDO implements IPracticeWideBatchDO {
    batch?: PatientConnectBatchDO | null;
    practiceWideConnects?: PracticeWideConnectDO[] | null;

    constructor(data?: IPracticeWideBatchDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.batch = data.batch && !(<any>data.batch).toJSON ? new PatientConnectBatchDO(data.batch) : <PatientConnectBatchDO>this.batch; 
            if (data.practiceWideConnects) {
                this.practiceWideConnects = [];
                for (let i = 0; i < data.practiceWideConnects.length; i++) {
                    let item = data.practiceWideConnects[i];
                    this.practiceWideConnects[i] = item && !(<any>item).toJSON ? new PracticeWideConnectDO(item) : <PracticeWideConnectDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.batch = data["batch"] ? PatientConnectBatchDO.fromJS(data["batch"]) : <any>null;
            if (data["practiceWideConnects"] && data["practiceWideConnects"].constructor === Array) {
                this.practiceWideConnects = [];
                for (let item of data["practiceWideConnects"])
                    this.practiceWideConnects.push(PracticeWideConnectDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PracticeWideBatchDO {
        data = typeof data === 'object' ? data : {};
        let result = new PracticeWideBatchDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["batch"] = this.batch ? this.batch.toJSON() : <any>null;
        if (this.practiceWideConnects && this.practiceWideConnects.constructor === Array) {
            data["practiceWideConnects"] = [];
            for (let item of this.practiceWideConnects)
                data["practiceWideConnects"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPracticeWideBatchDO {
    batch?: IPatientConnectBatchDO | null;
    practiceWideConnects?: IPracticeWideConnectDO[] | null;
}

export class PatientConnectBatchDO implements IPatientConnectBatchDO {
    id!: number;
    dateCreated!: Date;
    created?: string | null;
    userCreated?: string | null;
    note?: string | null;
    batching!: boolean;
    details?: string | null;
    programId!: number;
    program?: string | null;
    attendingMOId!: number;
    attendingMO?: string | null;
    locationId!: number;
    location?: string | null;
    processed!: number;

    constructor(data?: IPatientConnectBatchDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.created = data["created"] !== undefined ? data["created"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.note = data["note"] !== undefined ? data["note"] : <any>null;
            this.batching = data["batching"] !== undefined ? data["batching"] : <any>null;
            this.details = data["details"] !== undefined ? data["details"] : <any>null;
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.program = data["program"] !== undefined ? data["program"] : <any>null;
            this.attendingMOId = data["attendingMOId"] !== undefined ? data["attendingMOId"] : <any>null;
            this.attendingMO = data["attendingMO"] !== undefined ? data["attendingMO"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
            this.processed = data["processed"] !== undefined ? data["processed"] : <any>null;
        }
    }

    static fromJS(data: any): PatientConnectBatchDO {
        data = typeof data === 'object' ? data : {};
        let result = new PatientConnectBatchDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["created"] = this.created !== undefined ? this.created : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["batching"] = this.batching !== undefined ? this.batching : <any>null;
        data["details"] = this.details !== undefined ? this.details : <any>null;
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["program"] = this.program !== undefined ? this.program : <any>null;
        data["attendingMOId"] = this.attendingMOId !== undefined ? this.attendingMOId : <any>null;
        data["attendingMO"] = this.attendingMO !== undefined ? this.attendingMO : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["processed"] = this.processed !== undefined ? this.processed : <any>null;
        return data; 
    }
}

export interface IPatientConnectBatchDO {
    id: number;
    dateCreated: Date;
    created?: string | null;
    userCreated?: string | null;
    note?: string | null;
    batching: boolean;
    details?: string | null;
    programId: number;
    program?: string | null;
    attendingMOId: number;
    attendingMO?: string | null;
    locationId: number;
    location?: string | null;
    processed: number;
}

export class BatchFilterDO implements IBatchFilterDO {
    fromDate!: Date;
    toDate!: Date;
    user?: string | null;
    selectedBatch?: PatientConnectBatchDO | null;

    constructor(data?: IBatchFilterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.selectedBatch = data.selectedBatch && !(<any>data.selectedBatch).toJSON ? new PatientConnectBatchDO(data.selectedBatch) : <PatientConnectBatchDO>this.selectedBatch; 
        }
    }

    init(data?: any) {
        if (data) {
            this.fromDate = data["fromDate"] ? new Date(data["fromDate"].toString()) : <any>null;
            this.toDate = data["toDate"] ? new Date(data["toDate"].toString()) : <any>null;
            this.user = data["user"] !== undefined ? data["user"] : <any>null;
            this.selectedBatch = data["selectedBatch"] ? PatientConnectBatchDO.fromJS(data["selectedBatch"]) : <any>null;
        }
    }

    static fromJS(data: any): BatchFilterDO {
        data = typeof data === 'object' ? data : {};
        let result = new BatchFilterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["user"] = this.user !== undefined ? this.user : <any>null;
        data["selectedBatch"] = this.selectedBatch ? this.selectedBatch.toJSON() : <any>null;
        return data; 
    }
}

export interface IBatchFilterDO {
    fromDate: Date;
    toDate: Date;
    user?: string | null;
    selectedBatch?: IPatientConnectBatchDO | null;
}

export class APIResponseOfIEnumerableOfPatientConnectBatchDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfPatientConnectBatchDO {
    data?: PatientConnectBatchDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfPatientConnectBatchDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(PatientConnectBatchDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfPatientConnectBatchDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfPatientConnectBatchDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfPatientConnectBatchDO extends IProvideErrorMessage {
    data?: IPatientConnectBatchDO[] | null;
}

export class APIResponseOfDateTime extends ProvideErrorMessage implements IAPIResponseOfDateTime {
    data!: Date;

    constructor(data?: IAPIResponseOfDateTime) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? new Date(data["data"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfDateTime {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfDateTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfDateTime extends IProvideErrorMessage {
    data: Date;
}

export class APIResponseOfIEnumerableOfProgramDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfProgramDO {
    data?: ProgramDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfProgramDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ProgramDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfProgramDO extends IProvideErrorMessage {
    data?: IProgramDO[] | null;
}

export class APIResponseOfIEnumerableOfProgramListItemDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfProgramListItemDO {
    data?: ProgramListItemDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfProgramListItemDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ProgramListItemDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfProgramListItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfProgramListItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfProgramListItemDO extends IProvideErrorMessage {
    data?: IProgramListItemDO[] | null;
}

export class ProgramListItemDO implements IProgramListItemDO {
    id!: number;
    reason?: string | null;

    constructor(data?: IProgramListItemDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.reason = data["reason"] !== undefined ? data["reason"] : <any>null;
        }
    }

    static fromJS(data: any): ProgramListItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramListItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["reason"] = this.reason !== undefined ? this.reason : <any>null;
        return data; 
    }
}

export interface IProgramListItemDO {
    id: number;
    reason?: string | null;
}

export class APIResponseOfProgramDO extends ProvideErrorMessage implements IAPIResponseOfProgramDO {
    data?: ProgramDO | null;

    constructor(data?: IAPIResponseOfProgramDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? ProgramDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfProgramDO extends IProvideErrorMessage {
    data?: IProgramDO | null;
}

export class APIResponseOfIEnumerableOfProgramTypeDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfProgramTypeDO {
    data?: ProgramTypeDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfProgramTypeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ProgramTypeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfProgramTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfProgramTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfProgramTypeDO extends IProvideErrorMessage {
    data?: IProgramTypeDO[] | null;
}

export class ProgramTypeDO implements IProgramTypeDO {
    id!: ProgramType;
    typeName?: string | null;

    constructor(data?: IProgramTypeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.typeName = data["typeName"] !== undefined ? data["typeName"] : <any>null;
        }
    }

    static fromJS(data: any): ProgramTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["typeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        return data; 
    }
}

export interface IProgramTypeDO {
    id: ProgramType;
    typeName?: string | null;
}

export class APIResponseOfPcManagementDO extends ProvideErrorMessage implements IAPIResponseOfPcManagementDO {
    data?: PcManagementDO | null;

    constructor(data?: IAPIResponseOfPcManagementDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? PcManagementDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfPcManagementDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfPcManagementDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfPcManagementDO extends IProvideErrorMessage {
    data?: IPcManagementDO | null;
}

export class PcManagementDO implements IPcManagementDO {
    programs?: ProgramDO[] | null;
    programTypes?: ProgramTypeDO[] | null;
    actionList?: PcActionDO[] | null;
    letterTemplates?: LetterTemplateDO[] | null;
    smsTemplates?: string[] | null;
    emailTemplates?: string[] | null;
    replyContentList?: ReplyContentTypeDO[] | null;
    allBookingTypes?: SelectedBookingTypeDO[] | null;
    programTypeColours?: PCProgramTypeColour[] | null;

    constructor(data?: IPcManagementDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.programs) {
                this.programs = [];
                for (let i = 0; i < data.programs.length; i++) {
                    let item = data.programs[i];
                    this.programs[i] = item && !(<any>item).toJSON ? new ProgramDO(item) : <ProgramDO>item;
                }
            }
            if (data.programTypes) {
                this.programTypes = [];
                for (let i = 0; i < data.programTypes.length; i++) {
                    let item = data.programTypes[i];
                    this.programTypes[i] = item && !(<any>item).toJSON ? new ProgramTypeDO(item) : <ProgramTypeDO>item;
                }
            }
            if (data.actionList) {
                this.actionList = [];
                for (let i = 0; i < data.actionList.length; i++) {
                    let item = data.actionList[i];
                    this.actionList[i] = item && !(<any>item).toJSON ? new PcActionDO(item) : <PcActionDO>item;
                }
            }
            if (data.letterTemplates) {
                this.letterTemplates = [];
                for (let i = 0; i < data.letterTemplates.length; i++) {
                    let item = data.letterTemplates[i];
                    this.letterTemplates[i] = item && !(<any>item).toJSON ? new LetterTemplateDO(item) : <LetterTemplateDO>item;
                }
            }
            if (data.replyContentList) {
                this.replyContentList = [];
                for (let i = 0; i < data.replyContentList.length; i++) {
                    let item = data.replyContentList[i];
                    this.replyContentList[i] = item && !(<any>item).toJSON ? new ReplyContentTypeDO(item) : <ReplyContentTypeDO>item;
                }
            }
            if (data.allBookingTypes) {
                this.allBookingTypes = [];
                for (let i = 0; i < data.allBookingTypes.length; i++) {
                    let item = data.allBookingTypes[i];
                    this.allBookingTypes[i] = item && !(<any>item).toJSON ? new SelectedBookingTypeDO(item) : <SelectedBookingTypeDO>item;
                }
            }
            if (data.programTypeColours) {
                this.programTypeColours = [];
                for (let i = 0; i < data.programTypeColours.length; i++) {
                    let item = data.programTypeColours[i];
                    this.programTypeColours[i] = item && !(<any>item).toJSON ? new PCProgramTypeColour(item) : <PCProgramTypeColour>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["programs"] && data["programs"].constructor === Array) {
                this.programs = [];
                for (let item of data["programs"])
                    this.programs.push(ProgramDO.fromJS(item));
            }
            if (data["programTypes"] && data["programTypes"].constructor === Array) {
                this.programTypes = [];
                for (let item of data["programTypes"])
                    this.programTypes.push(ProgramTypeDO.fromJS(item));
            }
            if (data["actionList"] && data["actionList"].constructor === Array) {
                this.actionList = [];
                for (let item of data["actionList"])
                    this.actionList.push(PcActionDO.fromJS(item));
            }
            if (data["letterTemplates"] && data["letterTemplates"].constructor === Array) {
                this.letterTemplates = [];
                for (let item of data["letterTemplates"])
                    this.letterTemplates.push(LetterTemplateDO.fromJS(item));
            }
            if (data["smsTemplates"] && data["smsTemplates"].constructor === Array) {
                this.smsTemplates = [];
                for (let item of data["smsTemplates"])
                    this.smsTemplates.push(item);
            }
            if (data["emailTemplates"] && data["emailTemplates"].constructor === Array) {
                this.emailTemplates = [];
                for (let item of data["emailTemplates"])
                    this.emailTemplates.push(item);
            }
            if (data["replyContentList"] && data["replyContentList"].constructor === Array) {
                this.replyContentList = [];
                for (let item of data["replyContentList"])
                    this.replyContentList.push(ReplyContentTypeDO.fromJS(item));
            }
            if (data["allBookingTypes"] && data["allBookingTypes"].constructor === Array) {
                this.allBookingTypes = [];
                for (let item of data["allBookingTypes"])
                    this.allBookingTypes.push(SelectedBookingTypeDO.fromJS(item));
            }
            if (data["programTypeColours"] && data["programTypeColours"].constructor === Array) {
                this.programTypeColours = [];
                for (let item of data["programTypeColours"])
                    this.programTypeColours.push(PCProgramTypeColour.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PcManagementDO {
        data = typeof data === 'object' ? data : {};
        let result = new PcManagementDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.programs && this.programs.constructor === Array) {
            data["programs"] = [];
            for (let item of this.programs)
                data["programs"].push(item.toJSON());
        }
        if (this.programTypes && this.programTypes.constructor === Array) {
            data["programTypes"] = [];
            for (let item of this.programTypes)
                data["programTypes"].push(item.toJSON());
        }
        if (this.actionList && this.actionList.constructor === Array) {
            data["actionList"] = [];
            for (let item of this.actionList)
                data["actionList"].push(item.toJSON());
        }
        if (this.letterTemplates && this.letterTemplates.constructor === Array) {
            data["letterTemplates"] = [];
            for (let item of this.letterTemplates)
                data["letterTemplates"].push(item.toJSON());
        }
        if (this.smsTemplates && this.smsTemplates.constructor === Array) {
            data["smsTemplates"] = [];
            for (let item of this.smsTemplates)
                data["smsTemplates"].push(item);
        }
        if (this.emailTemplates && this.emailTemplates.constructor === Array) {
            data["emailTemplates"] = [];
            for (let item of this.emailTemplates)
                data["emailTemplates"].push(item);
        }
        if (this.replyContentList && this.replyContentList.constructor === Array) {
            data["replyContentList"] = [];
            for (let item of this.replyContentList)
                data["replyContentList"].push(item.toJSON());
        }
        if (this.allBookingTypes && this.allBookingTypes.constructor === Array) {
            data["allBookingTypes"] = [];
            for (let item of this.allBookingTypes)
                data["allBookingTypes"].push(item.toJSON());
        }
        if (this.programTypeColours && this.programTypeColours.constructor === Array) {
            data["programTypeColours"] = [];
            for (let item of this.programTypeColours)
                data["programTypeColours"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPcManagementDO {
    programs?: IProgramDO[] | null;
    programTypes?: IProgramTypeDO[] | null;
    actionList?: IPcActionDO[] | null;
    letterTemplates?: ILetterTemplateDO[] | null;
    smsTemplates?: string[] | null;
    emailTemplates?: string[] | null;
    replyContentList?: IReplyContentTypeDO[] | null;
    allBookingTypes?: ISelectedBookingTypeDO[] | null;
    programTypeColours?: IPCProgramTypeColour[] | null;
}

export class PcActionDO implements IPcActionDO {
    id!: number;
    actionName?: string | null;

    constructor(data?: IPcActionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.actionName = data["actionName"] !== undefined ? data["actionName"] : <any>null;
        }
    }

    static fromJS(data: any): PcActionDO {
        data = typeof data === 'object' ? data : {};
        let result = new PcActionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        return data; 
    }
}

export interface IPcActionDO {
    id: number;
    actionName?: string | null;
}

export class LetterTemplateDO implements ILetterTemplateDO {
    id!: number;
    templateDescription?: string | null;

    constructor(data?: ILetterTemplateDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.templateDescription = data["templateDescription"] !== undefined ? data["templateDescription"] : <any>null;
        }
    }

    static fromJS(data: any): LetterTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new LetterTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["templateDescription"] = this.templateDescription !== undefined ? this.templateDescription : <any>null;
        return data; 
    }
}

export interface ILetterTemplateDO {
    id: number;
    templateDescription?: string | null;
}

export class ReplyContentTypeDO implements IReplyContentTypeDO {
    id!: number;
    content?: string | null;

    constructor(data?: IReplyContentTypeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
        }
    }

    static fromJS(data: any): ReplyContentTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyContentTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IReplyContentTypeDO {
    id: number;
    content?: string | null;
}

export class PCProgramTypeColour implements IPCProgramTypeColour {
    pcProgramType?: string | null;
    pcColour!: string;

    constructor(data?: IPCProgramTypeColour) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pcProgramType = data["pcProgramType"] !== undefined ? data["pcProgramType"] : <any>null;
            this.pcColour = data["pcColour"] !== undefined ? data["pcColour"] : <any>null;
        }
    }

    static fromJS(data: any): PCProgramTypeColour {
        data = typeof data === 'object' ? data : {};
        let result = new PCProgramTypeColour();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pcProgramType"] = this.pcProgramType !== undefined ? this.pcProgramType : <any>null;
        data["pcColour"] = this.pcColour !== undefined ? this.pcColour : <any>null;
        return data; 
    }
}

export interface IPCProgramTypeColour {
    pcProgramType?: string | null;
    pcColour: string;
}

export class APIResponseOfIEnumerableOfSelectedBookingTypeDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfSelectedBookingTypeDO {
    data?: SelectedBookingTypeDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfSelectedBookingTypeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(SelectedBookingTypeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfSelectedBookingTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfSelectedBookingTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfSelectedBookingTypeDO extends IProvideErrorMessage {
    data?: ISelectedBookingTypeDO[] | null;
}

export class APIResponseOfIEnumerableOfLetterTemplateDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfLetterTemplateDO {
    data?: LetterTemplateDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfLetterTemplateDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(LetterTemplateDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfLetterTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfLetterTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfLetterTemplateDO extends IProvideErrorMessage {
    data?: ILetterTemplateDO[] | null;
}

export class APIResponseOfIEnumerableOfListItemDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfListItemDO {
    data?: ListItemDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfListItemDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ListItemDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfListItemDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfListItemDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfListItemDO extends IProvideErrorMessage {
    data?: IListItemDO[] | null;
}

export class APIResponseOfEffectedConnectsOnProgramDO extends ProvideErrorMessage implements IAPIResponseOfEffectedConnectsOnProgramDO {
    data?: EffectedConnectsOnProgramDO | null;

    constructor(data?: IAPIResponseOfEffectedConnectsOnProgramDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? EffectedConnectsOnProgramDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfEffectedConnectsOnProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfEffectedConnectsOnProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfEffectedConnectsOnProgramDO extends IProvideErrorMessage {
    data?: IEffectedConnectsOnProgramDO | null;
}

export class PatientProgramOnProgramQuery implements IPatientProgramOnProgramQuery {
    programId!: number;
    pageIndex!: number;
    pageSize!: number;

    constructor(data?: IPatientProgramOnProgramQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.pageIndex = data["pageIndex"] !== undefined ? data["pageIndex"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
        }
    }

    static fromJS(data: any): PatientProgramOnProgramQuery {
        data = typeof data === 'object' ? data : {};
        let result = new PatientProgramOnProgramQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        return data; 
    }
}

export interface IPatientProgramOnProgramQuery {
    programId: number;
    pageIndex: number;
    pageSize: number;
}

export class APIResponseOfPatientProgramOnProgramResponse extends ProvideErrorMessage implements IAPIResponseOfPatientProgramOnProgramResponse {
    data?: PatientProgramOnProgramResponse | null;

    constructor(data?: IAPIResponseOfPatientProgramOnProgramResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? PatientProgramOnProgramResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfPatientProgramOnProgramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfPatientProgramOnProgramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfPatientProgramOnProgramResponse extends IProvideErrorMessage {
    data?: IPatientProgramOnProgramResponse | null;
}

export class PatientProgramOnProgramResponse implements IPatientProgramOnProgramResponse {
    programId!: number;
    totalPatientsOnProgram!: number;
    patientsOnProgram?: PatientProgramOnProgramDO[] | null;

    constructor(data?: IPatientProgramOnProgramResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.patientsOnProgram) {
                this.patientsOnProgram = [];
                for (let i = 0; i < data.patientsOnProgram.length; i++) {
                    let item = data.patientsOnProgram[i];
                    this.patientsOnProgram[i] = item && !(<any>item).toJSON ? new PatientProgramOnProgramDO(item) : <PatientProgramOnProgramDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.totalPatientsOnProgram = data["totalPatientsOnProgram"] !== undefined ? data["totalPatientsOnProgram"] : <any>null;
            if (data["patientsOnProgram"] && data["patientsOnProgram"].constructor === Array) {
                this.patientsOnProgram = [];
                for (let item of data["patientsOnProgram"])
                    this.patientsOnProgram.push(PatientProgramOnProgramDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientProgramOnProgramResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PatientProgramOnProgramResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["totalPatientsOnProgram"] = this.totalPatientsOnProgram !== undefined ? this.totalPatientsOnProgram : <any>null;
        if (this.patientsOnProgram && this.patientsOnProgram.constructor === Array) {
            data["patientsOnProgram"] = [];
            for (let item of this.patientsOnProgram)
                data["patientsOnProgram"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPatientProgramOnProgramResponse {
    programId: number;
    totalPatientsOnProgram: number;
    patientsOnProgram?: IPatientProgramOnProgramDO[] | null;
}

export class PatientProgramOnProgramDO implements IPatientProgramOnProgramDO {
    programId!: number;
    seqNo!: number;
    id!: number;
    patientId!: number;
    patientName?: string | null;
    actionDate!: Date;
    step!: number;
    action?: string | null;

    constructor(data?: IPatientProgramOnProgramDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
            this.seqNo = data["seqNo"] !== undefined ? data["seqNo"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.patientName = data["patientName"] !== undefined ? data["patientName"] : <any>null;
            this.actionDate = data["actionDate"] ? new Date(data["actionDate"].toString()) : <any>null;
            this.step = data["step"] !== undefined ? data["step"] : <any>null;
            this.action = data["action"] !== undefined ? data["action"] : <any>null;
        }
    }

    static fromJS(data: any): PatientProgramOnProgramDO {
        data = typeof data === 'object' ? data : {};
        let result = new PatientProgramOnProgramDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        data["seqNo"] = this.seqNo !== undefined ? this.seqNo : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["patientName"] = this.patientName !== undefined ? this.patientName : <any>null;
        data["actionDate"] = this.actionDate ? this.actionDate.toISOString() : <any>null;
        data["step"] = this.step !== undefined ? this.step : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        return data; 
    }
}

export interface IPatientProgramOnProgramDO {
    programId: number;
    seqNo: number;
    id: number;
    patientId: number;
    patientName?: string | null;
    actionDate: Date;
    step: number;
    action?: string | null;
}

export class MovingConnectsDO implements IMovingConnectsDO {
    currentProgramId!: number;
    currentProgramName?: string | null;
    patientCount!: number;
    moveToProgramId!: number;
    moveToProgramName?: string | null;
    moveToActions?: MoveToActionStep[] | null;
    userLastModified?: string | null;
    movingConnectSteps?: MovingStepDO[] | null;

    constructor(data?: IMovingConnectsDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.moveToActions) {
                this.moveToActions = [];
                for (let i = 0; i < data.moveToActions.length; i++) {
                    let item = data.moveToActions[i];
                    this.moveToActions[i] = item && !(<any>item).toJSON ? new MoveToActionStep(item) : <MoveToActionStep>item;
                }
            }
            if (data.movingConnectSteps) {
                this.movingConnectSteps = [];
                for (let i = 0; i < data.movingConnectSteps.length; i++) {
                    let item = data.movingConnectSteps[i];
                    this.movingConnectSteps[i] = item && !(<any>item).toJSON ? new MovingStepDO(item) : <MovingStepDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentProgramId = data["currentProgramId"] !== undefined ? data["currentProgramId"] : <any>null;
            this.currentProgramName = data["currentProgramName"] !== undefined ? data["currentProgramName"] : <any>null;
            this.patientCount = data["patientCount"] !== undefined ? data["patientCount"] : <any>null;
            this.moveToProgramId = data["moveToProgramId"] !== undefined ? data["moveToProgramId"] : <any>null;
            this.moveToProgramName = data["moveToProgramName"] !== undefined ? data["moveToProgramName"] : <any>null;
            if (data["moveToActions"] && data["moveToActions"].constructor === Array) {
                this.moveToActions = [];
                for (let item of data["moveToActions"])
                    this.moveToActions.push(MoveToActionStep.fromJS(item));
            }
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            if (data["movingConnectSteps"] && data["movingConnectSteps"].constructor === Array) {
                this.movingConnectSteps = [];
                for (let item of data["movingConnectSteps"])
                    this.movingConnectSteps.push(MovingStepDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovingConnectsDO {
        data = typeof data === 'object' ? data : {};
        let result = new MovingConnectsDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentProgramId"] = this.currentProgramId !== undefined ? this.currentProgramId : <any>null;
        data["currentProgramName"] = this.currentProgramName !== undefined ? this.currentProgramName : <any>null;
        data["patientCount"] = this.patientCount !== undefined ? this.patientCount : <any>null;
        data["moveToProgramId"] = this.moveToProgramId !== undefined ? this.moveToProgramId : <any>null;
        data["moveToProgramName"] = this.moveToProgramName !== undefined ? this.moveToProgramName : <any>null;
        if (this.moveToActions && this.moveToActions.constructor === Array) {
            data["moveToActions"] = [];
            for (let item of this.moveToActions)
                data["moveToActions"].push(item.toJSON());
        }
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        if (this.movingConnectSteps && this.movingConnectSteps.constructor === Array) {
            data["movingConnectSteps"] = [];
            for (let item of this.movingConnectSteps)
                data["movingConnectSteps"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMovingConnectsDO {
    currentProgramId: number;
    currentProgramName?: string | null;
    patientCount: number;
    moveToProgramId: number;
    moveToProgramName?: string | null;
    moveToActions?: IMoveToActionStep[] | null;
    userLastModified?: string | null;
    movingConnectSteps?: IMovingStepDO[] | null;
}

export class MoveToActionStep implements IMoveToActionStep {
    definitionStep!: number;
    actionSelectionName?: string | null;

    constructor(data?: IMoveToActionStep) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.definitionStep = data["definitionStep"] !== undefined ? data["definitionStep"] : <any>null;
            this.actionSelectionName = data["actionSelectionName"] !== undefined ? data["actionSelectionName"] : <any>null;
        }
    }

    static fromJS(data: any): MoveToActionStep {
        data = typeof data === 'object' ? data : {};
        let result = new MoveToActionStep();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["definitionStep"] = this.definitionStep !== undefined ? this.definitionStep : <any>null;
        data["actionSelectionName"] = this.actionSelectionName !== undefined ? this.actionSelectionName : <any>null;
        return data; 
    }
}

export interface IMoveToActionStep {
    definitionStep: number;
    actionSelectionName?: string | null;
}

export class MovingStepDO implements IMovingStepDO {
    beforeMoveNextStep!: number;
    beforeMoveStepName?: string | null;
    beforeMovePatientsOnStepCount!: number;
    afterMoveNextStep!: number;

    constructor(data?: IMovingStepDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.beforeMoveNextStep = data["beforeMoveNextStep"] !== undefined ? data["beforeMoveNextStep"] : <any>null;
            this.beforeMoveStepName = data["beforeMoveStepName"] !== undefined ? data["beforeMoveStepName"] : <any>null;
            this.beforeMovePatientsOnStepCount = data["beforeMovePatientsOnStepCount"] !== undefined ? data["beforeMovePatientsOnStepCount"] : <any>null;
            this.afterMoveNextStep = data["afterMoveNextStep"] !== undefined ? data["afterMoveNextStep"] : <any>null;
        }
    }

    static fromJS(data: any): MovingStepDO {
        data = typeof data === 'object' ? data : {};
        let result = new MovingStepDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beforeMoveNextStep"] = this.beforeMoveNextStep !== undefined ? this.beforeMoveNextStep : <any>null;
        data["beforeMoveStepName"] = this.beforeMoveStepName !== undefined ? this.beforeMoveStepName : <any>null;
        data["beforeMovePatientsOnStepCount"] = this.beforeMovePatientsOnStepCount !== undefined ? this.beforeMovePatientsOnStepCount : <any>null;
        data["afterMoveNextStep"] = this.afterMoveNextStep !== undefined ? this.afterMoveNextStep : <any>null;
        return data; 
    }
}

export interface IMovingStepDO {
    beforeMoveNextStep: number;
    beforeMoveStepName?: string | null;
    beforeMovePatientsOnStepCount: number;
    afterMoveNextStep: number;
}

export class APIResponseOfMovingConnectsDO extends ProvideErrorMessage implements IAPIResponseOfMovingConnectsDO {
    data?: MovingConnectsDO | null;

    constructor(data?: IAPIResponseOfMovingConnectsDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? MovingConnectsDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfMovingConnectsDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfMovingConnectsDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfMovingConnectsDO extends IProvideErrorMessage {
    data?: IMovingConnectsDO | null;
}

export class ReplyContentFilterDO implements IReplyContentFilterDO {
    locationId?: number | null;
    attendingMOId?: number | null;
    programId?: number | null;

    constructor(data?: IReplyContentFilterDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.attendingMOId = data["attendingMOId"] !== undefined ? data["attendingMOId"] : <any>null;
            this.programId = data["programId"] !== undefined ? data["programId"] : <any>null;
        }
    }

    static fromJS(data: any): ReplyContentFilterDO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyContentFilterDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["attendingMOId"] = this.attendingMOId !== undefined ? this.attendingMOId : <any>null;
        data["programId"] = this.programId !== undefined ? this.programId : <any>null;
        return data; 
    }
}

export interface IReplyContentFilterDO {
    locationId?: number | null;
    attendingMOId?: number | null;
    programId?: number | null;
}

export class APIResponseOfIEnumerableOfReplyContentDO extends ProvideErrorMessage implements IAPIResponseOfIEnumerableOfReplyContentDO {
    data?: ReplyContentDO[] | null;

    constructor(data?: IAPIResponseOfIEnumerableOfReplyContentDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(ReplyContentDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfIEnumerableOfReplyContentDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfIEnumerableOfReplyContentDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfIEnumerableOfReplyContentDO extends IProvideErrorMessage {
    data?: IReplyContentDO[] | null;
}

export class AddPatientApiRequestParams extends BaseRequestParams implements IAddPatientApiRequestParams {
    patient_ID!: number;
    company_ID?: number | null;
    firstName?: string | null;
    surname?: string | null;
    knownAs?: string | null;
    initials?: string | null;
    title?: string | null;
    sex?: string | null;
    dob?: Date | null;
    ethnicity?: string | null;
    family_ID?: number | null;
    inFamily?: boolean | null;
    hasAlias?: boolean | null;
    mrn?: string | null;
    occupation?: string | null;
    patientType?: number | null;
    homePhone?: string | null;
    workPhone?: string | null;
    mobile?: string | null;
    homeFax?: string | null;
    workFax?: string | null;
    email?: string | null;
    pStatus?: string | null;
    dateDeceased?: Date | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    note_ID?: number | null;
    snd_name?: string | null;
    cntBookingNoShow?: number | null;
    cntBookingCancel?: number | null;
    cntBookingChange?: number | null;
    medicare?: string | null;
    medicareRefNo?: string | null;
    mediExpYYYY?: number | null;
    mediExpMM?: number | null;
    medicareVerifyDate?: Date | null;
    vetAffairs?: string | null;
    healthFundID?: number | null;
    fundNumber?: string | null;
    fundNumberUPI?: string | null;
    fundExpYYYY?: number | null;
    fundExpMM?: number | null;
    fundPlan?: number | null;
    feeTable_ID?: number | null;
    attendingMO?: number | null;
    primaryHealthProvider?: number | null;
    lastVisitGP?: Date | null;
    treatmentLocation?: number | null;
    fullReg?: boolean | null;
    billingType?: number | null;
    hospitalBillingClass?: string | null;
    privacyDisclaimer?: boolean | null;
    archive?: boolean | null;
    pensionNumber?: string | null;
    commenced?: Date | null;
    ceased?: Date | null;
    userIdentifier1?: string | null;
    userIdentifier2?: string | null;
    extPatient_ID?: string | null;
    possibleDuplicate?: boolean | null;
    deleted?: boolean | null;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    jobtitle?: string | null;
    primaryPhone?: number | null;
    dateFirstBooking?: Date | null;
    dateFirstInvoice?: Date | null;
    alertBilling?: boolean | null;
    alertPatientNote?: boolean | null;
    alertUser1?: number | null;
    alertUser2?: number | null;
    ctimestamp?: string | null;
    patientInfoForm?: boolean | null;
    inpatient?: boolean | null;
    ward?: string | null;
    dateLatestBooking?: Date | null;
    noStatementDate?: Date | null;
    noStatementReason?: string | null;
    accountHoldDate?: Date | null;
    accountHoldReason?: string | null;
    programLatestExpiryDate?: Date | null;
    chartDoNotMove?: boolean | null;
    lastSuccessfulPVM?: Date | null;
    lastSuccessfulPVF?: Date | null;
    lastSuccessfulOVV?: Date | null;
    familyHistoryPresent?: boolean | null;
    allergiesPresent?: boolean | null;
    transport?: number | null;
    mrN_Feed?: number | null;
    birthOrder!: number;
    allowAutomatedSMS?: boolean | null;
    surnameSoundex?: string | null;
    preferredPhone?: string | null;
    devicesNotRecorded?: number | null;
    clinicalNote?: number | null;
    dvaCardType?: number | null;
    hasCustomFieldAlerts?: boolean | null;

    constructor(data?: IAddPatientApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.knownAs = data["knownAs"] !== undefined ? data["knownAs"] : <any>null;
            this.initials = data["initials"] !== undefined ? data["initials"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.sex = data["sex"] !== undefined ? data["sex"] : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
            this.ethnicity = data["ethnicity"] !== undefined ? data["ethnicity"] : <any>null;
            this.family_ID = data["family_ID"] !== undefined ? data["family_ID"] : <any>null;
            this.inFamily = data["inFamily"] !== undefined ? data["inFamily"] : <any>null;
            this.hasAlias = data["hasAlias"] !== undefined ? data["hasAlias"] : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.occupation = data["occupation"] !== undefined ? data["occupation"] : <any>null;
            this.patientType = data["patientType"] !== undefined ? data["patientType"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.homeFax = data["homeFax"] !== undefined ? data["homeFax"] : <any>null;
            this.workFax = data["workFax"] !== undefined ? data["workFax"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.pStatus = data["pStatus"] !== undefined ? data["pStatus"] : <any>null;
            this.dateDeceased = data["dateDeceased"] ? new Date(data["dateDeceased"].toString()) : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.snd_name = data["snd_name"] !== undefined ? data["snd_name"] : <any>null;
            this.cntBookingNoShow = data["cntBookingNoShow"] !== undefined ? data["cntBookingNoShow"] : <any>null;
            this.cntBookingCancel = data["cntBookingCancel"] !== undefined ? data["cntBookingCancel"] : <any>null;
            this.cntBookingChange = data["cntBookingChange"] !== undefined ? data["cntBookingChange"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.medicareRefNo = data["medicareRefNo"] !== undefined ? data["medicareRefNo"] : <any>null;
            this.mediExpYYYY = data["mediExpYYYY"] !== undefined ? data["mediExpYYYY"] : <any>null;
            this.mediExpMM = data["mediExpMM"] !== undefined ? data["mediExpMM"] : <any>null;
            this.medicareVerifyDate = data["medicareVerifyDate"] ? new Date(data["medicareVerifyDate"].toString()) : <any>null;
            this.vetAffairs = data["vetAffairs"] !== undefined ? data["vetAffairs"] : <any>null;
            this.healthFundID = data["healthFundID"] !== undefined ? data["healthFundID"] : <any>null;
            this.fundNumber = data["fundNumber"] !== undefined ? data["fundNumber"] : <any>null;
            this.fundNumberUPI = data["fundNumberUPI"] !== undefined ? data["fundNumberUPI"] : <any>null;
            this.fundExpYYYY = data["fundExpYYYY"] !== undefined ? data["fundExpYYYY"] : <any>null;
            this.fundExpMM = data["fundExpMM"] !== undefined ? data["fundExpMM"] : <any>null;
            this.fundPlan = data["fundPlan"] !== undefined ? data["fundPlan"] : <any>null;
            this.feeTable_ID = data["feeTable_ID"] !== undefined ? data["feeTable_ID"] : <any>null;
            this.attendingMO = data["attendingMO"] !== undefined ? data["attendingMO"] : <any>null;
            this.primaryHealthProvider = data["primaryHealthProvider"] !== undefined ? data["primaryHealthProvider"] : <any>null;
            this.lastVisitGP = data["lastVisitGP"] ? new Date(data["lastVisitGP"].toString()) : <any>null;
            this.treatmentLocation = data["treatmentLocation"] !== undefined ? data["treatmentLocation"] : <any>null;
            this.fullReg = data["fullReg"] !== undefined ? data["fullReg"] : <any>null;
            this.billingType = data["billingType"] !== undefined ? data["billingType"] : <any>null;
            this.hospitalBillingClass = data["hospitalBillingClass"] !== undefined ? data["hospitalBillingClass"] : <any>null;
            this.privacyDisclaimer = data["privacyDisclaimer"] !== undefined ? data["privacyDisclaimer"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
            this.pensionNumber = data["pensionNumber"] !== undefined ? data["pensionNumber"] : <any>null;
            this.commenced = data["commenced"] ? new Date(data["commenced"].toString()) : <any>null;
            this.ceased = data["ceased"] ? new Date(data["ceased"].toString()) : <any>null;
            this.userIdentifier1 = data["userIdentifier1"] !== undefined ? data["userIdentifier1"] : <any>null;
            this.userIdentifier2 = data["userIdentifier2"] !== undefined ? data["userIdentifier2"] : <any>null;
            this.extPatient_ID = data["extPatient_ID"] !== undefined ? data["extPatient_ID"] : <any>null;
            this.possibleDuplicate = data["possibleDuplicate"] !== undefined ? data["possibleDuplicate"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.jobtitle = data["jobtitle"] !== undefined ? data["jobtitle"] : <any>null;
            this.primaryPhone = data["primaryPhone"] !== undefined ? data["primaryPhone"] : <any>null;
            this.dateFirstBooking = data["dateFirstBooking"] ? new Date(data["dateFirstBooking"].toString()) : <any>null;
            this.dateFirstInvoice = data["dateFirstInvoice"] ? new Date(data["dateFirstInvoice"].toString()) : <any>null;
            this.alertBilling = data["alertBilling"] !== undefined ? data["alertBilling"] : <any>null;
            this.alertPatientNote = data["alertPatientNote"] !== undefined ? data["alertPatientNote"] : <any>null;
            this.alertUser1 = data["alertUser1"] !== undefined ? data["alertUser1"] : <any>null;
            this.alertUser2 = data["alertUser2"] !== undefined ? data["alertUser2"] : <any>null;
            this.ctimestamp = data["ctimestamp"] !== undefined ? data["ctimestamp"] : <any>null;
            this.patientInfoForm = data["patientInfoForm"] !== undefined ? data["patientInfoForm"] : <any>null;
            this.inpatient = data["inpatient"] !== undefined ? data["inpatient"] : <any>null;
            this.ward = data["ward"] !== undefined ? data["ward"] : <any>null;
            this.dateLatestBooking = data["dateLatestBooking"] ? new Date(data["dateLatestBooking"].toString()) : <any>null;
            this.noStatementDate = data["noStatementDate"] ? new Date(data["noStatementDate"].toString()) : <any>null;
            this.noStatementReason = data["noStatementReason"] !== undefined ? data["noStatementReason"] : <any>null;
            this.accountHoldDate = data["accountHoldDate"] ? new Date(data["accountHoldDate"].toString()) : <any>null;
            this.accountHoldReason = data["accountHoldReason"] !== undefined ? data["accountHoldReason"] : <any>null;
            this.programLatestExpiryDate = data["programLatestExpiryDate"] ? new Date(data["programLatestExpiryDate"].toString()) : <any>null;
            this.chartDoNotMove = data["chartDoNotMove"] !== undefined ? data["chartDoNotMove"] : <any>null;
            this.lastSuccessfulPVM = data["lastSuccessfulPVM"] ? new Date(data["lastSuccessfulPVM"].toString()) : <any>null;
            this.lastSuccessfulPVF = data["lastSuccessfulPVF"] ? new Date(data["lastSuccessfulPVF"].toString()) : <any>null;
            this.lastSuccessfulOVV = data["lastSuccessfulOVV"] ? new Date(data["lastSuccessfulOVV"].toString()) : <any>null;
            this.familyHistoryPresent = data["familyHistoryPresent"] !== undefined ? data["familyHistoryPresent"] : <any>null;
            this.allergiesPresent = data["allergiesPresent"] !== undefined ? data["allergiesPresent"] : <any>null;
            this.transport = data["transport"] !== undefined ? data["transport"] : <any>null;
            this.mrN_Feed = data["mrN_Feed"] !== undefined ? data["mrN_Feed"] : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
            this.allowAutomatedSMS = data["allowAutomatedSMS"] !== undefined ? data["allowAutomatedSMS"] : <any>null;
            this.surnameSoundex = data["surnameSoundex"] !== undefined ? data["surnameSoundex"] : <any>null;
            this.preferredPhone = data["preferredPhone"] !== undefined ? data["preferredPhone"] : <any>null;
            this.devicesNotRecorded = data["devicesNotRecorded"] !== undefined ? data["devicesNotRecorded"] : <any>null;
            this.clinicalNote = data["clinicalNote"] !== undefined ? data["clinicalNote"] : <any>null;
            this.dvaCardType = data["dvaCardType"] !== undefined ? data["dvaCardType"] : <any>null;
            this.hasCustomFieldAlerts = data["hasCustomFieldAlerts"] !== undefined ? data["hasCustomFieldAlerts"] : <any>null;
        }
    }

    static fromJS(data: any): AddPatientApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddPatientApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["knownAs"] = this.knownAs !== undefined ? this.knownAs : <any>null;
        data["initials"] = this.initials !== undefined ? this.initials : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["sex"] = this.sex !== undefined ? this.sex : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        data["ethnicity"] = this.ethnicity !== undefined ? this.ethnicity : <any>null;
        data["family_ID"] = this.family_ID !== undefined ? this.family_ID : <any>null;
        data["inFamily"] = this.inFamily !== undefined ? this.inFamily : <any>null;
        data["hasAlias"] = this.hasAlias !== undefined ? this.hasAlias : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["occupation"] = this.occupation !== undefined ? this.occupation : <any>null;
        data["patientType"] = this.patientType !== undefined ? this.patientType : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["homeFax"] = this.homeFax !== undefined ? this.homeFax : <any>null;
        data["workFax"] = this.workFax !== undefined ? this.workFax : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["pStatus"] = this.pStatus !== undefined ? this.pStatus : <any>null;
        data["dateDeceased"] = this.dateDeceased ? this.dateDeceased.toISOString() : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["snd_name"] = this.snd_name !== undefined ? this.snd_name : <any>null;
        data["cntBookingNoShow"] = this.cntBookingNoShow !== undefined ? this.cntBookingNoShow : <any>null;
        data["cntBookingCancel"] = this.cntBookingCancel !== undefined ? this.cntBookingCancel : <any>null;
        data["cntBookingChange"] = this.cntBookingChange !== undefined ? this.cntBookingChange : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["medicareRefNo"] = this.medicareRefNo !== undefined ? this.medicareRefNo : <any>null;
        data["mediExpYYYY"] = this.mediExpYYYY !== undefined ? this.mediExpYYYY : <any>null;
        data["mediExpMM"] = this.mediExpMM !== undefined ? this.mediExpMM : <any>null;
        data["medicareVerifyDate"] = this.medicareVerifyDate ? this.medicareVerifyDate.toISOString() : <any>null;
        data["vetAffairs"] = this.vetAffairs !== undefined ? this.vetAffairs : <any>null;
        data["healthFundID"] = this.healthFundID !== undefined ? this.healthFundID : <any>null;
        data["fundNumber"] = this.fundNumber !== undefined ? this.fundNumber : <any>null;
        data["fundNumberUPI"] = this.fundNumberUPI !== undefined ? this.fundNumberUPI : <any>null;
        data["fundExpYYYY"] = this.fundExpYYYY !== undefined ? this.fundExpYYYY : <any>null;
        data["fundExpMM"] = this.fundExpMM !== undefined ? this.fundExpMM : <any>null;
        data["fundPlan"] = this.fundPlan !== undefined ? this.fundPlan : <any>null;
        data["feeTable_ID"] = this.feeTable_ID !== undefined ? this.feeTable_ID : <any>null;
        data["attendingMO"] = this.attendingMO !== undefined ? this.attendingMO : <any>null;
        data["primaryHealthProvider"] = this.primaryHealthProvider !== undefined ? this.primaryHealthProvider : <any>null;
        data["lastVisitGP"] = this.lastVisitGP ? this.lastVisitGP.toISOString() : <any>null;
        data["treatmentLocation"] = this.treatmentLocation !== undefined ? this.treatmentLocation : <any>null;
        data["fullReg"] = this.fullReg !== undefined ? this.fullReg : <any>null;
        data["billingType"] = this.billingType !== undefined ? this.billingType : <any>null;
        data["hospitalBillingClass"] = this.hospitalBillingClass !== undefined ? this.hospitalBillingClass : <any>null;
        data["privacyDisclaimer"] = this.privacyDisclaimer !== undefined ? this.privacyDisclaimer : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        data["pensionNumber"] = this.pensionNumber !== undefined ? this.pensionNumber : <any>null;
        data["commenced"] = this.commenced ? this.commenced.toISOString() : <any>null;
        data["ceased"] = this.ceased ? this.ceased.toISOString() : <any>null;
        data["userIdentifier1"] = this.userIdentifier1 !== undefined ? this.userIdentifier1 : <any>null;
        data["userIdentifier2"] = this.userIdentifier2 !== undefined ? this.userIdentifier2 : <any>null;
        data["extPatient_ID"] = this.extPatient_ID !== undefined ? this.extPatient_ID : <any>null;
        data["possibleDuplicate"] = this.possibleDuplicate !== undefined ? this.possibleDuplicate : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["jobtitle"] = this.jobtitle !== undefined ? this.jobtitle : <any>null;
        data["primaryPhone"] = this.primaryPhone !== undefined ? this.primaryPhone : <any>null;
        data["dateFirstBooking"] = this.dateFirstBooking ? this.dateFirstBooking.toISOString() : <any>null;
        data["dateFirstInvoice"] = this.dateFirstInvoice ? this.dateFirstInvoice.toISOString() : <any>null;
        data["alertBilling"] = this.alertBilling !== undefined ? this.alertBilling : <any>null;
        data["alertPatientNote"] = this.alertPatientNote !== undefined ? this.alertPatientNote : <any>null;
        data["alertUser1"] = this.alertUser1 !== undefined ? this.alertUser1 : <any>null;
        data["alertUser2"] = this.alertUser2 !== undefined ? this.alertUser2 : <any>null;
        data["ctimestamp"] = this.ctimestamp !== undefined ? this.ctimestamp : <any>null;
        data["patientInfoForm"] = this.patientInfoForm !== undefined ? this.patientInfoForm : <any>null;
        data["inpatient"] = this.inpatient !== undefined ? this.inpatient : <any>null;
        data["ward"] = this.ward !== undefined ? this.ward : <any>null;
        data["dateLatestBooking"] = this.dateLatestBooking ? this.dateLatestBooking.toISOString() : <any>null;
        data["noStatementDate"] = this.noStatementDate ? this.noStatementDate.toISOString() : <any>null;
        data["noStatementReason"] = this.noStatementReason !== undefined ? this.noStatementReason : <any>null;
        data["accountHoldDate"] = this.accountHoldDate ? this.accountHoldDate.toISOString() : <any>null;
        data["accountHoldReason"] = this.accountHoldReason !== undefined ? this.accountHoldReason : <any>null;
        data["programLatestExpiryDate"] = this.programLatestExpiryDate ? this.programLatestExpiryDate.toISOString() : <any>null;
        data["chartDoNotMove"] = this.chartDoNotMove !== undefined ? this.chartDoNotMove : <any>null;
        data["lastSuccessfulPVM"] = this.lastSuccessfulPVM ? this.lastSuccessfulPVM.toISOString() : <any>null;
        data["lastSuccessfulPVF"] = this.lastSuccessfulPVF ? this.lastSuccessfulPVF.toISOString() : <any>null;
        data["lastSuccessfulOVV"] = this.lastSuccessfulOVV ? this.lastSuccessfulOVV.toISOString() : <any>null;
        data["familyHistoryPresent"] = this.familyHistoryPresent !== undefined ? this.familyHistoryPresent : <any>null;
        data["allergiesPresent"] = this.allergiesPresent !== undefined ? this.allergiesPresent : <any>null;
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["mrN_Feed"] = this.mrN_Feed !== undefined ? this.mrN_Feed : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        data["allowAutomatedSMS"] = this.allowAutomatedSMS !== undefined ? this.allowAutomatedSMS : <any>null;
        data["surnameSoundex"] = this.surnameSoundex !== undefined ? this.surnameSoundex : <any>null;
        data["preferredPhone"] = this.preferredPhone !== undefined ? this.preferredPhone : <any>null;
        data["devicesNotRecorded"] = this.devicesNotRecorded !== undefined ? this.devicesNotRecorded : <any>null;
        data["clinicalNote"] = this.clinicalNote !== undefined ? this.clinicalNote : <any>null;
        data["dvaCardType"] = this.dvaCardType !== undefined ? this.dvaCardType : <any>null;
        data["hasCustomFieldAlerts"] = this.hasCustomFieldAlerts !== undefined ? this.hasCustomFieldAlerts : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddPatientApiRequestParams extends IBaseRequestParams {
    patient_ID: number;
    company_ID?: number | null;
    firstName?: string | null;
    surname?: string | null;
    knownAs?: string | null;
    initials?: string | null;
    title?: string | null;
    sex?: string | null;
    dob?: Date | null;
    ethnicity?: string | null;
    family_ID?: number | null;
    inFamily?: boolean | null;
    hasAlias?: boolean | null;
    mrn?: string | null;
    occupation?: string | null;
    patientType?: number | null;
    homePhone?: string | null;
    workPhone?: string | null;
    mobile?: string | null;
    homeFax?: string | null;
    workFax?: string | null;
    email?: string | null;
    pStatus?: string | null;
    dateDeceased?: Date | null;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    note_ID?: number | null;
    snd_name?: string | null;
    cntBookingNoShow?: number | null;
    cntBookingCancel?: number | null;
    cntBookingChange?: number | null;
    medicare?: string | null;
    medicareRefNo?: string | null;
    mediExpYYYY?: number | null;
    mediExpMM?: number | null;
    medicareVerifyDate?: Date | null;
    vetAffairs?: string | null;
    healthFundID?: number | null;
    fundNumber?: string | null;
    fundNumberUPI?: string | null;
    fundExpYYYY?: number | null;
    fundExpMM?: number | null;
    fundPlan?: number | null;
    feeTable_ID?: number | null;
    attendingMO?: number | null;
    primaryHealthProvider?: number | null;
    lastVisitGP?: Date | null;
    treatmentLocation?: number | null;
    fullReg?: boolean | null;
    billingType?: number | null;
    hospitalBillingClass?: string | null;
    privacyDisclaimer?: boolean | null;
    archive?: boolean | null;
    pensionNumber?: string | null;
    commenced?: Date | null;
    ceased?: Date | null;
    userIdentifier1?: string | null;
    userIdentifier2?: string | null;
    extPatient_ID?: string | null;
    possibleDuplicate?: boolean | null;
    deleted?: boolean | null;
    deletionReason?: number | null;
    deletionNote?: number | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    jobtitle?: string | null;
    primaryPhone?: number | null;
    dateFirstBooking?: Date | null;
    dateFirstInvoice?: Date | null;
    alertBilling?: boolean | null;
    alertPatientNote?: boolean | null;
    alertUser1?: number | null;
    alertUser2?: number | null;
    ctimestamp?: string | null;
    patientInfoForm?: boolean | null;
    inpatient?: boolean | null;
    ward?: string | null;
    dateLatestBooking?: Date | null;
    noStatementDate?: Date | null;
    noStatementReason?: string | null;
    accountHoldDate?: Date | null;
    accountHoldReason?: string | null;
    programLatestExpiryDate?: Date | null;
    chartDoNotMove?: boolean | null;
    lastSuccessfulPVM?: Date | null;
    lastSuccessfulPVF?: Date | null;
    lastSuccessfulOVV?: Date | null;
    familyHistoryPresent?: boolean | null;
    allergiesPresent?: boolean | null;
    transport?: number | null;
    mrN_Feed?: number | null;
    birthOrder: number;
    allowAutomatedSMS?: boolean | null;
    surnameSoundex?: string | null;
    preferredPhone?: string | null;
    devicesNotRecorded?: number | null;
    clinicalNote?: number | null;
    dvaCardType?: number | null;
    hasCustomFieldAlerts?: boolean | null;
}

export class AddPatientAliasRequestParams extends BaseRequestParams implements IAddPatientAliasRequestParams {
    alias_ID!: number;
    patient_ID!: number;
    surname?: string | null;
    firstName?: string | null;
    alias_Comment?: string | null;
    alias_Type?: string | null;
    readOnly!: boolean;

    constructor(data?: IAddPatientAliasRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.alias_ID = data["alias_ID"] !== undefined ? data["alias_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.alias_Comment = data["alias_Comment"] !== undefined ? data["alias_Comment"] : <any>null;
            this.alias_Type = data["alias_Type"] !== undefined ? data["alias_Type"] : <any>null;
            this.readOnly = data["readOnly"] !== undefined ? data["readOnly"] : <any>null;
        }
    }

    static fromJS(data: any): AddPatientAliasRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddPatientAliasRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alias_ID"] = this.alias_ID !== undefined ? this.alias_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["alias_Comment"] = this.alias_Comment !== undefined ? this.alias_Comment : <any>null;
        data["alias_Type"] = this.alias_Type !== undefined ? this.alias_Type : <any>null;
        data["readOnly"] = this.readOnly !== undefined ? this.readOnly : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddPatientAliasRequestParams extends IBaseRequestParams {
    alias_ID: number;
    patient_ID: number;
    surname?: string | null;
    firstName?: string | null;
    alias_Comment?: string | null;
    alias_Type?: string | null;
    readOnly: boolean;
}

export class GetDoctorRegisterNumberFromProviderNumberApiRequestParams extends BaseRequestParams implements IGetDoctorRegisterNumberFromProviderNumberApiRequestParams {
    providerNumber?: string | null;

    constructor(data?: IGetDoctorRegisterNumberFromProviderNumberApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.providerNumber = data["providerNumber"] !== undefined ? data["providerNumber"] : <any>null;
        }
    }

    static fromJS(data: any): GetDoctorRegisterNumberFromProviderNumberApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetDoctorRegisterNumberFromProviderNumberApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["providerNumber"] = this.providerNumber !== undefined ? this.providerNumber : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetDoctorRegisterNumberFromProviderNumberApiRequestParams extends IBaseRequestParams {
    providerNumber?: string | null;
}

export class GetListItemParams extends CorrelatableRequestParams implements IGetListItemParams {
    listGroup?: string | null;
    listName?: string | null;
    valueToFind?: string | null;
    valueLocation!: ValueLocation;
    listToQuery?: ListToQuery | null;
    createIfMissing!: boolean;
    itemDisplayTextToSave?: string | null;
    feedID?: string | null;

    constructor(data?: IGetListItemParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.listGroup = data["listGroup"] !== undefined ? data["listGroup"] : <any>null;
            this.listName = data["listName"] !== undefined ? data["listName"] : <any>null;
            this.valueToFind = data["valueToFind"] !== undefined ? data["valueToFind"] : <any>null;
            this.valueLocation = data["valueLocation"] !== undefined ? data["valueLocation"] : <any>null;
            this.listToQuery = data["listToQuery"] !== undefined ? data["listToQuery"] : <any>null;
            this.createIfMissing = data["createIfMissing"] !== undefined ? data["createIfMissing"] : <any>null;
            this.itemDisplayTextToSave = data["itemDisplayTextToSave"] !== undefined ? data["itemDisplayTextToSave"] : <any>null;
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
        }
    }

    static fromJS(data: any): GetListItemParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetListItemParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listGroup"] = this.listGroup !== undefined ? this.listGroup : <any>null;
        data["listName"] = this.listName !== undefined ? this.listName : <any>null;
        data["valueToFind"] = this.valueToFind !== undefined ? this.valueToFind : <any>null;
        data["valueLocation"] = this.valueLocation !== undefined ? this.valueLocation : <any>null;
        data["listToQuery"] = this.listToQuery !== undefined ? this.listToQuery : <any>null;
        data["createIfMissing"] = this.createIfMissing !== undefined ? this.createIfMissing : <any>null;
        data["itemDisplayTextToSave"] = this.itemDisplayTextToSave !== undefined ? this.itemDisplayTextToSave : <any>null;
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetListItemParams extends ICorrelatableRequestParams {
    listGroup?: string | null;
    listName?: string | null;
    valueToFind?: string | null;
    valueLocation: ValueLocation;
    listToQuery?: ListToQuery | null;
    createIfMissing: boolean;
    itemDisplayTextToSave?: string | null;
    feedID?: string | null;
}

export class GetListItem extends GetListItemParams implements IGetListItem {

    constructor(data?: IGetListItem) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetListItem extends IGetListItemParams {
}

export enum ValueLocation {
    Value = 0, 
    AdditionalNotesOrDescription = 1, 
    Comment = 2, 
    ItemID = 3, 
}

export class APIResponseOfGetListItemResult extends ProvideErrorMessage implements IAPIResponseOfGetListItemResult {
    data?: GetListItemResult | null;

    constructor(data?: IAPIResponseOfGetListItemResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetListItemResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetListItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetListItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetListItemResult extends IProvideErrorMessage {
    data?: IGetListItemResult | null;
}

export class GetListItemResult extends ProvideErrorMessage implements IGetListItemResult {
    list_ID!: number;
    listGroup?: string | null;
    listName?: string | null;
    itemID!: number;
    itemValue?: string | null;
    deleted!: boolean;
    displayOrder!: number;
    additionalNotesOrDescription?: string | null;
    comment?: string | null;

    constructor(data?: IGetListItemResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.list_ID = data["list_ID"] !== undefined ? data["list_ID"] : <any>null;
            this.listGroup = data["listGroup"] !== undefined ? data["listGroup"] : <any>null;
            this.listName = data["listName"] !== undefined ? data["listName"] : <any>null;
            this.itemID = data["itemID"] !== undefined ? data["itemID"] : <any>null;
            this.itemValue = data["itemValue"] !== undefined ? data["itemValue"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.displayOrder = data["displayOrder"] !== undefined ? data["displayOrder"] : <any>null;
            this.additionalNotesOrDescription = data["additionalNotesOrDescription"] !== undefined ? data["additionalNotesOrDescription"] : <any>null;
            this.comment = data["comment"] !== undefined ? data["comment"] : <any>null;
        }
    }

    static fromJS(data: any): GetListItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetListItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["list_ID"] = this.list_ID !== undefined ? this.list_ID : <any>null;
        data["listGroup"] = this.listGroup !== undefined ? this.listGroup : <any>null;
        data["listName"] = this.listName !== undefined ? this.listName : <any>null;
        data["itemID"] = this.itemID !== undefined ? this.itemID : <any>null;
        data["itemValue"] = this.itemValue !== undefined ? this.itemValue : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["displayOrder"] = this.displayOrder !== undefined ? this.displayOrder : <any>null;
        data["additionalNotesOrDescription"] = this.additionalNotesOrDescription !== undefined ? this.additionalNotesOrDescription : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetListItemResult extends IProvideErrorMessage {
    list_ID: number;
    listGroup?: string | null;
    listName?: string | null;
    itemID: number;
    itemValue?: string | null;
    deleted: boolean;
    displayOrder: number;
    additionalNotesOrDescription?: string | null;
    comment?: string | null;
}

export class GetPatientNoteParams extends CorrelatableRequestParams implements IGetPatientNoteParams {
    patientId?: string | null;

    constructor(data?: IGetPatientNoteParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
        }
    }

    static fromJS(data: any): GetPatientNoteParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetPatientNoteParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPatientNoteParams extends ICorrelatableRequestParams {
    patientId?: string | null;
}

export class GetPatientNote extends GetPatientNoteParams implements IGetPatientNote {

    constructor(data?: IGetPatientNote) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetPatientNote {
        data = typeof data === 'object' ? data : {};
        let result = new GetPatientNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPatientNote extends IGetPatientNoteParams {
}

export class APIResponseOfGetPatientNoteResult extends ProvideErrorMessage implements IAPIResponseOfGetPatientNoteResult {
    data?: GetPatientNoteResult | null;

    constructor(data?: IAPIResponseOfGetPatientNoteResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetPatientNoteResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetPatientNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetPatientNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetPatientNoteResult extends IProvideErrorMessage {
    data?: IGetPatientNoteResult | null;
}

export class GetPatientNoteResult extends ProvideErrorMessage implements IGetPatientNoteResult {
    note_Id!: number;
    noteText?: string | null;
    noteAttribute?: string | null;
    archive!: boolean;
    userCreated?: string | null;
    dateCreated!: Date;
    userLastModified?: string | null;
    dateLastModified!: Date;

    constructor(data?: IGetPatientNoteResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.note_Id = data["note_Id"] !== undefined ? data["note_Id"] : <any>null;
            this.noteText = data["noteText"] !== undefined ? data["noteText"] : <any>null;
            this.noteAttribute = data["noteAttribute"] !== undefined ? data["noteAttribute"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetPatientNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetPatientNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note_Id"] = this.note_Id !== undefined ? this.note_Id : <any>null;
        data["noteText"] = this.noteText !== undefined ? this.noteText : <any>null;
        data["noteAttribute"] = this.noteAttribute !== undefined ? this.noteAttribute : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPatientNoteResult extends IProvideErrorMessage {
    note_Id: number;
    noteText?: string | null;
    noteAttribute?: string | null;
    archive: boolean;
    userCreated?: string | null;
    dateCreated: Date;
    userLastModified?: string | null;
    dateLastModified: Date;
}

export class GetHL7ItemMappingApiRequestParams extends BaseRequestParams implements IGetHL7ItemMappingApiRequestParams {
    feedID!: number;
    itemValue?: string | null;
    itemID!: number;
    returnMode?: HL7ItemReturnMode | null;

    constructor(data?: IGetHL7ItemMappingApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
            this.itemValue = data["itemValue"] !== undefined ? data["itemValue"] : <any>null;
            this.itemID = data["itemID"] !== undefined ? data["itemID"] : <any>null;
            this.returnMode = data["returnMode"] !== undefined ? data["returnMode"] : <any>null;
        }
    }

    static fromJS(data: any): GetHL7ItemMappingApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetHL7ItemMappingApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        data["itemValue"] = this.itemValue !== undefined ? this.itemValue : <any>null;
        data["itemID"] = this.itemID !== undefined ? this.itemID : <any>null;
        data["returnMode"] = this.returnMode !== undefined ? this.returnMode : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetHL7ItemMappingApiRequestParams extends IBaseRequestParams {
    feedID: number;
    itemValue?: string | null;
    itemID: number;
    returnMode?: HL7ItemReturnMode | null;
}

export enum HL7ItemReturnMode {
    Number_ID = 0, 
    Text_ID = 1, 
}

export class AddPatientMergeRequestParams extends BaseRequestParams implements IAddPatientMergeRequestParams {
    sourceRequested?: string | null;
    sourceMessageID?: string | null;
    fromPatientID!: number;
    toPatientID!: number;

    constructor(data?: IAddPatientMergeRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.sourceRequested = data["sourceRequested"] !== undefined ? data["sourceRequested"] : <any>null;
            this.sourceMessageID = data["sourceMessageID"] !== undefined ? data["sourceMessageID"] : <any>null;
            this.fromPatientID = data["fromPatientID"] !== undefined ? data["fromPatientID"] : <any>null;
            this.toPatientID = data["toPatientID"] !== undefined ? data["toPatientID"] : <any>null;
        }
    }

    static fromJS(data: any): AddPatientMergeRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddPatientMergeRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceRequested"] = this.sourceRequested !== undefined ? this.sourceRequested : <any>null;
        data["sourceMessageID"] = this.sourceMessageID !== undefined ? this.sourceMessageID : <any>null;
        data["fromPatientID"] = this.fromPatientID !== undefined ? this.fromPatientID : <any>null;
        data["toPatientID"] = this.toPatientID !== undefined ? this.toPatientID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddPatientMergeRequestParams extends IBaseRequestParams {
    sourceRequested?: string | null;
    sourceMessageID?: string | null;
    fromPatientID: number;
    toPatientID: number;
}

export class AddPatientMergeRequest extends AddPatientMergeRequestParams implements IAddPatientMergeRequest {

    constructor(data?: IAddPatientMergeRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddPatientMergeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddPatientMergeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddPatientMergeRequest extends IAddPatientMergeRequestParams {
}

export class UnMergeHealthTrackPatientRequestParams extends BaseRequestParams implements IUnMergeHealthTrackPatientRequestParams {
    unlinkRemotePatient_ID?: string | null;
    unlinkFeed_ID!: number;
    activePatientID!: number;

    constructor(data?: IUnMergeHealthTrackPatientRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.unlinkRemotePatient_ID = data["unlinkRemotePatient_ID"] !== undefined ? data["unlinkRemotePatient_ID"] : <any>null;
            this.unlinkFeed_ID = data["unlinkFeed_ID"] !== undefined ? data["unlinkFeed_ID"] : <any>null;
            this.activePatientID = data["activePatientID"] !== undefined ? data["activePatientID"] : <any>null;
        }
    }

    static fromJS(data: any): UnMergeHealthTrackPatientRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new UnMergeHealthTrackPatientRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unlinkRemotePatient_ID"] = this.unlinkRemotePatient_ID !== undefined ? this.unlinkRemotePatient_ID : <any>null;
        data["unlinkFeed_ID"] = this.unlinkFeed_ID !== undefined ? this.unlinkFeed_ID : <any>null;
        data["activePatientID"] = this.activePatientID !== undefined ? this.activePatientID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUnMergeHealthTrackPatientRequestParams extends IBaseRequestParams {
    unlinkRemotePatient_ID?: string | null;
    unlinkFeed_ID: number;
    activePatientID: number;
}

export class NextOfKinApiRequestParams extends BaseRequestParams implements INextOfKinApiRequestParams {
    patient_ID!: number;
    nokIndex!: number;
    title?: string | null;
    firstName?: string | null;
    surname?: string | null;
    relationship?: string | null;
    homePhone?: string | null;
    mobile?: string | null;
    workPhone?: string | null;
    email?: string | null;
    archive?: boolean | null;

    constructor(data?: INextOfKinApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.nokIndex = data["nokIndex"] !== undefined ? data["nokIndex"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.relationship = data["relationship"] !== undefined ? data["relationship"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.mobile = data["mobile"] !== undefined ? data["mobile"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.archive = data["archive"] !== undefined ? data["archive"] : <any>null;
        }
    }

    static fromJS(data: any): NextOfKinApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new NextOfKinApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["nokIndex"] = this.nokIndex !== undefined ? this.nokIndex : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["relationship"] = this.relationship !== undefined ? this.relationship : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["mobile"] = this.mobile !== undefined ? this.mobile : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["archive"] = this.archive !== undefined ? this.archive : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface INextOfKinApiRequestParams extends IBaseRequestParams {
    patient_ID: number;
    nokIndex: number;
    title?: string | null;
    firstName?: string | null;
    surname?: string | null;
    relationship?: string | null;
    homePhone?: string | null;
    mobile?: string | null;
    workPhone?: string | null;
    email?: string | null;
    archive?: boolean | null;
}

export class AddOrUpdatePatientMappingParams extends BaseRequestParams implements IAddOrUpdatePatientMappingParams {
    feed_ID!: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner!: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder!: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched!: boolean;
    userMatched!: boolean;
    username?: string | null;
    userCannotMatch!: boolean;
    possibleDuplicate?: boolean | null;
    merged!: boolean;
    inErrorCode!: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted!: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;

    constructor(data?: IAddOrUpdatePatientMappingParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.remotePatient_ID = data["remotePatient_ID"] !== undefined ? data["remotePatient_ID"] : <any>null;
            this.patientIdentifierList = data["patientIdentifierList"] !== undefined ? data["patientIdentifierList"] : <any>null;
            this.localPatient_ID = data["localPatient_ID"] !== undefined ? data["localPatient_ID"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.assigningAuthority = data["assigningAuthority"] !== undefined ? data["assigningAuthority"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.middleName = data["middleName"] !== undefined ? data["middleName"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
            this.addrStreet = data["addrStreet"] !== undefined ? data["addrStreet"] : <any>null;
            this.addrCity = data["addrCity"] !== undefined ? data["addrCity"] : <any>null;
            this.addrState = data["addrState"] !== undefined ? data["addrState"] : <any>null;
            this.addrPostCode = data["addrPostCode"] !== undefined ? data["addrPostCode"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.messageCode = data["messageCode"] !== undefined ? data["messageCode"] : <any>null;
            this.triggerEvent = data["triggerEvent"] !== undefined ? data["triggerEvent"] : <any>null;
            this.systemMatched = data["systemMatched"] !== undefined ? data["systemMatched"] : <any>null;
            this.userMatched = data["userMatched"] !== undefined ? data["userMatched"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.userCannotMatch = data["userCannotMatch"] !== undefined ? data["userCannotMatch"] : <any>null;
            this.possibleDuplicate = data["possibleDuplicate"] !== undefined ? data["possibleDuplicate"] : <any>null;
            this.merged = data["merged"] !== undefined ? data["merged"] : <any>null;
            this.inErrorCode = data["inErrorCode"] !== undefined ? data["inErrorCode"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateModified = data["dateModified"] ? new Date(data["dateModified"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletedUser = data["deletedUser"] !== undefined ? data["deletedUser"] : <any>null;
            this.deletedDate = data["deletedDate"] ? new Date(data["deletedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdatePatientMappingParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdatePatientMappingParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["remotePatient_ID"] = this.remotePatient_ID !== undefined ? this.remotePatient_ID : <any>null;
        data["patientIdentifierList"] = this.patientIdentifierList !== undefined ? this.patientIdentifierList : <any>null;
        data["localPatient_ID"] = this.localPatient_ID !== undefined ? this.localPatient_ID : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["assigningAuthority"] = this.assigningAuthority !== undefined ? this.assigningAuthority : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        data["addrStreet"] = this.addrStreet !== undefined ? this.addrStreet : <any>null;
        data["addrCity"] = this.addrCity !== undefined ? this.addrCity : <any>null;
        data["addrState"] = this.addrState !== undefined ? this.addrState : <any>null;
        data["addrPostCode"] = this.addrPostCode !== undefined ? this.addrPostCode : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["messageCode"] = this.messageCode !== undefined ? this.messageCode : <any>null;
        data["triggerEvent"] = this.triggerEvent !== undefined ? this.triggerEvent : <any>null;
        data["systemMatched"] = this.systemMatched !== undefined ? this.systemMatched : <any>null;
        data["userMatched"] = this.userMatched !== undefined ? this.userMatched : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["userCannotMatch"] = this.userCannotMatch !== undefined ? this.userCannotMatch : <any>null;
        data["possibleDuplicate"] = this.possibleDuplicate !== undefined ? this.possibleDuplicate : <any>null;
        data["merged"] = this.merged !== undefined ? this.merged : <any>null;
        data["inErrorCode"] = this.inErrorCode !== undefined ? this.inErrorCode : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletedUser"] = this.deletedUser !== undefined ? this.deletedUser : <any>null;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdatePatientMappingParams extends IBaseRequestParams {
    feed_ID: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched: boolean;
    userMatched: boolean;
    username?: string | null;
    userCannotMatch: boolean;
    possibleDuplicate?: boolean | null;
    merged: boolean;
    inErrorCode: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;
}

export class AddOrUpdatePatientMapping extends AddOrUpdatePatientMappingParams implements IAddOrUpdatePatientMapping {

    constructor(data?: IAddOrUpdatePatientMapping) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdatePatientMapping {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdatePatientMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdatePatientMapping extends IAddOrUpdatePatientMappingParams {
}

export class MoveMRNOntoPatientParams extends BaseRequestParams implements IMoveMRNOntoPatientParams {
    assigningAuthorityNamespaceIdValue?: string | null;
    identifierTypeCodeValue?: string | null;
    assigningFacilityNamespaceIDValue?: string | null;
    patientIdentifier?: string | null;
    targetPatient_ID!: number;
    feed_ID!: number;
    surname?: string | null;
    firstName?: string | null;
    dateOfBirth?: Date | null;
    medicare?: string | null;
    gender?: string | null;
    birthOrder!: number;

    constructor(data?: IMoveMRNOntoPatientParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.assigningAuthorityNamespaceIdValue = data["assigningAuthorityNamespaceIdValue"] !== undefined ? data["assigningAuthorityNamespaceIdValue"] : <any>null;
            this.identifierTypeCodeValue = data["identifierTypeCodeValue"] !== undefined ? data["identifierTypeCodeValue"] : <any>null;
            this.assigningFacilityNamespaceIDValue = data["assigningFacilityNamespaceIDValue"] !== undefined ? data["assigningFacilityNamespaceIDValue"] : <any>null;
            this.patientIdentifier = data["patientIdentifier"] !== undefined ? data["patientIdentifier"] : <any>null;
            this.targetPatient_ID = data["targetPatient_ID"] !== undefined ? data["targetPatient_ID"] : <any>null;
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
        }
    }

    static fromJS(data: any): MoveMRNOntoPatientParams {
        data = typeof data === 'object' ? data : {};
        let result = new MoveMRNOntoPatientParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assigningAuthorityNamespaceIdValue"] = this.assigningAuthorityNamespaceIdValue !== undefined ? this.assigningAuthorityNamespaceIdValue : <any>null;
        data["identifierTypeCodeValue"] = this.identifierTypeCodeValue !== undefined ? this.identifierTypeCodeValue : <any>null;
        data["assigningFacilityNamespaceIDValue"] = this.assigningFacilityNamespaceIDValue !== undefined ? this.assigningFacilityNamespaceIDValue : <any>null;
        data["patientIdentifier"] = this.patientIdentifier !== undefined ? this.patientIdentifier : <any>null;
        data["targetPatient_ID"] = this.targetPatient_ID !== undefined ? this.targetPatient_ID : <any>null;
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IMoveMRNOntoPatientParams extends IBaseRequestParams {
    assigningAuthorityNamespaceIdValue?: string | null;
    identifierTypeCodeValue?: string | null;
    assigningFacilityNamespaceIDValue?: string | null;
    patientIdentifier?: string | null;
    targetPatient_ID: number;
    feed_ID: number;
    surname?: string | null;
    firstName?: string | null;
    dateOfBirth?: Date | null;
    medicare?: string | null;
    gender?: string | null;
    birthOrder: number;
}

export class MoveMRNOntoPatient extends MoveMRNOntoPatientParams implements IMoveMRNOntoPatient {

    constructor(data?: IMoveMRNOntoPatient) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): MoveMRNOntoPatient {
        data = typeof data === 'object' ? data : {};
        let result = new MoveMRNOntoPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMoveMRNOntoPatient extends IMoveMRNOntoPatientParams {
}

export class GetPatientAddressesRequestParams extends BaseRequestParams implements IGetPatientAddressesRequestParams {
    familyID!: number;

    constructor(data?: IGetPatientAddressesRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.familyID = data["familyID"] !== undefined ? data["familyID"] : <any>null;
        }
    }

    static fromJS(data: any): GetPatientAddressesRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetPatientAddressesRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyID"] = this.familyID !== undefined ? this.familyID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPatientAddressesRequestParams extends IBaseRequestParams {
    familyID: number;
}

export class APIResponseOfAddressResponseOf extends ProvideErrorMessage implements IAPIResponseOfAddressResponseOf {
    data?: AddressResponse[] | null;

    constructor(data?: IAPIResponseOfAddressResponseOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(AddressResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfAddressResponseOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddressResponseOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddressResponseOf extends IProvideErrorMessage {
    data?: IAddressResponse[] | null;
}

export class AddressResponse extends BaseRequestParams implements IAddressResponse {
    owner_ID!: number;
    addressType!: number;
    primaryAddress?: boolean | null;
    invoiceAddress?: boolean | null;
    mailingAddress?: boolean | null;
    address1?: string | null;
    address2?: string | null;
    suburb?: string | null;
    postcode?: string | null;
    country?: string | null;
    state?: string | null;
    department?: string | null;
    description?: string | null;

    constructor(data?: IAddressResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.owner_ID = data["owner_ID"] !== undefined ? data["owner_ID"] : <any>null;
            this.addressType = data["addressType"] !== undefined ? data["addressType"] : <any>null;
            this.primaryAddress = data["primaryAddress"] !== undefined ? data["primaryAddress"] : <any>null;
            this.invoiceAddress = data["invoiceAddress"] !== undefined ? data["invoiceAddress"] : <any>null;
            this.mailingAddress = data["mailingAddress"] !== undefined ? data["mailingAddress"] : <any>null;
            this.address1 = data["address1"] !== undefined ? data["address1"] : <any>null;
            this.address2 = data["address2"] !== undefined ? data["address2"] : <any>null;
            this.suburb = data["suburb"] !== undefined ? data["suburb"] : <any>null;
            this.postcode = data["postcode"] !== undefined ? data["postcode"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.department = data["department"] !== undefined ? data["department"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): AddressResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddressResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["owner_ID"] = this.owner_ID !== undefined ? this.owner_ID : <any>null;
        data["addressType"] = this.addressType !== undefined ? this.addressType : <any>null;
        data["primaryAddress"] = this.primaryAddress !== undefined ? this.primaryAddress : <any>null;
        data["invoiceAddress"] = this.invoiceAddress !== undefined ? this.invoiceAddress : <any>null;
        data["mailingAddress"] = this.mailingAddress !== undefined ? this.mailingAddress : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["suburb"] = this.suburb !== undefined ? this.suburb : <any>null;
        data["postcode"] = this.postcode !== undefined ? this.postcode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["department"] = this.department !== undefined ? this.department : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddressResponse extends IBaseRequestParams {
    owner_ID: number;
    addressType: number;
    primaryAddress?: boolean | null;
    invoiceAddress?: boolean | null;
    mailingAddress?: boolean | null;
    address1?: string | null;
    address2?: string | null;
    suburb?: string | null;
    postcode?: string | null;
    country?: string | null;
    state?: string | null;
    department?: string | null;
    description?: string | null;
}

export class GetExternalFeedRequestParams extends BaseRequestParams implements IGetExternalFeedRequestParams {
    feedID!: number;

    constructor(data?: IGetExternalFeedRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
        }
    }

    static fromJS(data: any): GetExternalFeedRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetExternalFeedRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetExternalFeedRequestParams extends IBaseRequestParams {
    feedID: number;
}

export class APIResponseOfExternal_Feed_ConfigResponse extends ProvideErrorMessage implements IAPIResponseOfExternal_Feed_ConfigResponse {
    data?: External_Feed_ConfigResponse | null;

    constructor(data?: IAPIResponseOfExternal_Feed_ConfigResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? External_Feed_ConfigResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfExternal_Feed_ConfigResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfExternal_Feed_ConfigResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfExternal_Feed_ConfigResponse extends IProvideErrorMessage {
    data?: IExternal_Feed_ConfigResponse | null;
}

export class External_Feed_ConfigResponse implements IExternal_Feed_ConfigResponse {
    feed_ID!: number;
    service_Category?: number | null;
    service_Name?: string | null;
    service_ID!: number;
    feed_Type!: number;
    feed_InDirectory?: string | null;
    feed_OutDirectory?: string | null;
    feed_OutHostname?: string | null;
    feed_OutPort?: number | null;
    location_ID?: number | null;
    doctor_ID?: number | null;
    embedded_Files!: boolean;
    feed_Provider?: number | null;
    feed_Enabled!: boolean;
    requestForm_Enabled!: boolean;
    feed_BackupDirectory?: string | null;
    modifiedDate?: Date | null;
    modifiedUser?: string | null;
    requestForm?: string | null;
    lastActivityDateTime?: Date | null;
    lastWarningDateTime?: Date | null;
    warnOperatorIfNoActivity!: boolean;
    warnThresholdHours?: number | null;
    warnHoursBetweenWarnings?: number | null;
    warnStartHour?: number | null;
    warnStopHour?: number | null;
    warnEmailAddresses?: string | null;
    synopsisPrefix?: string | null;
    d_type?: number | null;
    onPatientFind?: string | null;
    onPatientFindQuery?: string | null;
    onClinicalRecord?: string | null;
    sqlConnectionString?: string | null;
    feed_ReprocessDirectory?: string | null;
    mappingFeed_ID?: number | null;
    userDefined!: boolean;
    logging_Enabled!: boolean;
    keepMessagesDays?: number | null;
    previewLOINCS?: string | null;
    mrnPatientMatch!: boolean;
    generateFillerCode!: boolean;
    ignoreSystemMatch!: boolean;
    disable_ClinicalRecordMove!: boolean;
    supportsHMSOrder!: boolean;
    assigningAuthority?: string | null;
    outboundAssigningAuthority?: string | null;
    groupFeed_ID?: number | null;
    hT_MRN!: boolean;
    fileLayout?: string | null;
    demographicsMRN!: boolean;
    supportsMultipleTestTypes!: boolean;
    canBeVerified!: boolean;

    constructor(data?: IExternal_Feed_ConfigResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.service_Category = data["service_Category"] !== undefined ? data["service_Category"] : <any>null;
            this.service_Name = data["service_Name"] !== undefined ? data["service_Name"] : <any>null;
            this.service_ID = data["service_ID"] !== undefined ? data["service_ID"] : <any>null;
            this.feed_Type = data["feed_Type"] !== undefined ? data["feed_Type"] : <any>null;
            this.feed_InDirectory = data["feed_InDirectory"] !== undefined ? data["feed_InDirectory"] : <any>null;
            this.feed_OutDirectory = data["feed_OutDirectory"] !== undefined ? data["feed_OutDirectory"] : <any>null;
            this.feed_OutHostname = data["feed_OutHostname"] !== undefined ? data["feed_OutHostname"] : <any>null;
            this.feed_OutPort = data["feed_OutPort"] !== undefined ? data["feed_OutPort"] : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
            this.doctor_ID = data["doctor_ID"] !== undefined ? data["doctor_ID"] : <any>null;
            this.embedded_Files = data["embedded_Files"] !== undefined ? data["embedded_Files"] : <any>null;
            this.feed_Provider = data["feed_Provider"] !== undefined ? data["feed_Provider"] : <any>null;
            this.feed_Enabled = data["feed_Enabled"] !== undefined ? data["feed_Enabled"] : <any>null;
            this.requestForm_Enabled = data["requestForm_Enabled"] !== undefined ? data["requestForm_Enabled"] : <any>null;
            this.feed_BackupDirectory = data["feed_BackupDirectory"] !== undefined ? data["feed_BackupDirectory"] : <any>null;
            this.modifiedDate = data["modifiedDate"] ? new Date(data["modifiedDate"].toString()) : <any>null;
            this.modifiedUser = data["modifiedUser"] !== undefined ? data["modifiedUser"] : <any>null;
            this.requestForm = data["requestForm"] !== undefined ? data["requestForm"] : <any>null;
            this.lastActivityDateTime = data["lastActivityDateTime"] ? new Date(data["lastActivityDateTime"].toString()) : <any>null;
            this.lastWarningDateTime = data["lastWarningDateTime"] ? new Date(data["lastWarningDateTime"].toString()) : <any>null;
            this.warnOperatorIfNoActivity = data["warnOperatorIfNoActivity"] !== undefined ? data["warnOperatorIfNoActivity"] : <any>null;
            this.warnThresholdHours = data["warnThresholdHours"] !== undefined ? data["warnThresholdHours"] : <any>null;
            this.warnHoursBetweenWarnings = data["warnHoursBetweenWarnings"] !== undefined ? data["warnHoursBetweenWarnings"] : <any>null;
            this.warnStartHour = data["warnStartHour"] !== undefined ? data["warnStartHour"] : <any>null;
            this.warnStopHour = data["warnStopHour"] !== undefined ? data["warnStopHour"] : <any>null;
            this.warnEmailAddresses = data["warnEmailAddresses"] !== undefined ? data["warnEmailAddresses"] : <any>null;
            this.synopsisPrefix = data["synopsisPrefix"] !== undefined ? data["synopsisPrefix"] : <any>null;
            this.d_type = data["d_type"] !== undefined ? data["d_type"] : <any>null;
            this.onPatientFind = data["onPatientFind"] !== undefined ? data["onPatientFind"] : <any>null;
            this.onPatientFindQuery = data["onPatientFindQuery"] !== undefined ? data["onPatientFindQuery"] : <any>null;
            this.onClinicalRecord = data["onClinicalRecord"] !== undefined ? data["onClinicalRecord"] : <any>null;
            this.sqlConnectionString = data["sqlConnectionString"] !== undefined ? data["sqlConnectionString"] : <any>null;
            this.feed_ReprocessDirectory = data["feed_ReprocessDirectory"] !== undefined ? data["feed_ReprocessDirectory"] : <any>null;
            this.mappingFeed_ID = data["mappingFeed_ID"] !== undefined ? data["mappingFeed_ID"] : <any>null;
            this.userDefined = data["userDefined"] !== undefined ? data["userDefined"] : <any>null;
            this.logging_Enabled = data["logging_Enabled"] !== undefined ? data["logging_Enabled"] : <any>null;
            this.keepMessagesDays = data["keepMessagesDays"] !== undefined ? data["keepMessagesDays"] : <any>null;
            this.previewLOINCS = data["previewLOINCS"] !== undefined ? data["previewLOINCS"] : <any>null;
            this.mrnPatientMatch = data["mrnPatientMatch"] !== undefined ? data["mrnPatientMatch"] : <any>null;
            this.generateFillerCode = data["generateFillerCode"] !== undefined ? data["generateFillerCode"] : <any>null;
            this.ignoreSystemMatch = data["ignoreSystemMatch"] !== undefined ? data["ignoreSystemMatch"] : <any>null;
            this.disable_ClinicalRecordMove = data["disable_ClinicalRecordMove"] !== undefined ? data["disable_ClinicalRecordMove"] : <any>null;
            this.supportsHMSOrder = data["supportsHMSOrder"] !== undefined ? data["supportsHMSOrder"] : <any>null;
            this.assigningAuthority = data["assigningAuthority"] !== undefined ? data["assigningAuthority"] : <any>null;
            this.outboundAssigningAuthority = data["outboundAssigningAuthority"] !== undefined ? data["outboundAssigningAuthority"] : <any>null;
            this.groupFeed_ID = data["groupFeed_ID"] !== undefined ? data["groupFeed_ID"] : <any>null;
            this.hT_MRN = data["hT_MRN"] !== undefined ? data["hT_MRN"] : <any>null;
            this.fileLayout = data["fileLayout"] !== undefined ? data["fileLayout"] : <any>null;
            this.demographicsMRN = data["demographicsMRN"] !== undefined ? data["demographicsMRN"] : <any>null;
            this.supportsMultipleTestTypes = data["supportsMultipleTestTypes"] !== undefined ? data["supportsMultipleTestTypes"] : <any>null;
            this.canBeVerified = data["canBeVerified"] !== undefined ? data["canBeVerified"] : <any>null;
        }
    }

    static fromJS(data: any): External_Feed_ConfigResponse {
        data = typeof data === 'object' ? data : {};
        let result = new External_Feed_ConfigResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["service_Category"] = this.service_Category !== undefined ? this.service_Category : <any>null;
        data["service_Name"] = this.service_Name !== undefined ? this.service_Name : <any>null;
        data["service_ID"] = this.service_ID !== undefined ? this.service_ID : <any>null;
        data["feed_Type"] = this.feed_Type !== undefined ? this.feed_Type : <any>null;
        data["feed_InDirectory"] = this.feed_InDirectory !== undefined ? this.feed_InDirectory : <any>null;
        data["feed_OutDirectory"] = this.feed_OutDirectory !== undefined ? this.feed_OutDirectory : <any>null;
        data["feed_OutHostname"] = this.feed_OutHostname !== undefined ? this.feed_OutHostname : <any>null;
        data["feed_OutPort"] = this.feed_OutPort !== undefined ? this.feed_OutPort : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        data["doctor_ID"] = this.doctor_ID !== undefined ? this.doctor_ID : <any>null;
        data["embedded_Files"] = this.embedded_Files !== undefined ? this.embedded_Files : <any>null;
        data["feed_Provider"] = this.feed_Provider !== undefined ? this.feed_Provider : <any>null;
        data["feed_Enabled"] = this.feed_Enabled !== undefined ? this.feed_Enabled : <any>null;
        data["requestForm_Enabled"] = this.requestForm_Enabled !== undefined ? this.requestForm_Enabled : <any>null;
        data["feed_BackupDirectory"] = this.feed_BackupDirectory !== undefined ? this.feed_BackupDirectory : <any>null;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>null;
        data["modifiedUser"] = this.modifiedUser !== undefined ? this.modifiedUser : <any>null;
        data["requestForm"] = this.requestForm !== undefined ? this.requestForm : <any>null;
        data["lastActivityDateTime"] = this.lastActivityDateTime ? this.lastActivityDateTime.toISOString() : <any>null;
        data["lastWarningDateTime"] = this.lastWarningDateTime ? this.lastWarningDateTime.toISOString() : <any>null;
        data["warnOperatorIfNoActivity"] = this.warnOperatorIfNoActivity !== undefined ? this.warnOperatorIfNoActivity : <any>null;
        data["warnThresholdHours"] = this.warnThresholdHours !== undefined ? this.warnThresholdHours : <any>null;
        data["warnHoursBetweenWarnings"] = this.warnHoursBetweenWarnings !== undefined ? this.warnHoursBetweenWarnings : <any>null;
        data["warnStartHour"] = this.warnStartHour !== undefined ? this.warnStartHour : <any>null;
        data["warnStopHour"] = this.warnStopHour !== undefined ? this.warnStopHour : <any>null;
        data["warnEmailAddresses"] = this.warnEmailAddresses !== undefined ? this.warnEmailAddresses : <any>null;
        data["synopsisPrefix"] = this.synopsisPrefix !== undefined ? this.synopsisPrefix : <any>null;
        data["d_type"] = this.d_type !== undefined ? this.d_type : <any>null;
        data["onPatientFind"] = this.onPatientFind !== undefined ? this.onPatientFind : <any>null;
        data["onPatientFindQuery"] = this.onPatientFindQuery !== undefined ? this.onPatientFindQuery : <any>null;
        data["onClinicalRecord"] = this.onClinicalRecord !== undefined ? this.onClinicalRecord : <any>null;
        data["sqlConnectionString"] = this.sqlConnectionString !== undefined ? this.sqlConnectionString : <any>null;
        data["feed_ReprocessDirectory"] = this.feed_ReprocessDirectory !== undefined ? this.feed_ReprocessDirectory : <any>null;
        data["mappingFeed_ID"] = this.mappingFeed_ID !== undefined ? this.mappingFeed_ID : <any>null;
        data["userDefined"] = this.userDefined !== undefined ? this.userDefined : <any>null;
        data["logging_Enabled"] = this.logging_Enabled !== undefined ? this.logging_Enabled : <any>null;
        data["keepMessagesDays"] = this.keepMessagesDays !== undefined ? this.keepMessagesDays : <any>null;
        data["previewLOINCS"] = this.previewLOINCS !== undefined ? this.previewLOINCS : <any>null;
        data["mrnPatientMatch"] = this.mrnPatientMatch !== undefined ? this.mrnPatientMatch : <any>null;
        data["generateFillerCode"] = this.generateFillerCode !== undefined ? this.generateFillerCode : <any>null;
        data["ignoreSystemMatch"] = this.ignoreSystemMatch !== undefined ? this.ignoreSystemMatch : <any>null;
        data["disable_ClinicalRecordMove"] = this.disable_ClinicalRecordMove !== undefined ? this.disable_ClinicalRecordMove : <any>null;
        data["supportsHMSOrder"] = this.supportsHMSOrder !== undefined ? this.supportsHMSOrder : <any>null;
        data["assigningAuthority"] = this.assigningAuthority !== undefined ? this.assigningAuthority : <any>null;
        data["outboundAssigningAuthority"] = this.outboundAssigningAuthority !== undefined ? this.outboundAssigningAuthority : <any>null;
        data["groupFeed_ID"] = this.groupFeed_ID !== undefined ? this.groupFeed_ID : <any>null;
        data["hT_MRN"] = this.hT_MRN !== undefined ? this.hT_MRN : <any>null;
        data["fileLayout"] = this.fileLayout !== undefined ? this.fileLayout : <any>null;
        data["demographicsMRN"] = this.demographicsMRN !== undefined ? this.demographicsMRN : <any>null;
        data["supportsMultipleTestTypes"] = this.supportsMultipleTestTypes !== undefined ? this.supportsMultipleTestTypes : <any>null;
        data["canBeVerified"] = this.canBeVerified !== undefined ? this.canBeVerified : <any>null;
        return data; 
    }
}

export interface IExternal_Feed_ConfigResponse {
    feed_ID: number;
    service_Category?: number | null;
    service_Name?: string | null;
    service_ID: number;
    feed_Type: number;
    feed_InDirectory?: string | null;
    feed_OutDirectory?: string | null;
    feed_OutHostname?: string | null;
    feed_OutPort?: number | null;
    location_ID?: number | null;
    doctor_ID?: number | null;
    embedded_Files: boolean;
    feed_Provider?: number | null;
    feed_Enabled: boolean;
    requestForm_Enabled: boolean;
    feed_BackupDirectory?: string | null;
    modifiedDate?: Date | null;
    modifiedUser?: string | null;
    requestForm?: string | null;
    lastActivityDateTime?: Date | null;
    lastWarningDateTime?: Date | null;
    warnOperatorIfNoActivity: boolean;
    warnThresholdHours?: number | null;
    warnHoursBetweenWarnings?: number | null;
    warnStartHour?: number | null;
    warnStopHour?: number | null;
    warnEmailAddresses?: string | null;
    synopsisPrefix?: string | null;
    d_type?: number | null;
    onPatientFind?: string | null;
    onPatientFindQuery?: string | null;
    onClinicalRecord?: string | null;
    sqlConnectionString?: string | null;
    feed_ReprocessDirectory?: string | null;
    mappingFeed_ID?: number | null;
    userDefined: boolean;
    logging_Enabled: boolean;
    keepMessagesDays?: number | null;
    previewLOINCS?: string | null;
    mrnPatientMatch: boolean;
    generateFillerCode: boolean;
    ignoreSystemMatch: boolean;
    disable_ClinicalRecordMove: boolean;
    supportsHMSOrder: boolean;
    assigningAuthority?: string | null;
    outboundAssigningAuthority?: string | null;
    groupFeed_ID?: number | null;
    hT_MRN: boolean;
    fileLayout?: string | null;
    demographicsMRN: boolean;
    supportsMultipleTestTypes: boolean;
    canBeVerified: boolean;
}

export class GetGroupedFeedsParams extends BaseRequestParams implements IGetGroupedFeedsParams {
    feedID!: number;

    constructor(data?: IGetGroupedFeedsParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feedID = data["feedID"] !== undefined ? data["feedID"] : <any>null;
        }
    }

    static fromJS(data: any): GetGroupedFeedsParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupedFeedsParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedID"] = this.feedID !== undefined ? this.feedID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetGroupedFeedsParams extends IBaseRequestParams {
    feedID: number;
}

export class GetGroupedFeeds extends GetGroupedFeedsParams implements IGetGroupedFeeds {

    constructor(data?: IGetGroupedFeeds) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetGroupedFeeds {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupedFeeds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetGroupedFeeds extends IGetGroupedFeedsParams {
}

export class APIResponseOfExternal_Feed_ConfigResponseOf extends ProvideErrorMessage implements IAPIResponseOfExternal_Feed_ConfigResponseOf {
    data?: External_Feed_ConfigResponse[] | null;

    constructor(data?: IAPIResponseOfExternal_Feed_ConfigResponseOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(External_Feed_ConfigResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfExternal_Feed_ConfigResponseOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfExternal_Feed_ConfigResponseOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfExternal_Feed_ConfigResponseOf extends IProvideErrorMessage {
    data?: IExternal_Feed_ConfigResponse[] | null;
}

export class FindHealthTrackPatientParameters extends BaseRequestParams implements IFindHealthTrackPatientParameters {
    surname?: string | null;
    firstname?: string | null;
    medicare?: string | null;
    dateOfBirth?: Date | null;

    constructor(data?: IFindHealthTrackPatientParameters) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstname = data["firstname"] !== undefined ? data["firstname"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): FindHealthTrackPatientParameters {
        data = typeof data === 'object' ? data : {};
        let result = new FindHealthTrackPatientParameters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindHealthTrackPatientParameters extends IBaseRequestParams {
    surname?: string | null;
    firstname?: string | null;
    medicare?: string | null;
    dateOfBirth?: Date | null;
}

export class FindHealthTrackPatientMappingRequestParams extends BaseRequestParams implements IFindHealthTrackPatientMappingRequestParams {
    feed_ID!: number;
    mrn?: string | null;
    surname?: string | null;
    dateOfBirth?: Date | null;

    constructor(data?: IFindHealthTrackPatientMappingRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): FindHealthTrackPatientMappingRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindHealthTrackPatientMappingRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindHealthTrackPatientMappingRequestParams extends IBaseRequestParams {
    feed_ID: number;
    mrn?: string | null;
    surname?: string | null;
    dateOfBirth?: Date | null;
}

export class APIResponseOfHL7_PatientMappingResponse extends ProvideErrorMessage implements IAPIResponseOfHL7_PatientMappingResponse {
    data?: HL7_PatientMappingResponse | null;

    constructor(data?: IAPIResponseOfHL7_PatientMappingResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? HL7_PatientMappingResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfHL7_PatientMappingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfHL7_PatientMappingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfHL7_PatientMappingResponse extends IProvideErrorMessage {
    data?: IHL7_PatientMappingResponse | null;
}

export class HL7_PatientMappingResponse implements IHL7_PatientMappingResponse {
    feed_ID!: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner!: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder!: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched!: boolean;
    userMatched!: boolean;
    username?: string | null;
    userCannotMatch!: boolean;
    possibleDuplicate?: boolean | null;
    merged!: boolean;
    inErrorCode!: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted!: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;

    constructor(data?: IHL7_PatientMappingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.feed_ID = data["feed_ID"] !== undefined ? data["feed_ID"] : <any>null;
            this.remotePatient_ID = data["remotePatient_ID"] !== undefined ? data["remotePatient_ID"] : <any>null;
            this.patientIdentifierList = data["patientIdentifierList"] !== undefined ? data["patientIdentifierList"] : <any>null;
            this.localPatient_ID = data["localPatient_ID"] !== undefined ? data["localPatient_ID"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.assigningAuthority = data["assigningAuthority"] !== undefined ? data["assigningAuthority"] : <any>null;
            this.medicare = data["medicare"] !== undefined ? data["medicare"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.middleName = data["middleName"] !== undefined ? data["middleName"] : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.birthOrder = data["birthOrder"] !== undefined ? data["birthOrder"] : <any>null;
            this.addrStreet = data["addrStreet"] !== undefined ? data["addrStreet"] : <any>null;
            this.addrCity = data["addrCity"] !== undefined ? data["addrCity"] : <any>null;
            this.addrState = data["addrState"] !== undefined ? data["addrState"] : <any>null;
            this.addrPostCode = data["addrPostCode"] !== undefined ? data["addrPostCode"] : <any>null;
            this.homePhone = data["homePhone"] !== undefined ? data["homePhone"] : <any>null;
            this.workPhone = data["workPhone"] !== undefined ? data["workPhone"] : <any>null;
            this.messageCode = data["messageCode"] !== undefined ? data["messageCode"] : <any>null;
            this.triggerEvent = data["triggerEvent"] !== undefined ? data["triggerEvent"] : <any>null;
            this.systemMatched = data["systemMatched"] !== undefined ? data["systemMatched"] : <any>null;
            this.userMatched = data["userMatched"] !== undefined ? data["userMatched"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.userCannotMatch = data["userCannotMatch"] !== undefined ? data["userCannotMatch"] : <any>null;
            this.possibleDuplicate = data["possibleDuplicate"] !== undefined ? data["possibleDuplicate"] : <any>null;
            this.merged = data["merged"] !== undefined ? data["merged"] : <any>null;
            this.inErrorCode = data["inErrorCode"] !== undefined ? data["inErrorCode"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateModified = data["dateModified"] ? new Date(data["dateModified"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletedUser = data["deletedUser"] !== undefined ? data["deletedUser"] : <any>null;
            this.deletedDate = data["deletedDate"] ? new Date(data["deletedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): HL7_PatientMappingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HL7_PatientMappingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feed_ID"] = this.feed_ID !== undefined ? this.feed_ID : <any>null;
        data["remotePatient_ID"] = this.remotePatient_ID !== undefined ? this.remotePatient_ID : <any>null;
        data["patientIdentifierList"] = this.patientIdentifierList !== undefined ? this.patientIdentifierList : <any>null;
        data["localPatient_ID"] = this.localPatient_ID !== undefined ? this.localPatient_ID : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["assigningAuthority"] = this.assigningAuthority !== undefined ? this.assigningAuthority : <any>null;
        data["medicare"] = this.medicare !== undefined ? this.medicare : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["middleName"] = this.middleName !== undefined ? this.middleName : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["birthOrder"] = this.birthOrder !== undefined ? this.birthOrder : <any>null;
        data["addrStreet"] = this.addrStreet !== undefined ? this.addrStreet : <any>null;
        data["addrCity"] = this.addrCity !== undefined ? this.addrCity : <any>null;
        data["addrState"] = this.addrState !== undefined ? this.addrState : <any>null;
        data["addrPostCode"] = this.addrPostCode !== undefined ? this.addrPostCode : <any>null;
        data["homePhone"] = this.homePhone !== undefined ? this.homePhone : <any>null;
        data["workPhone"] = this.workPhone !== undefined ? this.workPhone : <any>null;
        data["messageCode"] = this.messageCode !== undefined ? this.messageCode : <any>null;
        data["triggerEvent"] = this.triggerEvent !== undefined ? this.triggerEvent : <any>null;
        data["systemMatched"] = this.systemMatched !== undefined ? this.systemMatched : <any>null;
        data["userMatched"] = this.userMatched !== undefined ? this.userMatched : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["userCannotMatch"] = this.userCannotMatch !== undefined ? this.userCannotMatch : <any>null;
        data["possibleDuplicate"] = this.possibleDuplicate !== undefined ? this.possibleDuplicate : <any>null;
        data["merged"] = this.merged !== undefined ? this.merged : <any>null;
        data["inErrorCode"] = this.inErrorCode !== undefined ? this.inErrorCode : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletedUser"] = this.deletedUser !== undefined ? this.deletedUser : <any>null;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IHL7_PatientMappingResponse {
    feed_ID: number;
    remotePatient_ID?: string | null;
    patientIdentifierList?: string | null;
    localPatient_ID?: number | null;
    owner: boolean;
    assigningAuthority?: string | null;
    medicare?: string | null;
    firstName?: string | null;
    surname?: string | null;
    middleName?: string | null;
    gender?: string | null;
    dateOfBirth?: Date | null;
    birthOrder: number;
    addrStreet?: string | null;
    addrCity?: string | null;
    addrState?: string | null;
    addrPostCode?: string | null;
    homePhone?: string | null;
    workPhone?: string | null;
    messageCode?: string | null;
    triggerEvent?: string | null;
    systemMatched: boolean;
    userMatched: boolean;
    username?: string | null;
    userCannotMatch: boolean;
    possibleDuplicate?: boolean | null;
    merged: boolean;
    inErrorCode: number;
    dateCreated?: Date | null;
    dateModified?: Date | null;
    deleted: boolean;
    deletedUser?: string | null;
    deletedDate?: Date | null;
}

export class AddAdmissionsApiRequestParams extends BaseRequestParams implements IAddAdmissionsApiRequestParams {
    admission_ID!: number;
    admission_State!: number;
    patient_ID!: number;
    episode_ID?: number | null;
    referral_ID?: number | null;
    adT_Hospital_ID?: number | null;
    adT_Unit?: number | null;
    adT_Ward?: number | null;
    adT_Bed?: string | null;
    hosp_AdmissionNum?: string | null;
    dateTime_Admission?: Date | null;
    userCreated_admission?: string | null;
    dateCreated_admission?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    userLastModified_admission?: string | null;
    dateLastModified_admission?: Date | null;
    adT_Status?: number | null;
    adT_Class?: number | null;
    hosp_MRN?: string | null;
    hosp_MRN_Alt?: string | null;
    hosp_TransferFrom?: string | null;
    admission_Indication_Code?: number | null;
    admission_Indication_Description?: string | null;
    admission_Procedure_Code?: number | null;
    admission_Procedure_Description?: string | null;
    admission_Diagnosis_Code?: number | null;
    admission_Diagnosis_Description?: string | null;
    mO_Admitting?: number | null;
    mO_Attending?: number | null;
    mO_Consultant?: number | null;
    mO_Surgeon?: number | null;
    admission_Complications?: number | null;
    admission_Notes?: string | null;
    dateTime_Discharge?: Date | null;
    discharge_To?: number | null;
    discharge_Transfer?: number | null;
    discharge_Status?: string | null;
    discharge_Diagnosis_Code?: number | null;
    discharge_Diagnosis_Description?: string | null;
    discharge_Notes?: string | null;
    userCreated_Discharge?: string | null;
    dateCreated_Discharge?: Date | null;
    userLastModified_Discharge?: string | null;
    dateLastModified_Discharge?: Date | null;
    admittingMOType?: string | null;
    attendingMOType?: string | null;
    consultingMOType?: string | null;
    surgeonType?: string | null;
    hospitalBillingClass?: string | null;
    preAdmissionAssessmentComplete!: boolean;
    codingComplete!: boolean;
    hospitalStayBillingComplete!: boolean;
    hospitalBillingComplete!: boolean;
    reportingComplete!: boolean;
    isTransferred!: boolean;
    date_ExpectedDischarge?: Date | null;
    dischargeIntention?: number | null;
    urgencyOfAdmission?: number | null;
    sourceOfReferral?: number | null;
    mentalHealthLegalStatus?: number | null;
    readmissionWithin28Days?: number | null;
    modeOfSeparation?: number | null;
    sameDayStatus?: number | null;
    admissionType?: number | null;
    drType?: number | null;
    accommodation?: number | null;
    fundedBy?: number | null;
    eligibilityLevel?: number | null;
    mechanicalVentilationHrs?: number | null;
    submission_Status?: string | null;
    iscMaritalStatus?: number | null;
    iscIndigenousOrigin?: number | null;
    iscCountryOfBirth?: number | null;
    iscLanguageSpokenAtHome?: number | null;
    iscHealthInsuranceStatus?: number | null;
    iscPaymentStatusOnSeparation?: number | null;
    iscDateOfFirstProcedure?: Date | null;
    iscState?: number | null;
    phiscoCountryOfBirth?: number | null;
    phiscoLanguageSpokenAtHome?: number | null;
    phiscoHealthInsuranceStatus?: number | null;
    drgCode?: string | null;
    drgVersion?: string | null;

    constructor(data?: IAddAdmissionsApiRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.admission_ID = data["admission_ID"] !== undefined ? data["admission_ID"] : <any>null;
            this.admission_State = data["admission_State"] !== undefined ? data["admission_State"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.episode_ID = data["episode_ID"] !== undefined ? data["episode_ID"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
            this.adT_Hospital_ID = data["adT_Hospital_ID"] !== undefined ? data["adT_Hospital_ID"] : <any>null;
            this.adT_Unit = data["adT_Unit"] !== undefined ? data["adT_Unit"] : <any>null;
            this.adT_Ward = data["adT_Ward"] !== undefined ? data["adT_Ward"] : <any>null;
            this.adT_Bed = data["adT_Bed"] !== undefined ? data["adT_Bed"] : <any>null;
            this.hosp_AdmissionNum = data["hosp_AdmissionNum"] !== undefined ? data["hosp_AdmissionNum"] : <any>null;
            this.dateTime_Admission = data["dateTime_Admission"] ? new Date(data["dateTime_Admission"].toString()) : <any>null;
            this.userCreated_admission = data["userCreated_admission"] !== undefined ? data["userCreated_admission"] : <any>null;
            this.dateCreated_admission = data["dateCreated_admission"] ? new Date(data["dateCreated_admission"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.userLastModified_admission = data["userLastModified_admission"] !== undefined ? data["userLastModified_admission"] : <any>null;
            this.dateLastModified_admission = data["dateLastModified_admission"] ? new Date(data["dateLastModified_admission"].toString()) : <any>null;
            this.adT_Status = data["adT_Status"] !== undefined ? data["adT_Status"] : <any>null;
            this.adT_Class = data["adT_Class"] !== undefined ? data["adT_Class"] : <any>null;
            this.hosp_MRN = data["hosp_MRN"] !== undefined ? data["hosp_MRN"] : <any>null;
            this.hosp_MRN_Alt = data["hosp_MRN_Alt"] !== undefined ? data["hosp_MRN_Alt"] : <any>null;
            this.hosp_TransferFrom = data["hosp_TransferFrom"] !== undefined ? data["hosp_TransferFrom"] : <any>null;
            this.admission_Indication_Code = data["admission_Indication_Code"] !== undefined ? data["admission_Indication_Code"] : <any>null;
            this.admission_Indication_Description = data["admission_Indication_Description"] !== undefined ? data["admission_Indication_Description"] : <any>null;
            this.admission_Procedure_Code = data["admission_Procedure_Code"] !== undefined ? data["admission_Procedure_Code"] : <any>null;
            this.admission_Procedure_Description = data["admission_Procedure_Description"] !== undefined ? data["admission_Procedure_Description"] : <any>null;
            this.admission_Diagnosis_Code = data["admission_Diagnosis_Code"] !== undefined ? data["admission_Diagnosis_Code"] : <any>null;
            this.admission_Diagnosis_Description = data["admission_Diagnosis_Description"] !== undefined ? data["admission_Diagnosis_Description"] : <any>null;
            this.mO_Admitting = data["mO_Admitting"] !== undefined ? data["mO_Admitting"] : <any>null;
            this.mO_Attending = data["mO_Attending"] !== undefined ? data["mO_Attending"] : <any>null;
            this.mO_Consultant = data["mO_Consultant"] !== undefined ? data["mO_Consultant"] : <any>null;
            this.mO_Surgeon = data["mO_Surgeon"] !== undefined ? data["mO_Surgeon"] : <any>null;
            this.admission_Complications = data["admission_Complications"] !== undefined ? data["admission_Complications"] : <any>null;
            this.admission_Notes = data["admission_Notes"] !== undefined ? data["admission_Notes"] : <any>null;
            this.dateTime_Discharge = data["dateTime_Discharge"] ? new Date(data["dateTime_Discharge"].toString()) : <any>null;
            this.discharge_To = data["discharge_To"] !== undefined ? data["discharge_To"] : <any>null;
            this.discharge_Transfer = data["discharge_Transfer"] !== undefined ? data["discharge_Transfer"] : <any>null;
            this.discharge_Status = data["discharge_Status"] !== undefined ? data["discharge_Status"] : <any>null;
            this.discharge_Diagnosis_Code = data["discharge_Diagnosis_Code"] !== undefined ? data["discharge_Diagnosis_Code"] : <any>null;
            this.discharge_Diagnosis_Description = data["discharge_Diagnosis_Description"] !== undefined ? data["discharge_Diagnosis_Description"] : <any>null;
            this.discharge_Notes = data["discharge_Notes"] !== undefined ? data["discharge_Notes"] : <any>null;
            this.userCreated_Discharge = data["userCreated_Discharge"] !== undefined ? data["userCreated_Discharge"] : <any>null;
            this.dateCreated_Discharge = data["dateCreated_Discharge"] ? new Date(data["dateCreated_Discharge"].toString()) : <any>null;
            this.userLastModified_Discharge = data["userLastModified_Discharge"] !== undefined ? data["userLastModified_Discharge"] : <any>null;
            this.dateLastModified_Discharge = data["dateLastModified_Discharge"] ? new Date(data["dateLastModified_Discharge"].toString()) : <any>null;
            this.admittingMOType = data["admittingMOType"] !== undefined ? data["admittingMOType"] : <any>null;
            this.attendingMOType = data["attendingMOType"] !== undefined ? data["attendingMOType"] : <any>null;
            this.consultingMOType = data["consultingMOType"] !== undefined ? data["consultingMOType"] : <any>null;
            this.surgeonType = data["surgeonType"] !== undefined ? data["surgeonType"] : <any>null;
            this.hospitalBillingClass = data["hospitalBillingClass"] !== undefined ? data["hospitalBillingClass"] : <any>null;
            this.preAdmissionAssessmentComplete = data["preAdmissionAssessmentComplete"] !== undefined ? data["preAdmissionAssessmentComplete"] : <any>null;
            this.codingComplete = data["codingComplete"] !== undefined ? data["codingComplete"] : <any>null;
            this.hospitalStayBillingComplete = data["hospitalStayBillingComplete"] !== undefined ? data["hospitalStayBillingComplete"] : <any>null;
            this.hospitalBillingComplete = data["hospitalBillingComplete"] !== undefined ? data["hospitalBillingComplete"] : <any>null;
            this.reportingComplete = data["reportingComplete"] !== undefined ? data["reportingComplete"] : <any>null;
            this.isTransferred = data["isTransferred"] !== undefined ? data["isTransferred"] : <any>null;
            this.date_ExpectedDischarge = data["date_ExpectedDischarge"] ? new Date(data["date_ExpectedDischarge"].toString()) : <any>null;
            this.dischargeIntention = data["dischargeIntention"] !== undefined ? data["dischargeIntention"] : <any>null;
            this.urgencyOfAdmission = data["urgencyOfAdmission"] !== undefined ? data["urgencyOfAdmission"] : <any>null;
            this.sourceOfReferral = data["sourceOfReferral"] !== undefined ? data["sourceOfReferral"] : <any>null;
            this.mentalHealthLegalStatus = data["mentalHealthLegalStatus"] !== undefined ? data["mentalHealthLegalStatus"] : <any>null;
            this.readmissionWithin28Days = data["readmissionWithin28Days"] !== undefined ? data["readmissionWithin28Days"] : <any>null;
            this.modeOfSeparation = data["modeOfSeparation"] !== undefined ? data["modeOfSeparation"] : <any>null;
            this.sameDayStatus = data["sameDayStatus"] !== undefined ? data["sameDayStatus"] : <any>null;
            this.admissionType = data["admissionType"] !== undefined ? data["admissionType"] : <any>null;
            this.drType = data["drType"] !== undefined ? data["drType"] : <any>null;
            this.accommodation = data["accommodation"] !== undefined ? data["accommodation"] : <any>null;
            this.fundedBy = data["fundedBy"] !== undefined ? data["fundedBy"] : <any>null;
            this.eligibilityLevel = data["eligibilityLevel"] !== undefined ? data["eligibilityLevel"] : <any>null;
            this.mechanicalVentilationHrs = data["mechanicalVentilationHrs"] !== undefined ? data["mechanicalVentilationHrs"] : <any>null;
            this.submission_Status = data["submission_Status"] !== undefined ? data["submission_Status"] : <any>null;
            this.iscMaritalStatus = data["iscMaritalStatus"] !== undefined ? data["iscMaritalStatus"] : <any>null;
            this.iscIndigenousOrigin = data["iscIndigenousOrigin"] !== undefined ? data["iscIndigenousOrigin"] : <any>null;
            this.iscCountryOfBirth = data["iscCountryOfBirth"] !== undefined ? data["iscCountryOfBirth"] : <any>null;
            this.iscLanguageSpokenAtHome = data["iscLanguageSpokenAtHome"] !== undefined ? data["iscLanguageSpokenAtHome"] : <any>null;
            this.iscHealthInsuranceStatus = data["iscHealthInsuranceStatus"] !== undefined ? data["iscHealthInsuranceStatus"] : <any>null;
            this.iscPaymentStatusOnSeparation = data["iscPaymentStatusOnSeparation"] !== undefined ? data["iscPaymentStatusOnSeparation"] : <any>null;
            this.iscDateOfFirstProcedure = data["iscDateOfFirstProcedure"] ? new Date(data["iscDateOfFirstProcedure"].toString()) : <any>null;
            this.iscState = data["iscState"] !== undefined ? data["iscState"] : <any>null;
            this.phiscoCountryOfBirth = data["phiscoCountryOfBirth"] !== undefined ? data["phiscoCountryOfBirth"] : <any>null;
            this.phiscoLanguageSpokenAtHome = data["phiscoLanguageSpokenAtHome"] !== undefined ? data["phiscoLanguageSpokenAtHome"] : <any>null;
            this.phiscoHealthInsuranceStatus = data["phiscoHealthInsuranceStatus"] !== undefined ? data["phiscoHealthInsuranceStatus"] : <any>null;
            this.drgCode = data["drgCode"] !== undefined ? data["drgCode"] : <any>null;
            this.drgVersion = data["drgVersion"] !== undefined ? data["drgVersion"] : <any>null;
        }
    }

    static fromJS(data: any): AddAdmissionsApiRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddAdmissionsApiRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admission_ID"] = this.admission_ID !== undefined ? this.admission_ID : <any>null;
        data["admission_State"] = this.admission_State !== undefined ? this.admission_State : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["episode_ID"] = this.episode_ID !== undefined ? this.episode_ID : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        data["adT_Hospital_ID"] = this.adT_Hospital_ID !== undefined ? this.adT_Hospital_ID : <any>null;
        data["adT_Unit"] = this.adT_Unit !== undefined ? this.adT_Unit : <any>null;
        data["adT_Ward"] = this.adT_Ward !== undefined ? this.adT_Ward : <any>null;
        data["adT_Bed"] = this.adT_Bed !== undefined ? this.adT_Bed : <any>null;
        data["hosp_AdmissionNum"] = this.hosp_AdmissionNum !== undefined ? this.hosp_AdmissionNum : <any>null;
        data["dateTime_Admission"] = this.dateTime_Admission ? this.dateTime_Admission.toISOString() : <any>null;
        data["userCreated_admission"] = this.userCreated_admission !== undefined ? this.userCreated_admission : <any>null;
        data["dateCreated_admission"] = this.dateCreated_admission ? this.dateCreated_admission.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["userLastModified_admission"] = this.userLastModified_admission !== undefined ? this.userLastModified_admission : <any>null;
        data["dateLastModified_admission"] = this.dateLastModified_admission ? this.dateLastModified_admission.toISOString() : <any>null;
        data["adT_Status"] = this.adT_Status !== undefined ? this.adT_Status : <any>null;
        data["adT_Class"] = this.adT_Class !== undefined ? this.adT_Class : <any>null;
        data["hosp_MRN"] = this.hosp_MRN !== undefined ? this.hosp_MRN : <any>null;
        data["hosp_MRN_Alt"] = this.hosp_MRN_Alt !== undefined ? this.hosp_MRN_Alt : <any>null;
        data["hosp_TransferFrom"] = this.hosp_TransferFrom !== undefined ? this.hosp_TransferFrom : <any>null;
        data["admission_Indication_Code"] = this.admission_Indication_Code !== undefined ? this.admission_Indication_Code : <any>null;
        data["admission_Indication_Description"] = this.admission_Indication_Description !== undefined ? this.admission_Indication_Description : <any>null;
        data["admission_Procedure_Code"] = this.admission_Procedure_Code !== undefined ? this.admission_Procedure_Code : <any>null;
        data["admission_Procedure_Description"] = this.admission_Procedure_Description !== undefined ? this.admission_Procedure_Description : <any>null;
        data["admission_Diagnosis_Code"] = this.admission_Diagnosis_Code !== undefined ? this.admission_Diagnosis_Code : <any>null;
        data["admission_Diagnosis_Description"] = this.admission_Diagnosis_Description !== undefined ? this.admission_Diagnosis_Description : <any>null;
        data["mO_Admitting"] = this.mO_Admitting !== undefined ? this.mO_Admitting : <any>null;
        data["mO_Attending"] = this.mO_Attending !== undefined ? this.mO_Attending : <any>null;
        data["mO_Consultant"] = this.mO_Consultant !== undefined ? this.mO_Consultant : <any>null;
        data["mO_Surgeon"] = this.mO_Surgeon !== undefined ? this.mO_Surgeon : <any>null;
        data["admission_Complications"] = this.admission_Complications !== undefined ? this.admission_Complications : <any>null;
        data["admission_Notes"] = this.admission_Notes !== undefined ? this.admission_Notes : <any>null;
        data["dateTime_Discharge"] = this.dateTime_Discharge ? this.dateTime_Discharge.toISOString() : <any>null;
        data["discharge_To"] = this.discharge_To !== undefined ? this.discharge_To : <any>null;
        data["discharge_Transfer"] = this.discharge_Transfer !== undefined ? this.discharge_Transfer : <any>null;
        data["discharge_Status"] = this.discharge_Status !== undefined ? this.discharge_Status : <any>null;
        data["discharge_Diagnosis_Code"] = this.discharge_Diagnosis_Code !== undefined ? this.discharge_Diagnosis_Code : <any>null;
        data["discharge_Diagnosis_Description"] = this.discharge_Diagnosis_Description !== undefined ? this.discharge_Diagnosis_Description : <any>null;
        data["discharge_Notes"] = this.discharge_Notes !== undefined ? this.discharge_Notes : <any>null;
        data["userCreated_Discharge"] = this.userCreated_Discharge !== undefined ? this.userCreated_Discharge : <any>null;
        data["dateCreated_Discharge"] = this.dateCreated_Discharge ? this.dateCreated_Discharge.toISOString() : <any>null;
        data["userLastModified_Discharge"] = this.userLastModified_Discharge !== undefined ? this.userLastModified_Discharge : <any>null;
        data["dateLastModified_Discharge"] = this.dateLastModified_Discharge ? this.dateLastModified_Discharge.toISOString() : <any>null;
        data["admittingMOType"] = this.admittingMOType !== undefined ? this.admittingMOType : <any>null;
        data["attendingMOType"] = this.attendingMOType !== undefined ? this.attendingMOType : <any>null;
        data["consultingMOType"] = this.consultingMOType !== undefined ? this.consultingMOType : <any>null;
        data["surgeonType"] = this.surgeonType !== undefined ? this.surgeonType : <any>null;
        data["hospitalBillingClass"] = this.hospitalBillingClass !== undefined ? this.hospitalBillingClass : <any>null;
        data["preAdmissionAssessmentComplete"] = this.preAdmissionAssessmentComplete !== undefined ? this.preAdmissionAssessmentComplete : <any>null;
        data["codingComplete"] = this.codingComplete !== undefined ? this.codingComplete : <any>null;
        data["hospitalStayBillingComplete"] = this.hospitalStayBillingComplete !== undefined ? this.hospitalStayBillingComplete : <any>null;
        data["hospitalBillingComplete"] = this.hospitalBillingComplete !== undefined ? this.hospitalBillingComplete : <any>null;
        data["reportingComplete"] = this.reportingComplete !== undefined ? this.reportingComplete : <any>null;
        data["isTransferred"] = this.isTransferred !== undefined ? this.isTransferred : <any>null;
        data["date_ExpectedDischarge"] = this.date_ExpectedDischarge ? this.date_ExpectedDischarge.toISOString() : <any>null;
        data["dischargeIntention"] = this.dischargeIntention !== undefined ? this.dischargeIntention : <any>null;
        data["urgencyOfAdmission"] = this.urgencyOfAdmission !== undefined ? this.urgencyOfAdmission : <any>null;
        data["sourceOfReferral"] = this.sourceOfReferral !== undefined ? this.sourceOfReferral : <any>null;
        data["mentalHealthLegalStatus"] = this.mentalHealthLegalStatus !== undefined ? this.mentalHealthLegalStatus : <any>null;
        data["readmissionWithin28Days"] = this.readmissionWithin28Days !== undefined ? this.readmissionWithin28Days : <any>null;
        data["modeOfSeparation"] = this.modeOfSeparation !== undefined ? this.modeOfSeparation : <any>null;
        data["sameDayStatus"] = this.sameDayStatus !== undefined ? this.sameDayStatus : <any>null;
        data["admissionType"] = this.admissionType !== undefined ? this.admissionType : <any>null;
        data["drType"] = this.drType !== undefined ? this.drType : <any>null;
        data["accommodation"] = this.accommodation !== undefined ? this.accommodation : <any>null;
        data["fundedBy"] = this.fundedBy !== undefined ? this.fundedBy : <any>null;
        data["eligibilityLevel"] = this.eligibilityLevel !== undefined ? this.eligibilityLevel : <any>null;
        data["mechanicalVentilationHrs"] = this.mechanicalVentilationHrs !== undefined ? this.mechanicalVentilationHrs : <any>null;
        data["submission_Status"] = this.submission_Status !== undefined ? this.submission_Status : <any>null;
        data["iscMaritalStatus"] = this.iscMaritalStatus !== undefined ? this.iscMaritalStatus : <any>null;
        data["iscIndigenousOrigin"] = this.iscIndigenousOrigin !== undefined ? this.iscIndigenousOrigin : <any>null;
        data["iscCountryOfBirth"] = this.iscCountryOfBirth !== undefined ? this.iscCountryOfBirth : <any>null;
        data["iscLanguageSpokenAtHome"] = this.iscLanguageSpokenAtHome !== undefined ? this.iscLanguageSpokenAtHome : <any>null;
        data["iscHealthInsuranceStatus"] = this.iscHealthInsuranceStatus !== undefined ? this.iscHealthInsuranceStatus : <any>null;
        data["iscPaymentStatusOnSeparation"] = this.iscPaymentStatusOnSeparation !== undefined ? this.iscPaymentStatusOnSeparation : <any>null;
        data["iscDateOfFirstProcedure"] = this.iscDateOfFirstProcedure ? this.iscDateOfFirstProcedure.toISOString() : <any>null;
        data["iscState"] = this.iscState !== undefined ? this.iscState : <any>null;
        data["phiscoCountryOfBirth"] = this.phiscoCountryOfBirth !== undefined ? this.phiscoCountryOfBirth : <any>null;
        data["phiscoLanguageSpokenAtHome"] = this.phiscoLanguageSpokenAtHome !== undefined ? this.phiscoLanguageSpokenAtHome : <any>null;
        data["phiscoHealthInsuranceStatus"] = this.phiscoHealthInsuranceStatus !== undefined ? this.phiscoHealthInsuranceStatus : <any>null;
        data["drgCode"] = this.drgCode !== undefined ? this.drgCode : <any>null;
        data["drgVersion"] = this.drgVersion !== undefined ? this.drgVersion : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddAdmissionsApiRequestParams extends IBaseRequestParams {
    admission_ID: number;
    admission_State: number;
    patient_ID: number;
    episode_ID?: number | null;
    referral_ID?: number | null;
    adT_Hospital_ID?: number | null;
    adT_Unit?: number | null;
    adT_Ward?: number | null;
    adT_Bed?: string | null;
    hosp_AdmissionNum?: string | null;
    dateTime_Admission?: Date | null;
    userCreated_admission?: string | null;
    dateCreated_admission?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    userLastModified_admission?: string | null;
    dateLastModified_admission?: Date | null;
    adT_Status?: number | null;
    adT_Class?: number | null;
    hosp_MRN?: string | null;
    hosp_MRN_Alt?: string | null;
    hosp_TransferFrom?: string | null;
    admission_Indication_Code?: number | null;
    admission_Indication_Description?: string | null;
    admission_Procedure_Code?: number | null;
    admission_Procedure_Description?: string | null;
    admission_Diagnosis_Code?: number | null;
    admission_Diagnosis_Description?: string | null;
    mO_Admitting?: number | null;
    mO_Attending?: number | null;
    mO_Consultant?: number | null;
    mO_Surgeon?: number | null;
    admission_Complications?: number | null;
    admission_Notes?: string | null;
    dateTime_Discharge?: Date | null;
    discharge_To?: number | null;
    discharge_Transfer?: number | null;
    discharge_Status?: string | null;
    discharge_Diagnosis_Code?: number | null;
    discharge_Diagnosis_Description?: string | null;
    discharge_Notes?: string | null;
    userCreated_Discharge?: string | null;
    dateCreated_Discharge?: Date | null;
    userLastModified_Discharge?: string | null;
    dateLastModified_Discharge?: Date | null;
    admittingMOType?: string | null;
    attendingMOType?: string | null;
    consultingMOType?: string | null;
    surgeonType?: string | null;
    hospitalBillingClass?: string | null;
    preAdmissionAssessmentComplete: boolean;
    codingComplete: boolean;
    hospitalStayBillingComplete: boolean;
    hospitalBillingComplete: boolean;
    reportingComplete: boolean;
    isTransferred: boolean;
    date_ExpectedDischarge?: Date | null;
    dischargeIntention?: number | null;
    urgencyOfAdmission?: number | null;
    sourceOfReferral?: number | null;
    mentalHealthLegalStatus?: number | null;
    readmissionWithin28Days?: number | null;
    modeOfSeparation?: number | null;
    sameDayStatus?: number | null;
    admissionType?: number | null;
    drType?: number | null;
    accommodation?: number | null;
    fundedBy?: number | null;
    eligibilityLevel?: number | null;
    mechanicalVentilationHrs?: number | null;
    submission_Status?: string | null;
    iscMaritalStatus?: number | null;
    iscIndigenousOrigin?: number | null;
    iscCountryOfBirth?: number | null;
    iscLanguageSpokenAtHome?: number | null;
    iscHealthInsuranceStatus?: number | null;
    iscPaymentStatusOnSeparation?: number | null;
    iscDateOfFirstProcedure?: Date | null;
    iscState?: number | null;
    phiscoCountryOfBirth?: number | null;
    phiscoLanguageSpokenAtHome?: number | null;
    phiscoHealthInsuranceStatus?: number | null;
    drgCode?: string | null;
    drgVersion?: string | null;
}

export class AddOrUpdatePatientMembershipCardParams extends BaseRequestParams implements IAddOrUpdatePatientMembershipCardParams {
    card_ID!: number;
    patient_ID!: number;
    cardType!: number;
    cardNumber?: string | null;
    individualReferenceNumber?: string | null;
    validTo?: Date | null;
    validFrom?: Date | null;
    deleted!: boolean;

    constructor(data?: IAddOrUpdatePatientMembershipCardParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.card_ID = data["card_ID"] !== undefined ? data["card_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.cardType = data["cardType"] !== undefined ? data["cardType"] : <any>null;
            this.cardNumber = data["cardNumber"] !== undefined ? data["cardNumber"] : <any>null;
            this.individualReferenceNumber = data["individualReferenceNumber"] !== undefined ? data["individualReferenceNumber"] : <any>null;
            this.validTo = data["validTo"] ? new Date(data["validTo"].toString()) : <any>null;
            this.validFrom = data["validFrom"] ? new Date(data["validFrom"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdatePatientMembershipCardParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdatePatientMembershipCardParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["card_ID"] = this.card_ID !== undefined ? this.card_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["cardType"] = this.cardType !== undefined ? this.cardType : <any>null;
        data["cardNumber"] = this.cardNumber !== undefined ? this.cardNumber : <any>null;
        data["individualReferenceNumber"] = this.individualReferenceNumber !== undefined ? this.individualReferenceNumber : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdatePatientMembershipCardParams extends IBaseRequestParams {
    card_ID: number;
    patient_ID: number;
    cardType: number;
    cardNumber?: string | null;
    individualReferenceNumber?: string | null;
    validTo?: Date | null;
    validFrom?: Date | null;
    deleted: boolean;
}

export class AddOrUpdatePatientMembershipCard extends AddOrUpdatePatientMembershipCardParams implements IAddOrUpdatePatientMembershipCard {

    constructor(data?: IAddOrUpdatePatientMembershipCard) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdatePatientMembershipCard {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdatePatientMembershipCard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdatePatientMembershipCard extends IAddOrUpdatePatientMembershipCardParams {
}

export class APIResponseOfAddOrUpdatePatientMembershipCardResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdatePatientMembershipCardResult {
    data?: AddOrUpdatePatientMembershipCardResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdatePatientMembershipCardResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdatePatientMembershipCardResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdatePatientMembershipCardResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdatePatientMembershipCardResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdatePatientMembershipCardResult extends IProvideErrorMessage {
    data?: IAddOrUpdatePatientMembershipCardResult | null;
}

export class AddOrUpdatePatientMembershipCardResult extends ProvideErrorMessage implements IAddOrUpdatePatientMembershipCardResult {
    card_ID!: number;

    constructor(data?: IAddOrUpdatePatientMembershipCardResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.card_ID = data["card_ID"] !== undefined ? data["card_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdatePatientMembershipCardResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdatePatientMembershipCardResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["card_ID"] = this.card_ID !== undefined ? this.card_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdatePatientMembershipCardResult extends IProvideErrorMessage {
    card_ID: number;
}

export class PatientSearchParams extends CorrelatableRequestParams implements IPatientSearchParams {
    patientID?: string | null;
    mrn?: string | null;
    surname?: string | null;
    firstname?: string | null;
    dateOfBirth!: Date;
    medicareNumber?: string | null;
    useSoundsLikeSearch!: boolean;

    constructor(data?: IPatientSearchParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patientID = data["patientID"] !== undefined ? data["patientID"] : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstname = data["firstname"] !== undefined ? data["firstname"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.medicareNumber = data["medicareNumber"] !== undefined ? data["medicareNumber"] : <any>null;
            this.useSoundsLikeSearch = data["useSoundsLikeSearch"] !== undefined ? data["useSoundsLikeSearch"] : <any>null;
        }
    }

    static fromJS(data: any): PatientSearchParams {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSearchParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientID"] = this.patientID !== undefined ? this.patientID : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["medicareNumber"] = this.medicareNumber !== undefined ? this.medicareNumber : <any>null;
        data["useSoundsLikeSearch"] = this.useSoundsLikeSearch !== undefined ? this.useSoundsLikeSearch : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPatientSearchParams extends ICorrelatableRequestParams {
    patientID?: string | null;
    mrn?: string | null;
    surname?: string | null;
    firstname?: string | null;
    dateOfBirth: Date;
    medicareNumber?: string | null;
    useSoundsLikeSearch: boolean;
}

export class PatientSearch extends PatientSearchParams implements IPatientSearch {

    constructor(data?: IPatientSearch) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): PatientSearch {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPatientSearch extends IPatientSearchParams {
}

export class APIResponseOfPatientSearchResult extends ProvideErrorMessage implements IAPIResponseOfPatientSearchResult {
    data?: PatientSearchResult | null;

    constructor(data?: IAPIResponseOfPatientSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? PatientSearchResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfPatientSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfPatientSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfPatientSearchResult extends IProvideErrorMessage {
    data?: IPatientSearchResult | null;
}

export class PatientSearchResult extends ProvideErrorMessage implements IPatientSearchResult {
    results?: PatientListDataItem[] | null;

    constructor(data?: IPatientSearchResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(PatientListDataItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IPatientSearchResult extends IProvideErrorMessage {
    results?: IPatientListDataItem[] | null;
}

export class PatientListDataItem implements IPatientListDataItem {
    surname?: string | null;
    firstname?: string | null;
    dob?: Date | null;
    mrn?: string | null;
    formattedAddress?: string | null;
    localPatient_ID?: string | null;
    externalSystem?: string | null;
    external_ID?: string | null;
    isAlias!: boolean;
    pStatus?: string | null;
    rowItemType!: ItemType;
    remotePatientMapping?: MRNDataItem | null;

    constructor(data?: IPatientListDataItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.remotePatientMapping = data.remotePatientMapping && !(<any>data.remotePatientMapping).toJSON ? new MRNDataItem(data.remotePatientMapping) : <MRNDataItem>this.remotePatientMapping; 
        }
    }

    init(data?: any) {
        if (data) {
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.firstname = data["firstname"] !== undefined ? data["firstname"] : <any>null;
            this.dob = data["dob"] ? new Date(data["dob"].toString()) : <any>null;
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.formattedAddress = data["formattedAddress"] !== undefined ? data["formattedAddress"] : <any>null;
            this.localPatient_ID = data["localPatient_ID"] !== undefined ? data["localPatient_ID"] : <any>null;
            this.externalSystem = data["externalSystem"] !== undefined ? data["externalSystem"] : <any>null;
            this.external_ID = data["external_ID"] !== undefined ? data["external_ID"] : <any>null;
            this.isAlias = data["isAlias"] !== undefined ? data["isAlias"] : <any>null;
            this.pStatus = data["pStatus"] !== undefined ? data["pStatus"] : <any>null;
            this.rowItemType = data["rowItemType"] !== undefined ? data["rowItemType"] : <any>null;
            this.remotePatientMapping = data["remotePatientMapping"] ? MRNDataItem.fromJS(data["remotePatientMapping"]) : <any>null;
        }
    }

    static fromJS(data: any): PatientListDataItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientListDataItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["firstname"] = this.firstname !== undefined ? this.firstname : <any>null;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>null;
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["formattedAddress"] = this.formattedAddress !== undefined ? this.formattedAddress : <any>null;
        data["localPatient_ID"] = this.localPatient_ID !== undefined ? this.localPatient_ID : <any>null;
        data["externalSystem"] = this.externalSystem !== undefined ? this.externalSystem : <any>null;
        data["external_ID"] = this.external_ID !== undefined ? this.external_ID : <any>null;
        data["isAlias"] = this.isAlias !== undefined ? this.isAlias : <any>null;
        data["pStatus"] = this.pStatus !== undefined ? this.pStatus : <any>null;
        data["rowItemType"] = this.rowItemType !== undefined ? this.rowItemType : <any>null;
        data["remotePatientMapping"] = this.remotePatientMapping ? this.remotePatientMapping.toJSON() : <any>null;
        return data; 
    }
}

export interface IPatientListDataItem {
    surname?: string | null;
    firstname?: string | null;
    dob?: Date | null;
    mrn?: string | null;
    formattedAddress?: string | null;
    localPatient_ID?: string | null;
    externalSystem?: string | null;
    external_ID?: string | null;
    isAlias: boolean;
    pStatus?: string | null;
    rowItemType: ItemType;
    remotePatientMapping?: IMRNDataItem | null;
}

export enum ItemType {
    HL7_Mapping = 0, 
    PatientSearchRow = 1, 
    PatientInfo = 2, 
    SQLDataRow = 3, 
}

export class MRNDataItem implements IMRNDataItem {
    mrn?: string | null;
    mrnFeedID!: number;
    mrnFeedName?: string | null;
    owner!: boolean;
    merged!: boolean;

    constructor(data?: IMRNDataItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mrn = data["mrn"] !== undefined ? data["mrn"] : <any>null;
            this.mrnFeedID = data["mrnFeedID"] !== undefined ? data["mrnFeedID"] : <any>null;
            this.mrnFeedName = data["mrnFeedName"] !== undefined ? data["mrnFeedName"] : <any>null;
            this.owner = data["owner"] !== undefined ? data["owner"] : <any>null;
            this.merged = data["merged"] !== undefined ? data["merged"] : <any>null;
        }
    }

    static fromJS(data: any): MRNDataItem {
        data = typeof data === 'object' ? data : {};
        let result = new MRNDataItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mrn"] = this.mrn !== undefined ? this.mrn : <any>null;
        data["mrnFeedID"] = this.mrnFeedID !== undefined ? this.mrnFeedID : <any>null;
        data["mrnFeedName"] = this.mrnFeedName !== undefined ? this.mrnFeedName : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["merged"] = this.merged !== undefined ? this.merged : <any>null;
        return data; 
    }
}

export interface IMRNDataItem {
    mrn?: string | null;
    mrnFeedID: number;
    mrnFeedName?: string | null;
    owner: boolean;
    merged: boolean;
}

export class APIResponseOfQuestionnaireInstanceDO extends ProvideErrorMessage implements IAPIResponseOfQuestionnaireInstanceDO {
    data?: QuestionnaireInstanceDO | null;

    constructor(data?: IAPIResponseOfQuestionnaireInstanceDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? QuestionnaireInstanceDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfQuestionnaireInstanceDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfQuestionnaireInstanceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfQuestionnaireInstanceDO extends IProvideErrorMessage {
    data?: IQuestionnaireInstanceDO | null;
}

export class QuestionnaireInstanceDO implements IQuestionnaireInstanceDO {
    instanceNumber?: number | null;
    templateId!: number;
    status?: string | null;
    result?: string | null;
    createDateTime!: Date;
    saveDateTime!: Date;
    source?: string | null;
    instanceId?: string | null;
    patientId?: number | null;
    bookingId?: number | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    deleted!: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    optionalPin?: number | null;

    constructor(data?: IQuestionnaireInstanceDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.instanceNumber = data["instanceNumber"] !== undefined ? data["instanceNumber"] : <any>null;
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.result = data["result"] !== undefined ? data["result"] : <any>null;
            this.createDateTime = data["createDateTime"] ? new Date(data["createDateTime"].toString()) : <any>null;
            this.saveDateTime = data["saveDateTime"] ? new Date(data["saveDateTime"].toString()) : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.instanceId = data["instanceId"] !== undefined ? data["instanceId"] : <any>null;
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.bookingId = data["bookingId"] !== undefined ? data["bookingId"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.optionalPin = data["optionalPin"] !== undefined ? data["optionalPin"] : <any>null;
        }
    }

    static fromJS(data: any): QuestionnaireInstanceDO {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionnaireInstanceDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["instanceNumber"] = this.instanceNumber !== undefined ? this.instanceNumber : <any>null;
        data["templateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["result"] = this.result !== undefined ? this.result : <any>null;
        data["createDateTime"] = this.createDateTime ? this.createDateTime.toISOString() : <any>null;
        data["saveDateTime"] = this.saveDateTime ? this.saveDateTime.toISOString() : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["instanceId"] = this.instanceId !== undefined ? this.instanceId : <any>null;
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["bookingId"] = this.bookingId !== undefined ? this.bookingId : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["optionalPin"] = this.optionalPin !== undefined ? this.optionalPin : <any>null;
        return data; 
    }
}

export interface IQuestionnaireInstanceDO {
    instanceNumber?: number | null;
    templateId: number;
    status?: string | null;
    result?: string | null;
    createDateTime: Date;
    saveDateTime: Date;
    source?: string | null;
    instanceId?: string | null;
    patientId?: number | null;
    bookingId?: number | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    deleted: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    optionalPin?: number | null;
}

export class APIResponseOfQuestionnaireTemplateDO extends ProvideErrorMessage implements IAPIResponseOfQuestionnaireTemplateDO {
    data?: QuestionnaireTemplateDO | null;

    constructor(data?: IAPIResponseOfQuestionnaireTemplateDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? QuestionnaireTemplateDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfQuestionnaireTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfQuestionnaireTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfQuestionnaireTemplateDO extends IProvideErrorMessage {
    data?: IQuestionnaireTemplateDO | null;
}

export class QuestionnaireTemplateDO implements IQuestionnaireTemplateDO {
    templateId?: number | null;
    templateType!: number;
    templateDescription?: string | null;
    templatePages?: string | null;
    expiry?: number | null;
    defaultMessage?: string | null;
    prefill!: boolean;
    usePin!: boolean;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    deleted!: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    recordSubCategory!: number;
    class?: string | null;
    requiresReview!: boolean;

    constructor(data?: IQuestionnaireTemplateDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : <any>null;
            this.templateType = data["templateType"] !== undefined ? data["templateType"] : <any>null;
            this.templateDescription = data["templateDescription"] !== undefined ? data["templateDescription"] : <any>null;
            this.templatePages = data["templatePages"] !== undefined ? data["templatePages"] : <any>null;
            this.expiry = data["expiry"] !== undefined ? data["expiry"] : <any>null;
            this.defaultMessage = data["defaultMessage"] !== undefined ? data["defaultMessage"] : <any>null;
            this.prefill = data["prefill"] !== undefined ? data["prefill"] : <any>null;
            this.usePin = data["usePin"] !== undefined ? data["usePin"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.recordSubCategory = data["recordSubCategory"] !== undefined ? data["recordSubCategory"] : <any>null;
            this.class = data["class"] !== undefined ? data["class"] : <any>null;
            this.requiresReview = data["requiresReview"] !== undefined ? data["requiresReview"] : <any>null;
        }
    }

    static fromJS(data: any): QuestionnaireTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionnaireTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["templateType"] = this.templateType !== undefined ? this.templateType : <any>null;
        data["templateDescription"] = this.templateDescription !== undefined ? this.templateDescription : <any>null;
        data["templatePages"] = this.templatePages !== undefined ? this.templatePages : <any>null;
        data["expiry"] = this.expiry !== undefined ? this.expiry : <any>null;
        data["defaultMessage"] = this.defaultMessage !== undefined ? this.defaultMessage : <any>null;
        data["prefill"] = this.prefill !== undefined ? this.prefill : <any>null;
        data["usePin"] = this.usePin !== undefined ? this.usePin : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["recordSubCategory"] = this.recordSubCategory !== undefined ? this.recordSubCategory : <any>null;
        data["class"] = this.class !== undefined ? this.class : <any>null;
        data["requiresReview"] = this.requiresReview !== undefined ? this.requiresReview : <any>null;
        return data; 
    }
}

export interface IQuestionnaireTemplateDO {
    templateId?: number | null;
    templateType: number;
    templateDescription?: string | null;
    templatePages?: string | null;
    expiry?: number | null;
    defaultMessage?: string | null;
    prefill: boolean;
    usePin: boolean;
    dateCreated?: Date | null;
    userCreated?: string | null;
    dateLastModified?: Date | null;
    userLastModified?: string | null;
    deleted: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    recordSubCategory: number;
    class?: string | null;
    requiresReview: boolean;
}

export class APIResponseOfListOfQuestionnaireTemplateDO extends ProvideErrorMessage implements IAPIResponseOfListOfQuestionnaireTemplateDO {
    data?: QuestionnaireTemplateDO[] | null;

    constructor(data?: IAPIResponseOfListOfQuestionnaireTemplateDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(QuestionnaireTemplateDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfQuestionnaireTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfQuestionnaireTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfQuestionnaireTemplateDO extends IProvideErrorMessage {
    data?: IQuestionnaireTemplateDO[] | null;
}

export class APIResponseOfTemplateSubRecordTypesResponse extends ProvideErrorMessage implements IAPIResponseOfTemplateSubRecordTypesResponse {
    data?: TemplateSubRecordTypesResponse | null;

    constructor(data?: IAPIResponseOfTemplateSubRecordTypesResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? TemplateSubRecordTypesResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfTemplateSubRecordTypesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfTemplateSubRecordTypesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfTemplateSubRecordTypesResponse extends IProvideErrorMessage {
    data?: ITemplateSubRecordTypesResponse | null;
}

export class TemplateSubRecordTypesResponse implements ITemplateSubRecordTypesResponse {
    subRecordTypesDictionary?: SRTypeTitleCombo[] | null;
    defaultRecordSubcategory!: number;

    constructor(data?: ITemplateSubRecordTypesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.subRecordTypesDictionary) {
                this.subRecordTypesDictionary = [];
                for (let i = 0; i < data.subRecordTypesDictionary.length; i++) {
                    let item = data.subRecordTypesDictionary[i];
                    this.subRecordTypesDictionary[i] = item && !(<any>item).toJSON ? new SRTypeTitleCombo(item) : <SRTypeTitleCombo>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["subRecordTypesDictionary"] && data["subRecordTypesDictionary"].constructor === Array) {
                this.subRecordTypesDictionary = [];
                for (let item of data["subRecordTypesDictionary"])
                    this.subRecordTypesDictionary.push(SRTypeTitleCombo.fromJS(item));
            }
            this.defaultRecordSubcategory = data["defaultRecordSubcategory"] !== undefined ? data["defaultRecordSubcategory"] : <any>null;
        }
    }

    static fromJS(data: any): TemplateSubRecordTypesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateSubRecordTypesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.subRecordTypesDictionary && this.subRecordTypesDictionary.constructor === Array) {
            data["subRecordTypesDictionary"] = [];
            for (let item of this.subRecordTypesDictionary)
                data["subRecordTypesDictionary"].push(item.toJSON());
        }
        data["defaultRecordSubcategory"] = this.defaultRecordSubcategory !== undefined ? this.defaultRecordSubcategory : <any>null;
        return data; 
    }
}

export interface ITemplateSubRecordTypesResponse {
    subRecordTypesDictionary?: ISRTypeTitleCombo[] | null;
    defaultRecordSubcategory: number;
}

export class SRTypeTitleCombo implements ISRTypeTitleCombo {
    title?: string | null;
    recordSubCategory!: number;

    constructor(data?: ISRTypeTitleCombo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.recordSubCategory = data["recordSubCategory"] !== undefined ? data["recordSubCategory"] : <any>null;
        }
    }

    static fromJS(data: any): SRTypeTitleCombo {
        data = typeof data === 'object' ? data : {};
        let result = new SRTypeTitleCombo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["recordSubCategory"] = this.recordSubCategory !== undefined ? this.recordSubCategory : <any>null;
        return data; 
    }
}

export interface ISRTypeTitleCombo {
    title?: string | null;
    recordSubCategory: number;
}

export class GetAllReferringDoctorsParams extends CorrelatableRequestParams implements IGetAllReferringDoctorsParams {
    givennamesContains?: string | null;
    surnameContains?: string | null;
    providerNumberContains?: string | null;

    constructor(data?: IGetAllReferringDoctorsParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.givennamesContains = data["givennamesContains"] !== undefined ? data["givennamesContains"] : <any>null;
            this.surnameContains = data["surnameContains"] !== undefined ? data["surnameContains"] : <any>null;
            this.providerNumberContains = data["providerNumberContains"] !== undefined ? data["providerNumberContains"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllReferringDoctorsParams {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllReferringDoctorsParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["givennamesContains"] = this.givennamesContains !== undefined ? this.givennamesContains : <any>null;
        data["surnameContains"] = this.surnameContains !== undefined ? this.surnameContains : <any>null;
        data["providerNumberContains"] = this.providerNumberContains !== undefined ? this.providerNumberContains : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllReferringDoctorsParams extends ICorrelatableRequestParams {
    givennamesContains?: string | null;
    surnameContains?: string | null;
    providerNumberContains?: string | null;
}

export class GetAllReferringDoctors extends GetAllReferringDoctorsParams implements IGetAllReferringDoctors {

    constructor(data?: IGetAllReferringDoctors) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): GetAllReferringDoctors {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllReferringDoctors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllReferringDoctors extends IGetAllReferringDoctorsParams {
}

export class APIResponseOfGetAllReferringDoctorsResult extends ProvideErrorMessage implements IAPIResponseOfGetAllReferringDoctorsResult {
    data?: GetAllReferringDoctorsResult | null;

    constructor(data?: IAPIResponseOfGetAllReferringDoctorsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetAllReferringDoctorsResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetAllReferringDoctorsResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetAllReferringDoctorsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetAllReferringDoctorsResult extends IProvideErrorMessage {
    data?: IGetAllReferringDoctorsResult | null;
}

export class GetAllReferringDoctorsResult extends ProvideErrorMessage implements IGetAllReferringDoctorsResult {
    results?: ReferringDoctorInfo[] | null;

    constructor(data?: IGetAllReferringDoctorsResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(ReferringDoctorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllReferringDoctorsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllReferringDoctorsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IGetAllReferringDoctorsResult extends IProvideErrorMessage {
    results?: IReferringDoctorInfo[] | null;
}

export class ReferringDoctorInfo implements IReferringDoctorInfo {
    reqdoctorno!: number;
    reqdoccode?: string | null;
    surname?: string | null;
    givennames?: string | null;
    prefname?: string | null;
    provno?: string | null;
    provno_stem?: string | null;
    title?: string | null;
    companyname?: string | null;
    displayname?: string | null;

    constructor(data?: IReferringDoctorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reqdoctorno = data["reqdoctorno"] !== undefined ? data["reqdoctorno"] : <any>null;
            this.reqdoccode = data["reqdoccode"] !== undefined ? data["reqdoccode"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.givennames = data["givennames"] !== undefined ? data["givennames"] : <any>null;
            this.prefname = data["prefname"] !== undefined ? data["prefname"] : <any>null;
            this.provno = data["provno"] !== undefined ? data["provno"] : <any>null;
            this.provno_stem = data["provno_stem"] !== undefined ? data["provno_stem"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.companyname = data["companyname"] !== undefined ? data["companyname"] : <any>null;
            this.displayname = data["displayname"] !== undefined ? data["displayname"] : <any>null;
        }
    }

    static fromJS(data: any): ReferringDoctorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ReferringDoctorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqdoctorno"] = this.reqdoctorno !== undefined ? this.reqdoctorno : <any>null;
        data["reqdoccode"] = this.reqdoccode !== undefined ? this.reqdoccode : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["givennames"] = this.givennames !== undefined ? this.givennames : <any>null;
        data["prefname"] = this.prefname !== undefined ? this.prefname : <any>null;
        data["provno"] = this.provno !== undefined ? this.provno : <any>null;
        data["provno_stem"] = this.provno_stem !== undefined ? this.provno_stem : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["companyname"] = this.companyname !== undefined ? this.companyname : <any>null;
        data["displayname"] = this.displayname !== undefined ? this.displayname : <any>null;
        return data; 
    }
}

export interface IReferringDoctorInfo {
    reqdoctorno: number;
    reqdoccode?: string | null;
    surname?: string | null;
    givennames?: string | null;
    prefname?: string | null;
    provno?: string | null;
    provno_stem?: string | null;
    title?: string | null;
    companyname?: string | null;
    displayname?: string | null;
}

export class AddOrUpdateReferringDoctorParams extends BaseRequestParams implements IAddOrUpdateReferringDoctorParams {
    givennames?: string | null;
    surname?: string | null;
    providerNumber?: string | null;
    assistant?: number | null;
    co_name?: string | null;
    co_title?: string | null;
    companyname?: string | null;
    contact?: string | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    datestamp?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    displayname?: string | null;
    dR_ValidTo?: Date | null;
    eC_ePostCopy?: boolean | null;
    eC_ForceDischargeReferral?: boolean | null;
    eC_ManualCopy?: boolean | null;
    eC_Method?: number | null;
    eC_Username?: string | null;
    email?: string | null;
    emailrunno?: number | null;
    extDoctor_ID?: string | null;
    healthconnect?: number | null;
    hlink?: string | null;
    hlinkrunno?: number | null;
    import?: string | null;
    importdir?: string | null;
    inactive?: number | null;
    isLinkedToDoctorNumber?: boolean | null;
    notes?: string | null;
    otherallow?: string | null;
    otherlistorder?: string | null;
    othernoprintdoctor?: number | null;
    otherrequestform?: string | null;
    othertransport?: number | null;
    pagerno?: string | null;
    pathallow?: number | null;
    pathlistorder?: string | null;
    pathnoprintdoctor?: number | null;
    pathrequestform?: string | null;
    pathtransport?: number | null;
    phonea?: string | null;
    phonef?: string | null;
    phoneh?: string | null;
    phonem?: string | null;
    phonep?: string | null;
    phonew?: string | null;
    postcode?: string | null;
    postcode_2?: number | null;
    prefname?: string | null;
    privacy?: string | null;
    provno?: string | null;
    provno_stem?: string | null;
    qualification?: number | null;
    radallow?: number | null;
    radlistorder?: string | null;
    radnoprintdoctor?: number | null;
    radrequestform?: string | null;
    radtransport?: number | null;
    recentAddition?: boolean | null;
    recordmerged?: Date | null;
    regionno?: number | null;
    reqdoccode?: string | null;
    reqdocpracno?: number | null;
    reqdoctorno?: number | null;
    rptemail?: number | null;
    rptfax?: number | null;
    rptformat?: number | null;
    rpthlink?: number | null;
    rptmail?: number | null;
    rptmailnum?: number | null;
    rptpatient?: number | null;
    rptpatientnum?: number | null;
    shortname?: string | null;
    source?: string | null;
    speciality?: number | null;
    street1?: string | null;
    street1_2?: string | null;
    street2?: string | null;
    street2_2?: string | null;
    street3?: string | null;
    suburb?: string | null;
    suburb_2?: string | null;
    title?: string | null;
    usepracdelivery?: number | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    userno?: number | null;
    usertf?: number | null;

    constructor(data?: IAddOrUpdateReferringDoctorParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.givennames = data["givennames"] !== undefined ? data["givennames"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.providerNumber = data["providerNumber"] !== undefined ? data["providerNumber"] : <any>null;
            this.assistant = data["assistant"] !== undefined ? data["assistant"] : <any>null;
            this.co_name = data["co_name"] !== undefined ? data["co_name"] : <any>null;
            this.co_title = data["co_title"] !== undefined ? data["co_title"] : <any>null;
            this.companyname = data["companyname"] !== undefined ? data["companyname"] : <any>null;
            this.contact = data["contact"] !== undefined ? data["contact"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.datestamp = data["datestamp"] ? new Date(data["datestamp"].toString()) : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.displayname = data["displayname"] !== undefined ? data["displayname"] : <any>null;
            this.dR_ValidTo = data["dR_ValidTo"] ? new Date(data["dR_ValidTo"].toString()) : <any>null;
            this.eC_ePostCopy = data["eC_ePostCopy"] !== undefined ? data["eC_ePostCopy"] : <any>null;
            this.eC_ForceDischargeReferral = data["eC_ForceDischargeReferral"] !== undefined ? data["eC_ForceDischargeReferral"] : <any>null;
            this.eC_ManualCopy = data["eC_ManualCopy"] !== undefined ? data["eC_ManualCopy"] : <any>null;
            this.eC_Method = data["eC_Method"] !== undefined ? data["eC_Method"] : <any>null;
            this.eC_Username = data["eC_Username"] !== undefined ? data["eC_Username"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.emailrunno = data["emailrunno"] !== undefined ? data["emailrunno"] : <any>null;
            this.extDoctor_ID = data["extDoctor_ID"] !== undefined ? data["extDoctor_ID"] : <any>null;
            this.healthconnect = data["healthconnect"] !== undefined ? data["healthconnect"] : <any>null;
            this.hlink = data["hlink"] !== undefined ? data["hlink"] : <any>null;
            this.hlinkrunno = data["hlinkrunno"] !== undefined ? data["hlinkrunno"] : <any>null;
            this.import = data["import"] !== undefined ? data["import"] : <any>null;
            this.importdir = data["importdir"] !== undefined ? data["importdir"] : <any>null;
            this.inactive = data["inactive"] !== undefined ? data["inactive"] : <any>null;
            this.isLinkedToDoctorNumber = data["isLinkedToDoctorNumber"] !== undefined ? data["isLinkedToDoctorNumber"] : <any>null;
            this.notes = data["notes"] !== undefined ? data["notes"] : <any>null;
            this.otherallow = data["otherallow"] !== undefined ? data["otherallow"] : <any>null;
            this.otherlistorder = data["otherlistorder"] !== undefined ? data["otherlistorder"] : <any>null;
            this.othernoprintdoctor = data["othernoprintdoctor"] !== undefined ? data["othernoprintdoctor"] : <any>null;
            this.otherrequestform = data["otherrequestform"] !== undefined ? data["otherrequestform"] : <any>null;
            this.othertransport = data["othertransport"] !== undefined ? data["othertransport"] : <any>null;
            this.pagerno = data["pagerno"] !== undefined ? data["pagerno"] : <any>null;
            this.pathallow = data["pathallow"] !== undefined ? data["pathallow"] : <any>null;
            this.pathlistorder = data["pathlistorder"] !== undefined ? data["pathlistorder"] : <any>null;
            this.pathnoprintdoctor = data["pathnoprintdoctor"] !== undefined ? data["pathnoprintdoctor"] : <any>null;
            this.pathrequestform = data["pathrequestform"] !== undefined ? data["pathrequestform"] : <any>null;
            this.pathtransport = data["pathtransport"] !== undefined ? data["pathtransport"] : <any>null;
            this.phonea = data["phonea"] !== undefined ? data["phonea"] : <any>null;
            this.phonef = data["phonef"] !== undefined ? data["phonef"] : <any>null;
            this.phoneh = data["phoneh"] !== undefined ? data["phoneh"] : <any>null;
            this.phonem = data["phonem"] !== undefined ? data["phonem"] : <any>null;
            this.phonep = data["phonep"] !== undefined ? data["phonep"] : <any>null;
            this.phonew = data["phonew"] !== undefined ? data["phonew"] : <any>null;
            this.postcode = data["postcode"] !== undefined ? data["postcode"] : <any>null;
            this.postcode_2 = data["postcode_2"] !== undefined ? data["postcode_2"] : <any>null;
            this.prefname = data["prefname"] !== undefined ? data["prefname"] : <any>null;
            this.privacy = data["privacy"] !== undefined ? data["privacy"] : <any>null;
            this.provno = data["provno"] !== undefined ? data["provno"] : <any>null;
            this.provno_stem = data["provno_stem"] !== undefined ? data["provno_stem"] : <any>null;
            this.qualification = data["qualification"] !== undefined ? data["qualification"] : <any>null;
            this.radallow = data["radallow"] !== undefined ? data["radallow"] : <any>null;
            this.radlistorder = data["radlistorder"] !== undefined ? data["radlistorder"] : <any>null;
            this.radnoprintdoctor = data["radnoprintdoctor"] !== undefined ? data["radnoprintdoctor"] : <any>null;
            this.radrequestform = data["radrequestform"] !== undefined ? data["radrequestform"] : <any>null;
            this.radtransport = data["radtransport"] !== undefined ? data["radtransport"] : <any>null;
            this.recentAddition = data["recentAddition"] !== undefined ? data["recentAddition"] : <any>null;
            this.recordmerged = data["recordmerged"] ? new Date(data["recordmerged"].toString()) : <any>null;
            this.regionno = data["regionno"] !== undefined ? data["regionno"] : <any>null;
            this.reqdoccode = data["reqdoccode"] !== undefined ? data["reqdoccode"] : <any>null;
            this.reqdocpracno = data["reqdocpracno"] !== undefined ? data["reqdocpracno"] : <any>null;
            this.reqdoctorno = data["reqdoctorno"] !== undefined ? data["reqdoctorno"] : <any>null;
            this.rptemail = data["rptemail"] !== undefined ? data["rptemail"] : <any>null;
            this.rptfax = data["rptfax"] !== undefined ? data["rptfax"] : <any>null;
            this.rptformat = data["rptformat"] !== undefined ? data["rptformat"] : <any>null;
            this.rpthlink = data["rpthlink"] !== undefined ? data["rpthlink"] : <any>null;
            this.rptmail = data["rptmail"] !== undefined ? data["rptmail"] : <any>null;
            this.rptmailnum = data["rptmailnum"] !== undefined ? data["rptmailnum"] : <any>null;
            this.rptpatient = data["rptpatient"] !== undefined ? data["rptpatient"] : <any>null;
            this.rptpatientnum = data["rptpatientnum"] !== undefined ? data["rptpatientnum"] : <any>null;
            this.shortname = data["shortname"] !== undefined ? data["shortname"] : <any>null;
            this.source = data["source"] !== undefined ? data["source"] : <any>null;
            this.speciality = data["speciality"] !== undefined ? data["speciality"] : <any>null;
            this.street1 = data["street1"] !== undefined ? data["street1"] : <any>null;
            this.street1_2 = data["street1_2"] !== undefined ? data["street1_2"] : <any>null;
            this.street2 = data["street2"] !== undefined ? data["street2"] : <any>null;
            this.street2_2 = data["street2_2"] !== undefined ? data["street2_2"] : <any>null;
            this.street3 = data["street3"] !== undefined ? data["street3"] : <any>null;
            this.suburb = data["suburb"] !== undefined ? data["suburb"] : <any>null;
            this.suburb_2 = data["suburb_2"] !== undefined ? data["suburb_2"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.usepracdelivery = data["usepracdelivery"] !== undefined ? data["usepracdelivery"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.userno = data["userno"] !== undefined ? data["userno"] : <any>null;
            this.usertf = data["usertf"] !== undefined ? data["usertf"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateReferringDoctorParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateReferringDoctorParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["givennames"] = this.givennames !== undefined ? this.givennames : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["providerNumber"] = this.providerNumber !== undefined ? this.providerNumber : <any>null;
        data["assistant"] = this.assistant !== undefined ? this.assistant : <any>null;
        data["co_name"] = this.co_name !== undefined ? this.co_name : <any>null;
        data["co_title"] = this.co_title !== undefined ? this.co_title : <any>null;
        data["companyname"] = this.companyname !== undefined ? this.companyname : <any>null;
        data["contact"] = this.contact !== undefined ? this.contact : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["datestamp"] = this.datestamp ? this.datestamp.toISOString() : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["displayname"] = this.displayname !== undefined ? this.displayname : <any>null;
        data["dR_ValidTo"] = this.dR_ValidTo ? this.dR_ValidTo.toISOString() : <any>null;
        data["eC_ePostCopy"] = this.eC_ePostCopy !== undefined ? this.eC_ePostCopy : <any>null;
        data["eC_ForceDischargeReferral"] = this.eC_ForceDischargeReferral !== undefined ? this.eC_ForceDischargeReferral : <any>null;
        data["eC_ManualCopy"] = this.eC_ManualCopy !== undefined ? this.eC_ManualCopy : <any>null;
        data["eC_Method"] = this.eC_Method !== undefined ? this.eC_Method : <any>null;
        data["eC_Username"] = this.eC_Username !== undefined ? this.eC_Username : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["emailrunno"] = this.emailrunno !== undefined ? this.emailrunno : <any>null;
        data["extDoctor_ID"] = this.extDoctor_ID !== undefined ? this.extDoctor_ID : <any>null;
        data["healthconnect"] = this.healthconnect !== undefined ? this.healthconnect : <any>null;
        data["hlink"] = this.hlink !== undefined ? this.hlink : <any>null;
        data["hlinkrunno"] = this.hlinkrunno !== undefined ? this.hlinkrunno : <any>null;
        data["import"] = this.import !== undefined ? this.import : <any>null;
        data["importdir"] = this.importdir !== undefined ? this.importdir : <any>null;
        data["inactive"] = this.inactive !== undefined ? this.inactive : <any>null;
        data["isLinkedToDoctorNumber"] = this.isLinkedToDoctorNumber !== undefined ? this.isLinkedToDoctorNumber : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["otherallow"] = this.otherallow !== undefined ? this.otherallow : <any>null;
        data["otherlistorder"] = this.otherlistorder !== undefined ? this.otherlistorder : <any>null;
        data["othernoprintdoctor"] = this.othernoprintdoctor !== undefined ? this.othernoprintdoctor : <any>null;
        data["otherrequestform"] = this.otherrequestform !== undefined ? this.otherrequestform : <any>null;
        data["othertransport"] = this.othertransport !== undefined ? this.othertransport : <any>null;
        data["pagerno"] = this.pagerno !== undefined ? this.pagerno : <any>null;
        data["pathallow"] = this.pathallow !== undefined ? this.pathallow : <any>null;
        data["pathlistorder"] = this.pathlistorder !== undefined ? this.pathlistorder : <any>null;
        data["pathnoprintdoctor"] = this.pathnoprintdoctor !== undefined ? this.pathnoprintdoctor : <any>null;
        data["pathrequestform"] = this.pathrequestform !== undefined ? this.pathrequestform : <any>null;
        data["pathtransport"] = this.pathtransport !== undefined ? this.pathtransport : <any>null;
        data["phonea"] = this.phonea !== undefined ? this.phonea : <any>null;
        data["phonef"] = this.phonef !== undefined ? this.phonef : <any>null;
        data["phoneh"] = this.phoneh !== undefined ? this.phoneh : <any>null;
        data["phonem"] = this.phonem !== undefined ? this.phonem : <any>null;
        data["phonep"] = this.phonep !== undefined ? this.phonep : <any>null;
        data["phonew"] = this.phonew !== undefined ? this.phonew : <any>null;
        data["postcode"] = this.postcode !== undefined ? this.postcode : <any>null;
        data["postcode_2"] = this.postcode_2 !== undefined ? this.postcode_2 : <any>null;
        data["prefname"] = this.prefname !== undefined ? this.prefname : <any>null;
        data["privacy"] = this.privacy !== undefined ? this.privacy : <any>null;
        data["provno"] = this.provno !== undefined ? this.provno : <any>null;
        data["provno_stem"] = this.provno_stem !== undefined ? this.provno_stem : <any>null;
        data["qualification"] = this.qualification !== undefined ? this.qualification : <any>null;
        data["radallow"] = this.radallow !== undefined ? this.radallow : <any>null;
        data["radlistorder"] = this.radlistorder !== undefined ? this.radlistorder : <any>null;
        data["radnoprintdoctor"] = this.radnoprintdoctor !== undefined ? this.radnoprintdoctor : <any>null;
        data["radrequestform"] = this.radrequestform !== undefined ? this.radrequestform : <any>null;
        data["radtransport"] = this.radtransport !== undefined ? this.radtransport : <any>null;
        data["recentAddition"] = this.recentAddition !== undefined ? this.recentAddition : <any>null;
        data["recordmerged"] = this.recordmerged ? this.recordmerged.toISOString() : <any>null;
        data["regionno"] = this.regionno !== undefined ? this.regionno : <any>null;
        data["reqdoccode"] = this.reqdoccode !== undefined ? this.reqdoccode : <any>null;
        data["reqdocpracno"] = this.reqdocpracno !== undefined ? this.reqdocpracno : <any>null;
        data["reqdoctorno"] = this.reqdoctorno !== undefined ? this.reqdoctorno : <any>null;
        data["rptemail"] = this.rptemail !== undefined ? this.rptemail : <any>null;
        data["rptfax"] = this.rptfax !== undefined ? this.rptfax : <any>null;
        data["rptformat"] = this.rptformat !== undefined ? this.rptformat : <any>null;
        data["rpthlink"] = this.rpthlink !== undefined ? this.rpthlink : <any>null;
        data["rptmail"] = this.rptmail !== undefined ? this.rptmail : <any>null;
        data["rptmailnum"] = this.rptmailnum !== undefined ? this.rptmailnum : <any>null;
        data["rptpatient"] = this.rptpatient !== undefined ? this.rptpatient : <any>null;
        data["rptpatientnum"] = this.rptpatientnum !== undefined ? this.rptpatientnum : <any>null;
        data["shortname"] = this.shortname !== undefined ? this.shortname : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["speciality"] = this.speciality !== undefined ? this.speciality : <any>null;
        data["street1"] = this.street1 !== undefined ? this.street1 : <any>null;
        data["street1_2"] = this.street1_2 !== undefined ? this.street1_2 : <any>null;
        data["street2"] = this.street2 !== undefined ? this.street2 : <any>null;
        data["street2_2"] = this.street2_2 !== undefined ? this.street2_2 : <any>null;
        data["street3"] = this.street3 !== undefined ? this.street3 : <any>null;
        data["suburb"] = this.suburb !== undefined ? this.suburb : <any>null;
        data["suburb_2"] = this.suburb_2 !== undefined ? this.suburb_2 : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["usepracdelivery"] = this.usepracdelivery !== undefined ? this.usepracdelivery : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["userno"] = this.userno !== undefined ? this.userno : <any>null;
        data["usertf"] = this.usertf !== undefined ? this.usertf : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateReferringDoctorParams extends IBaseRequestParams {
    givennames?: string | null;
    surname?: string | null;
    providerNumber?: string | null;
    assistant?: number | null;
    co_name?: string | null;
    co_title?: string | null;
    companyname?: string | null;
    contact?: string | null;
    dateCreated?: Date | null;
    dateLastModified?: Date | null;
    datestamp?: Date | null;
    deleted?: boolean | null;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    displayname?: string | null;
    dR_ValidTo?: Date | null;
    eC_ePostCopy?: boolean | null;
    eC_ForceDischargeReferral?: boolean | null;
    eC_ManualCopy?: boolean | null;
    eC_Method?: number | null;
    eC_Username?: string | null;
    email?: string | null;
    emailrunno?: number | null;
    extDoctor_ID?: string | null;
    healthconnect?: number | null;
    hlink?: string | null;
    hlinkrunno?: number | null;
    import?: string | null;
    importdir?: string | null;
    inactive?: number | null;
    isLinkedToDoctorNumber?: boolean | null;
    notes?: string | null;
    otherallow?: string | null;
    otherlistorder?: string | null;
    othernoprintdoctor?: number | null;
    otherrequestform?: string | null;
    othertransport?: number | null;
    pagerno?: string | null;
    pathallow?: number | null;
    pathlistorder?: string | null;
    pathnoprintdoctor?: number | null;
    pathrequestform?: string | null;
    pathtransport?: number | null;
    phonea?: string | null;
    phonef?: string | null;
    phoneh?: string | null;
    phonem?: string | null;
    phonep?: string | null;
    phonew?: string | null;
    postcode?: string | null;
    postcode_2?: number | null;
    prefname?: string | null;
    privacy?: string | null;
    provno?: string | null;
    provno_stem?: string | null;
    qualification?: number | null;
    radallow?: number | null;
    radlistorder?: string | null;
    radnoprintdoctor?: number | null;
    radrequestform?: string | null;
    radtransport?: number | null;
    recentAddition?: boolean | null;
    recordmerged?: Date | null;
    regionno?: number | null;
    reqdoccode?: string | null;
    reqdocpracno?: number | null;
    reqdoctorno?: number | null;
    rptemail?: number | null;
    rptfax?: number | null;
    rptformat?: number | null;
    rpthlink?: number | null;
    rptmail?: number | null;
    rptmailnum?: number | null;
    rptpatient?: number | null;
    rptpatientnum?: number | null;
    shortname?: string | null;
    source?: string | null;
    speciality?: number | null;
    street1?: string | null;
    street1_2?: string | null;
    street2?: string | null;
    street2_2?: string | null;
    street3?: string | null;
    suburb?: string | null;
    suburb_2?: string | null;
    title?: string | null;
    usepracdelivery?: number | null;
    userCreated?: string | null;
    userLastModified?: string | null;
    userno?: number | null;
    usertf?: number | null;
}

export class AddOrUpdateReferringDoctor extends AddOrUpdateReferringDoctorParams implements IAddOrUpdateReferringDoctor {

    constructor(data?: IAddOrUpdateReferringDoctor) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateReferringDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateReferringDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateReferringDoctor extends IAddOrUpdateReferringDoctorParams {
}

export class APIResponseOfAddOrUpdateReferringDoctorResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateReferringDoctorResult {
    data?: AddOrUpdateReferringDoctorResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateReferringDoctorResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateReferringDoctorResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateReferringDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateReferringDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateReferringDoctorResult extends IProvideErrorMessage {
    data?: IAddOrUpdateReferringDoctorResult | null;
}

export class AddOrUpdateReferringDoctorResult extends ProvideErrorMessage implements IAddOrUpdateReferringDoctorResult {
    id!: number;

    constructor(data?: IAddOrUpdateReferringDoctorResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateReferringDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateReferringDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateReferringDoctorResult extends IProvideErrorMessage {
    id: number;
}

export class AddNewRequestParams extends CorrelatableRequestParams implements IAddNewRequestParams {
    patientID!: number;
    departmentID?: number | null;
    requester?: RequestingPersonInfo | null;
    clinicalNotes?: string | null;
    priority?: string | null;
    priorityReason?: string | null;
    bookingTypes?: RequestAbleBookingType[] | null;
    indications?: IndicationsInfo[] | null;
    copyTo?: CopyToDoctorInfo[] | null;

    constructor(data?: IAddNewRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patientID = data["patientID"] !== undefined ? data["patientID"] : <any>null;
            this.departmentID = data["departmentID"] !== undefined ? data["departmentID"] : <any>null;
            this.requester = data["requester"] ? RequestingPersonInfo.fromJS(data["requester"]) : <any>null;
            this.clinicalNotes = data["clinicalNotes"] !== undefined ? data["clinicalNotes"] : <any>null;
            this.priority = data["priority"] !== undefined ? data["priority"] : <any>null;
            this.priorityReason = data["priorityReason"] !== undefined ? data["priorityReason"] : <any>null;
            if (data["bookingTypes"] && data["bookingTypes"].constructor === Array) {
                this.bookingTypes = [];
                for (let item of data["bookingTypes"])
                    this.bookingTypes.push(RequestAbleBookingType.fromJS(item));
            }
            if (data["indications"] && data["indications"].constructor === Array) {
                this.indications = [];
                for (let item of data["indications"])
                    this.indications.push(IndicationsInfo.fromJS(item));
            }
            if (data["copyTo"] && data["copyTo"].constructor === Array) {
                this.copyTo = [];
                for (let item of data["copyTo"])
                    this.copyTo.push(CopyToDoctorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddNewRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientID"] = this.patientID !== undefined ? this.patientID : <any>null;
        data["departmentID"] = this.departmentID !== undefined ? this.departmentID : <any>null;
        data["requester"] = this.requester ? this.requester.toJSON() : <any>null;
        data["clinicalNotes"] = this.clinicalNotes !== undefined ? this.clinicalNotes : <any>null;
        data["priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["priorityReason"] = this.priorityReason !== undefined ? this.priorityReason : <any>null;
        if (this.bookingTypes && this.bookingTypes.constructor === Array) {
            data["bookingTypes"] = [];
            for (let item of this.bookingTypes)
                data["bookingTypes"].push(item.toJSON());
        }
        if (this.indications && this.indications.constructor === Array) {
            data["indications"] = [];
            for (let item of this.indications)
                data["indications"].push(item.toJSON());
        }
        if (this.copyTo && this.copyTo.constructor === Array) {
            data["copyTo"] = [];
            for (let item of this.copyTo)
                data["copyTo"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAddNewRequestParams extends ICorrelatableRequestParams {
    patientID: number;
    departmentID?: number | null;
    requester?: IRequestingPersonInfo | null;
    clinicalNotes?: string | null;
    priority?: string | null;
    priorityReason?: string | null;
    bookingTypes?: IRequestAbleBookingType[] | null;
    indications?: IIndicationsInfo[] | null;
    copyTo?: ICopyToDoctorInfo[] | null;
}

export class AddNewRequest extends AddNewRequestParams implements IAddNewRequest {

    constructor(data?: IAddNewRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddNewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddNewRequest extends IAddNewRequestParams {
}

export class RequestingPersonInfo implements IRequestingPersonInfo {
    userID?: string | null;
    providerNumber?: string | null;
    surname?: string | null;
    givennames?: string | null;

    constructor(data?: IRequestingPersonInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userID = data["userID"] !== undefined ? data["userID"] : <any>null;
            this.providerNumber = data["providerNumber"] !== undefined ? data["providerNumber"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.givennames = data["givennames"] !== undefined ? data["givennames"] : <any>null;
        }
    }

    static fromJS(data: any): RequestingPersonInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RequestingPersonInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID !== undefined ? this.userID : <any>null;
        data["providerNumber"] = this.providerNumber !== undefined ? this.providerNumber : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["givennames"] = this.givennames !== undefined ? this.givennames : <any>null;
        return data; 
    }
}

export interface IRequestingPersonInfo {
    userID?: string | null;
    providerNumber?: string | null;
    surname?: string | null;
    givennames?: string | null;
}

export class IndicationsInfo implements IIndicationsInfo {
    indication_ID!: number;
    severity?: string | null;

    constructor(data?: IIndicationsInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.indication_ID = data["indication_ID"] !== undefined ? data["indication_ID"] : <any>null;
            this.severity = data["severity"] !== undefined ? data["severity"] : <any>null;
        }
    }

    static fromJS(data: any): IndicationsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new IndicationsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indication_ID"] = this.indication_ID !== undefined ? this.indication_ID : <any>null;
        data["severity"] = this.severity !== undefined ? this.severity : <any>null;
        return data; 
    }
}

export interface IIndicationsInfo {
    indication_ID: number;
    severity?: string | null;
}

export class CopyToDoctorInfo implements ICopyToDoctorInfo {
    referringDoctorID!: number;
    providerNumber?: string | null;

    constructor(data?: ICopyToDoctorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referringDoctorID = data["referringDoctorID"] !== undefined ? data["referringDoctorID"] : <any>null;
            this.providerNumber = data["providerNumber"] !== undefined ? data["providerNumber"] : <any>null;
        }
    }

    static fromJS(data: any): CopyToDoctorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CopyToDoctorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referringDoctorID"] = this.referringDoctorID !== undefined ? this.referringDoctorID : <any>null;
        data["providerNumber"] = this.providerNumber !== undefined ? this.providerNumber : <any>null;
        return data; 
    }
}

export interface ICopyToDoctorInfo {
    referringDoctorID: number;
    providerNumber?: string | null;
}

export class APIResponseOfAddNewRequestResult extends ProvideErrorMessage implements IAPIResponseOfAddNewRequestResult {
    data?: AddNewRequestResult | null;

    constructor(data?: IAPIResponseOfAddNewRequestResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddNewRequestResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddNewRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddNewRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddNewRequestResult extends IProvideErrorMessage {
    data?: IAddNewRequestResult | null;
}

export class AddNewRequestResult extends ProvideErrorMessage implements IAddNewRequestResult {
    incomingOrder_ID!: number;
    bookingTriage_ID!: number;
    occasionOfService_ID!: number;

    constructor(data?: IAddNewRequestResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.incomingOrder_ID = data["incomingOrder_ID"] !== undefined ? data["incomingOrder_ID"] : <any>null;
            this.bookingTriage_ID = data["bookingTriage_ID"] !== undefined ? data["bookingTriage_ID"] : <any>null;
            this.occasionOfService_ID = data["occasionOfService_ID"] !== undefined ? data["occasionOfService_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddNewRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incomingOrder_ID"] = this.incomingOrder_ID !== undefined ? this.incomingOrder_ID : <any>null;
        data["bookingTriage_ID"] = this.bookingTriage_ID !== undefined ? this.bookingTriage_ID : <any>null;
        data["occasionOfService_ID"] = this.occasionOfService_ID !== undefined ? this.occasionOfService_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddNewRequestResult extends IProvideErrorMessage {
    incomingOrder_ID: number;
    bookingTriage_ID: number;
    occasionOfService_ID: number;
}

export class FindRequestParams extends CorrelatableRequestParams implements IFindRequestParams {
    patient_ID?: number | null;
    department_ID?: number | null;
    userCreated?: string | null;
    includeEntriesCreatedDaysAgo!: number;

    constructor(data?: IFindRequestParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.department_ID = data["department_ID"] !== undefined ? data["department_ID"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.includeEntriesCreatedDaysAgo = data["includeEntriesCreatedDaysAgo"] !== undefined ? data["includeEntriesCreatedDaysAgo"] : <any>null;
        }
    }

    static fromJS(data: any): FindRequestParams {
        data = typeof data === 'object' ? data : {};
        let result = new FindRequestParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["department_ID"] = this.department_ID !== undefined ? this.department_ID : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["includeEntriesCreatedDaysAgo"] = this.includeEntriesCreatedDaysAgo !== undefined ? this.includeEntriesCreatedDaysAgo : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFindRequestParams extends ICorrelatableRequestParams {
    patient_ID?: number | null;
    department_ID?: number | null;
    userCreated?: string | null;
    includeEntriesCreatedDaysAgo: number;
}

export class FindRequest extends FindRequestParams implements IFindRequest {

    constructor(data?: IFindRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): FindRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FindRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFindRequest extends IFindRequestParams {
}

export class APIResponseOfFindRequestResult extends ProvideErrorMessage implements IAPIResponseOfFindRequestResult {
    data?: FindRequestResult | null;

    constructor(data?: IAPIResponseOfFindRequestResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? FindRequestResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfFindRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfFindRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfFindRequestResult extends IProvideErrorMessage {
    data?: IFindRequestResult | null;
}

export class FindRequestResult extends ProvideErrorMessage implements IFindRequestResult {
    results?: TriageBookingDataItem[] | null;

    constructor(data?: IFindRequestResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["results"] && data["results"].constructor === Array) {
                this.results = [];
                for (let item of data["results"])
                    this.results.push(TriageBookingDataItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FindRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new FindRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.results && this.results.constructor === Array) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFindRequestResult extends IProvideErrorMessage {
    results?: ITriageBookingDataItem[] | null;
}

export class TriageBookingDataItem implements ITriageBookingDataItem {
    triage_ID?: number | null;
    patient?: PatientDataItem | null;
    department?: DepartmentDataItem | null;
    triageBookingNotes?: string | null;
    userCreated?: string | null;
    dateCreated!: Date;
    bookingStatus?: string | null;
    triageWorkflowStep?: string | null;

    constructor(data?: ITriageBookingDataItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.patient = data.patient && !(<any>data.patient).toJSON ? new PatientDataItem(data.patient) : <PatientDataItem>this.patient; 
            this.department = data.department && !(<any>data.department).toJSON ? new DepartmentDataItem(data.department) : <DepartmentDataItem>this.department; 
        }
    }

    init(data?: any) {
        if (data) {
            this.triage_ID = data["triage_ID"] !== undefined ? data["triage_ID"] : <any>null;
            this.patient = data["patient"] ? PatientDataItem.fromJS(data["patient"]) : <any>null;
            this.department = data["department"] ? DepartmentDataItem.fromJS(data["department"]) : <any>null;
            this.triageBookingNotes = data["triageBookingNotes"] !== undefined ? data["triageBookingNotes"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.bookingStatus = data["bookingStatus"] !== undefined ? data["bookingStatus"] : <any>null;
            this.triageWorkflowStep = data["triageWorkflowStep"] !== undefined ? data["triageWorkflowStep"] : <any>null;
        }
    }

    static fromJS(data: any): TriageBookingDataItem {
        data = typeof data === 'object' ? data : {};
        let result = new TriageBookingDataItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["triage_ID"] = this.triage_ID !== undefined ? this.triage_ID : <any>null;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>null;
        data["department"] = this.department ? this.department.toJSON() : <any>null;
        data["triageBookingNotes"] = this.triageBookingNotes !== undefined ? this.triageBookingNotes : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["bookingStatus"] = this.bookingStatus !== undefined ? this.bookingStatus : <any>null;
        data["triageWorkflowStep"] = this.triageWorkflowStep !== undefined ? this.triageWorkflowStep : <any>null;
        return data; 
    }
}

export interface ITriageBookingDataItem {
    triage_ID?: number | null;
    patient?: IPatientDataItem | null;
    department?: IDepartmentDataItem | null;
    triageBookingNotes?: string | null;
    userCreated?: string | null;
    dateCreated: Date;
    bookingStatus?: string | null;
    triageWorkflowStep?: string | null;
}

export class PatientDataItem implements IPatientDataItem {
    patient_ID!: number;
    firstName?: string | null;
    surname?: string | null;
    primaryMRN?: string | null;
    dateOfBirth?: Date | null;

    constructor(data?: IPatientDataItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.primaryMRN = data["primaryMRN"] !== undefined ? data["primaryMRN"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PatientDataItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDataItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["primaryMRN"] = this.primaryMRN !== undefined ? this.primaryMRN : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        return data; 
    }
}

export interface IPatientDataItem {
    patient_ID: number;
    firstName?: string | null;
    surname?: string | null;
    primaryMRN?: string | null;
    dateOfBirth?: Date | null;
}

export class APIResponseOfRoleDOOf extends ProvideErrorMessage implements IAPIResponseOfRoleDOOf {
    data?: RoleDO[] | null;

    constructor(data?: IAPIResponseOfRoleDOOf) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RoleDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfRoleDOOf {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRoleDOOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRoleDOOf extends IProvideErrorMessage {
    data?: IRoleDO[] | null;
}

export class GetStaffForRolesLocationsRequest implements IGetStaffForRolesLocationsRequest {
    roleNames?: string[] | null;
    locationIds?: number[] | null;

    constructor(data?: IGetStaffForRolesLocationsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["roleNames"] && data["roleNames"].constructor === Array) {
                this.roleNames = [];
                for (let item of data["roleNames"])
                    this.roleNames.push(item);
            }
            if (data["locationIds"] && data["locationIds"].constructor === Array) {
                this.locationIds = [];
                for (let item of data["locationIds"])
                    this.locationIds.push(item);
            }
        }
    }

    static fromJS(data: any): GetStaffForRolesLocationsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetStaffForRolesLocationsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.roleNames && this.roleNames.constructor === Array) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        if (this.locationIds && this.locationIds.constructor === Array) {
            data["locationIds"] = [];
            for (let item of this.locationIds)
                data["locationIds"].push(item);
        }
        return data; 
    }
}

export interface IGetStaffForRolesLocationsRequest {
    roleNames?: string[] | null;
    locationIds?: number[] | null;
}

export class APIResponseOfListOfStaffDO extends ProvideErrorMessage implements IAPIResponseOfListOfStaffDO {
    data?: StaffDO[] | null;

    constructor(data?: IAPIResponseOfListOfStaffDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(StaffDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfStaffDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfStaffDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfStaffDO extends IProvideErrorMessage {
    data?: IStaffDO[] | null;
}

export class StaffDO implements IStaffDO {
    staffId!: number;
    staffName?: string | null;
    displayColour?: string | null;
    staffRoles?: StaffRoleDO[] | null;
    rosterHours!: number;
    numSessions!: number;

    constructor(data?: IStaffDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.staffRoles) {
                this.staffRoles = [];
                for (let i = 0; i < data.staffRoles.length; i++) {
                    let item = data.staffRoles[i];
                    this.staffRoles[i] = item && !(<any>item).toJSON ? new StaffRoleDO(item) : <StaffRoleDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.staffId = data["staffId"] !== undefined ? data["staffId"] : <any>null;
            this.staffName = data["staffName"] !== undefined ? data["staffName"] : <any>null;
            this.displayColour = data["displayColour"] !== undefined ? data["displayColour"] : <any>null;
            if (data["staffRoles"] && data["staffRoles"].constructor === Array) {
                this.staffRoles = [];
                for (let item of data["staffRoles"])
                    this.staffRoles.push(StaffRoleDO.fromJS(item));
            }
            this.rosterHours = data["rosterHours"] !== undefined ? data["rosterHours"] : <any>null;
            this.numSessions = data["numSessions"] !== undefined ? data["numSessions"] : <any>null;
        }
    }

    static fromJS(data: any): StaffDO {
        data = typeof data === 'object' ? data : {};
        let result = new StaffDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["staffName"] = this.staffName !== undefined ? this.staffName : <any>null;
        data["displayColour"] = this.displayColour !== undefined ? this.displayColour : <any>null;
        if (this.staffRoles && this.staffRoles.constructor === Array) {
            data["staffRoles"] = [];
            for (let item of this.staffRoles)
                data["staffRoles"].push(item.toJSON());
        }
        data["rosterHours"] = this.rosterHours !== undefined ? this.rosterHours : <any>null;
        data["numSessions"] = this.numSessions !== undefined ? this.numSessions : <any>null;
        return data; 
    }
}

export interface IStaffDO {
    staffId: number;
    staffName?: string | null;
    displayColour?: string | null;
    staffRoles?: IStaffRoleDO[] | null;
    rosterHours: number;
    numSessions: number;
}

export class StaffRoleDO implements IStaffRoleDO {
    roleId!: number;
    roleName?: string | null;
    defaultLocation!: number;

    constructor(data?: IStaffRoleDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : <any>null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : <any>null;
            this.defaultLocation = data["defaultLocation"] !== undefined ? data["defaultLocation"] : <any>null;
        }
    }

    static fromJS(data: any): StaffRoleDO {
        data = typeof data === 'object' ? data : {};
        let result = new StaffRoleDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["defaultLocation"] = this.defaultLocation !== undefined ? this.defaultLocation : <any>null;
        return data; 
    }
}

export interface IStaffRoleDO {
    roleId: number;
    roleName?: string | null;
    defaultLocation: number;
}

export class APIResponseOfRosterTemplateInit extends ProvideErrorMessage implements IAPIResponseOfRosterTemplateInit {
    data?: RosterTemplateInit | null;

    constructor(data?: IAPIResponseOfRosterTemplateInit) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RosterTemplateInit.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRosterTemplateInit {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRosterTemplateInit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRosterTemplateInit extends IProvideErrorMessage {
    data?: IRosterTemplateInit | null;
}

export class RosterTemplateInit implements IRosterTemplateInit {
    templateSets?: RosterTemplateSetDO[] | null;
    sessions?: SessionDO[] | null;
    locationRooms?: LocationRoomDO[] | null;
    doctors?: DoctorDO[] | null;
    bookingRoles?: BookingRoleDO[] | null;
    staff?: StaffDO[] | null;

    constructor(data?: IRosterTemplateInit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.templateSets) {
                this.templateSets = [];
                for (let i = 0; i < data.templateSets.length; i++) {
                    let item = data.templateSets[i];
                    this.templateSets[i] = item && !(<any>item).toJSON ? new RosterTemplateSetDO(item) : <RosterTemplateSetDO>item;
                }
            }
            if (data.sessions) {
                this.sessions = [];
                for (let i = 0; i < data.sessions.length; i++) {
                    let item = data.sessions[i];
                    this.sessions[i] = item && !(<any>item).toJSON ? new SessionDO(item) : <SessionDO>item;
                }
            }
            if (data.locationRooms) {
                this.locationRooms = [];
                for (let i = 0; i < data.locationRooms.length; i++) {
                    let item = data.locationRooms[i];
                    this.locationRooms[i] = item && !(<any>item).toJSON ? new LocationRoomDO(item) : <LocationRoomDO>item;
                }
            }
            if (data.doctors) {
                this.doctors = [];
                for (let i = 0; i < data.doctors.length; i++) {
                    let item = data.doctors[i];
                    this.doctors[i] = item && !(<any>item).toJSON ? new DoctorDO(item) : <DoctorDO>item;
                }
            }
            if (data.bookingRoles) {
                this.bookingRoles = [];
                for (let i = 0; i < data.bookingRoles.length; i++) {
                    let item = data.bookingRoles[i];
                    this.bookingRoles[i] = item && !(<any>item).toJSON ? new BookingRoleDO(item) : <BookingRoleDO>item;
                }
            }
            if (data.staff) {
                this.staff = [];
                for (let i = 0; i < data.staff.length; i++) {
                    let item = data.staff[i];
                    this.staff[i] = item && !(<any>item).toJSON ? new StaffDO(item) : <StaffDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["templateSets"] && data["templateSets"].constructor === Array) {
                this.templateSets = [];
                for (let item of data["templateSets"])
                    this.templateSets.push(RosterTemplateSetDO.fromJS(item));
            }
            if (data["sessions"] && data["sessions"].constructor === Array) {
                this.sessions = [];
                for (let item of data["sessions"])
                    this.sessions.push(SessionDO.fromJS(item));
            }
            if (data["locationRooms"] && data["locationRooms"].constructor === Array) {
                this.locationRooms = [];
                for (let item of data["locationRooms"])
                    this.locationRooms.push(LocationRoomDO.fromJS(item));
            }
            if (data["doctors"] && data["doctors"].constructor === Array) {
                this.doctors = [];
                for (let item of data["doctors"])
                    this.doctors.push(DoctorDO.fromJS(item));
            }
            if (data["bookingRoles"] && data["bookingRoles"].constructor === Array) {
                this.bookingRoles = [];
                for (let item of data["bookingRoles"])
                    this.bookingRoles.push(BookingRoleDO.fromJS(item));
            }
            if (data["staff"] && data["staff"].constructor === Array) {
                this.staff = [];
                for (let item of data["staff"])
                    this.staff.push(StaffDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RosterTemplateInit {
        data = typeof data === 'object' ? data : {};
        let result = new RosterTemplateInit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.templateSets && this.templateSets.constructor === Array) {
            data["templateSets"] = [];
            for (let item of this.templateSets)
                data["templateSets"].push(item.toJSON());
        }
        if (this.sessions && this.sessions.constructor === Array) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(item.toJSON());
        }
        if (this.locationRooms && this.locationRooms.constructor === Array) {
            data["locationRooms"] = [];
            for (let item of this.locationRooms)
                data["locationRooms"].push(item.toJSON());
        }
        if (this.doctors && this.doctors.constructor === Array) {
            data["doctors"] = [];
            for (let item of this.doctors)
                data["doctors"].push(item.toJSON());
        }
        if (this.bookingRoles && this.bookingRoles.constructor === Array) {
            data["bookingRoles"] = [];
            for (let item of this.bookingRoles)
                data["bookingRoles"].push(item.toJSON());
        }
        if (this.staff && this.staff.constructor === Array) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRosterTemplateInit {
    templateSets?: IRosterTemplateSetDO[] | null;
    sessions?: ISessionDO[] | null;
    locationRooms?: ILocationRoomDO[] | null;
    doctors?: IDoctorDO[] | null;
    bookingRoles?: IBookingRoleDO[] | null;
    staff?: IStaffDO[] | null;
}

export class RosterTemplateSetDO implements IRosterTemplateSetDO {
    id!: number;
    templateSetName?: string | null;
    cycleLength!: number;
    weeks?: number[] | null;
    userCreated?: string | null;
    dateCreated!: Date;
    userLastModified?: string | null;
    dateLastModified!: Date;
    userLastRun?: string | null;
    dateLastRun?: Date | null;
    lastRunFrom?: Date | null;
    lastRunTo?: Date | null;

    constructor(data?: IRosterTemplateSetDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.templateSetName = data["templateSetName"] !== undefined ? data["templateSetName"] : <any>null;
            this.cycleLength = data["cycleLength"] !== undefined ? data["cycleLength"] : <any>null;
            if (data["weeks"] && data["weeks"].constructor === Array) {
                this.weeks = [];
                for (let item of data["weeks"])
                    this.weeks.push(item);
            }
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.userLastRun = data["userLastRun"] !== undefined ? data["userLastRun"] : <any>null;
            this.dateLastRun = data["dateLastRun"] ? new Date(data["dateLastRun"].toString()) : <any>null;
            this.lastRunFrom = data["lastRunFrom"] ? new Date(data["lastRunFrom"].toString()) : <any>null;
            this.lastRunTo = data["lastRunTo"] ? new Date(data["lastRunTo"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RosterTemplateSetDO {
        data = typeof data === 'object' ? data : {};
        let result = new RosterTemplateSetDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["templateSetName"] = this.templateSetName !== undefined ? this.templateSetName : <any>null;
        data["cycleLength"] = this.cycleLength !== undefined ? this.cycleLength : <any>null;
        if (this.weeks && this.weeks.constructor === Array) {
            data["weeks"] = [];
            for (let item of this.weeks)
                data["weeks"].push(item);
        }
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["userLastRun"] = this.userLastRun !== undefined ? this.userLastRun : <any>null;
        data["dateLastRun"] = this.dateLastRun ? this.dateLastRun.toISOString() : <any>null;
        data["lastRunFrom"] = this.lastRunFrom ? this.lastRunFrom.toISOString() : <any>null;
        data["lastRunTo"] = this.lastRunTo ? this.lastRunTo.toISOString() : <any>null;
        return data; 
    }
}

export interface IRosterTemplateSetDO {
    id: number;
    templateSetName?: string | null;
    cycleLength: number;
    weeks?: number[] | null;
    userCreated?: string | null;
    dateCreated: Date;
    userLastModified?: string | null;
    dateLastModified: Date;
    userLastRun?: string | null;
    dateLastRun?: Date | null;
    lastRunFrom?: Date | null;
    lastRunTo?: Date | null;
}

export class SessionDO implements ISessionDO {
    sessionId!: number;
    startHour!: number;
    startMinutes!: number;
    endHour!: number;
    endMinutes!: number;
    displayName?: string | null;

    constructor(data?: ISessionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sessionId = data["sessionId"] !== undefined ? data["sessionId"] : <any>null;
            this.startHour = data["startHour"] !== undefined ? data["startHour"] : <any>null;
            this.startMinutes = data["startMinutes"] !== undefined ? data["startMinutes"] : <any>null;
            this.endHour = data["endHour"] !== undefined ? data["endHour"] : <any>null;
            this.endMinutes = data["endMinutes"] !== undefined ? data["endMinutes"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
        }
    }

    static fromJS(data: any): SessionDO {
        data = typeof data === 'object' ? data : {};
        let result = new SessionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["startHour"] = this.startHour !== undefined ? this.startHour : <any>null;
        data["startMinutes"] = this.startMinutes !== undefined ? this.startMinutes : <any>null;
        data["endHour"] = this.endHour !== undefined ? this.endHour : <any>null;
        data["endMinutes"] = this.endMinutes !== undefined ? this.endMinutes : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        return data; 
    }
}

export interface ISessionDO {
    sessionId: number;
    startHour: number;
    startMinutes: number;
    endHour: number;
    endMinutes: number;
    displayName?: string | null;
}

export class BookingRoleDO implements IBookingRoleDO {
    staffNumber!: number;
    roleId!: number;
    displayName?: string | null;
    staff?: StaffDO[] | null;

    constructor(data?: IBookingRoleDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.staff) {
                this.staff = [];
                for (let i = 0; i < data.staff.length; i++) {
                    let item = data.staff[i];
                    this.staff[i] = item && !(<any>item).toJSON ? new StaffDO(item) : <StaffDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.staffNumber = data["staffNumber"] !== undefined ? data["staffNumber"] : <any>null;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            if (data["staff"] && data["staff"].constructor === Array) {
                this.staff = [];
                for (let item of data["staff"])
                    this.staff.push(StaffDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingRoleDO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingRoleDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffNumber"] = this.staffNumber !== undefined ? this.staffNumber : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        if (this.staff && this.staff.constructor === Array) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBookingRoleDO {
    staffNumber: number;
    roleId: number;
    displayName?: string | null;
    staff?: IStaffDO[] | null;
}

export class APIResponseOfListOfRosterTemplateDO extends ProvideErrorMessage implements IAPIResponseOfListOfRosterTemplateDO {
    data?: RosterTemplateDO[] | null;

    constructor(data?: IAPIResponseOfListOfRosterTemplateDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(RosterTemplateDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfRosterTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfRosterTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfRosterTemplateDO extends IProvideErrorMessage {
    data?: IRosterTemplateDO[] | null;
}

export class RosterTemplateDO implements IRosterTemplateDO {
    templateId!: number;
    doctorId?: number | null;
    staffId?: number | null;
    roleId?: number | null;
    roleName?: string | null;
    isDoctor!: boolean;
    staffName?: string | null;
    locationId!: number;
    roomId!: number;
    locationRoomName?: string | null;
    startDate!: Date;
    endDate!: Date;
    trueStartDate!: Date;
    trueEndDate!: Date;
    sessionId!: number;
    deleted!: boolean;
    edited!: boolean;
    newId?: number | null;

    constructor(data?: IRosterTemplateDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.templateId = data["templateId"] !== undefined ? data["templateId"] : <any>null;
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.staffId = data["staffId"] !== undefined ? data["staffId"] : <any>null;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : <any>null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : <any>null;
            this.isDoctor = data["isDoctor"] !== undefined ? data["isDoctor"] : <any>null;
            this.staffName = data["staffName"] !== undefined ? data["staffName"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.roomId = data["roomId"] !== undefined ? data["roomId"] : <any>null;
            this.locationRoomName = data["locationRoomName"] !== undefined ? data["locationRoomName"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.trueStartDate = data["trueStartDate"] ? new Date(data["trueStartDate"].toString()) : <any>null;
            this.trueEndDate = data["trueEndDate"] ? new Date(data["trueEndDate"].toString()) : <any>null;
            this.sessionId = data["sessionId"] !== undefined ? data["sessionId"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.edited = data["edited"] !== undefined ? data["edited"] : <any>null;
            this.newId = data["newId"] !== undefined ? data["newId"] : <any>null;
        }
    }

    static fromJS(data: any): RosterTemplateDO {
        data = typeof data === 'object' ? data : {};
        let result = new RosterTemplateDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId !== undefined ? this.templateId : <any>null;
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["isDoctor"] = this.isDoctor !== undefined ? this.isDoctor : <any>null;
        data["staffName"] = this.staffName !== undefined ? this.staffName : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["locationRoomName"] = this.locationRoomName !== undefined ? this.locationRoomName : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["trueStartDate"] = this.trueStartDate ? this.trueStartDate.toISOString() : <any>null;
        data["trueEndDate"] = this.trueEndDate ? this.trueEndDate.toISOString() : <any>null;
        data["sessionId"] = this.sessionId !== undefined ? this.sessionId : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["edited"] = this.edited !== undefined ? this.edited : <any>null;
        data["newId"] = this.newId !== undefined ? this.newId : <any>null;
        return data; 
    }
}

export interface IRosterTemplateDO {
    templateId: number;
    doctorId?: number | null;
    staffId?: number | null;
    roleId?: number | null;
    roleName?: string | null;
    isDoctor: boolean;
    staffName?: string | null;
    locationId: number;
    roomId: number;
    locationRoomName?: string | null;
    startDate: Date;
    endDate: Date;
    trueStartDate: Date;
    trueEndDate: Date;
    sessionId: number;
    deleted: boolean;
    edited: boolean;
    newId?: number | null;
}

export class APIResponseOfRosterTemplateSetDO extends ProvideErrorMessage implements IAPIResponseOfRosterTemplateSetDO {
    data?: RosterTemplateSetDO | null;

    constructor(data?: IAPIResponseOfRosterTemplateSetDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RosterTemplateSetDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRosterTemplateSetDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRosterTemplateSetDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRosterTemplateSetDO extends IProvideErrorMessage {
    data?: IRosterTemplateSetDO | null;
}

export class RosterTemplatesSaveRequest implements IRosterTemplatesSaveRequest {
    templates?: RosterTemplateDO[] | null;
    deletedTemplates?: RosterTemplateDO[] | null;
    userPkId!: string;
    templateSetId!: number;
    sessions?: SessionDO[] | null;

    constructor(data?: IRosterTemplatesSaveRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.templates) {
                this.templates = [];
                for (let i = 0; i < data.templates.length; i++) {
                    let item = data.templates[i];
                    this.templates[i] = item && !(<any>item).toJSON ? new RosterTemplateDO(item) : <RosterTemplateDO>item;
                }
            }
            if (data.deletedTemplates) {
                this.deletedTemplates = [];
                for (let i = 0; i < data.deletedTemplates.length; i++) {
                    let item = data.deletedTemplates[i];
                    this.deletedTemplates[i] = item && !(<any>item).toJSON ? new RosterTemplateDO(item) : <RosterTemplateDO>item;
                }
            }
            if (data.sessions) {
                this.sessions = [];
                for (let i = 0; i < data.sessions.length; i++) {
                    let item = data.sessions[i];
                    this.sessions[i] = item && !(<any>item).toJSON ? new SessionDO(item) : <SessionDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["templates"] && data["templates"].constructor === Array) {
                this.templates = [];
                for (let item of data["templates"])
                    this.templates.push(RosterTemplateDO.fromJS(item));
            }
            if (data["deletedTemplates"] && data["deletedTemplates"].constructor === Array) {
                this.deletedTemplates = [];
                for (let item of data["deletedTemplates"])
                    this.deletedTemplates.push(RosterTemplateDO.fromJS(item));
            }
            this.userPkId = data["userPkId"] !== undefined ? data["userPkId"] : <any>null;
            this.templateSetId = data["templateSetId"] !== undefined ? data["templateSetId"] : <any>null;
            if (data["sessions"] && data["sessions"].constructor === Array) {
                this.sessions = [];
                for (let item of data["sessions"])
                    this.sessions.push(SessionDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RosterTemplatesSaveRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RosterTemplatesSaveRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.templates && this.templates.constructor === Array) {
            data["templates"] = [];
            for (let item of this.templates)
                data["templates"].push(item.toJSON());
        }
        if (this.deletedTemplates && this.deletedTemplates.constructor === Array) {
            data["deletedTemplates"] = [];
            for (let item of this.deletedTemplates)
                data["deletedTemplates"].push(item.toJSON());
        }
        data["userPkId"] = this.userPkId !== undefined ? this.userPkId : <any>null;
        data["templateSetId"] = this.templateSetId !== undefined ? this.templateSetId : <any>null;
        if (this.sessions && this.sessions.constructor === Array) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRosterTemplatesSaveRequest {
    templates?: IRosterTemplateDO[] | null;
    deletedTemplates?: IRosterTemplateDO[] | null;
    userPkId: string;
    templateSetId: number;
    sessions?: ISessionDO[] | null;
}

export class APIResponseOfRosterTemplatesSaveResult extends ProvideErrorMessage implements IAPIResponseOfRosterTemplatesSaveResult {
    data?: RosterTemplatesSaveResult | null;

    constructor(data?: IAPIResponseOfRosterTemplatesSaveResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RosterTemplatesSaveResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRosterTemplatesSaveResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRosterTemplatesSaveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRosterTemplatesSaveResult extends IProvideErrorMessage {
    data?: IRosterTemplatesSaveResult | null;
}

export class RosterTemplatesSaveResult implements IRosterTemplatesSaveResult {
    rosterTemplateSet?: RosterTemplateSetDO | null;

    constructor(data?: IRosterTemplatesSaveResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.rosterTemplateSet = data.rosterTemplateSet && !(<any>data.rosterTemplateSet).toJSON ? new RosterTemplateSetDO(data.rosterTemplateSet) : <RosterTemplateSetDO>this.rosterTemplateSet; 
        }
    }

    init(data?: any) {
        if (data) {
            this.rosterTemplateSet = data["rosterTemplateSet"] ? RosterTemplateSetDO.fromJS(data["rosterTemplateSet"]) : <any>null;
        }
    }

    static fromJS(data: any): RosterTemplatesSaveResult {
        data = typeof data === 'object' ? data : {};
        let result = new RosterTemplatesSaveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterTemplateSet"] = this.rosterTemplateSet ? this.rosterTemplateSet.toJSON() : <any>null;
        return data; 
    }
}

export interface IRosterTemplatesSaveResult {
    rosterTemplateSet?: IRosterTemplateSetDO | null;
}

export class APIResponseOfRosterBookingDO extends ProvideErrorMessage implements IAPIResponseOfRosterBookingDO {
    data?: RosterBookingDO | null;

    constructor(data?: IAPIResponseOfRosterBookingDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RosterBookingDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRosterBookingDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRosterBookingDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRosterBookingDO extends IProvideErrorMessage {
    data?: IRosterBookingDO | null;
}

export class RosterBookingDO implements IRosterBookingDO {
    roster_ID!: number;
    startTime!: Date;
    endTime!: Date;
    duration!: number;
    location?: string | null;
    room?: string | null;
    doctor?: string | null;
    staff?: string[] | null;

    constructor(data?: IRosterBookingDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roster_ID = data["roster_ID"] !== undefined ? data["roster_ID"] : <any>null;
            this.startTime = data["startTime"] ? new Date(data["startTime"].toString()) : <any>null;
            this.endTime = data["endTime"] ? new Date(data["endTime"].toString()) : <any>null;
            this.duration = data["duration"] !== undefined ? data["duration"] : <any>null;
            this.location = data["location"] !== undefined ? data["location"] : <any>null;
            this.room = data["room"] !== undefined ? data["room"] : <any>null;
            this.doctor = data["doctor"] !== undefined ? data["doctor"] : <any>null;
            if (data["staff"] && data["staff"].constructor === Array) {
                this.staff = [];
                for (let item of data["staff"])
                    this.staff.push(item);
            }
        }
    }

    static fromJS(data: any): RosterBookingDO {
        data = typeof data === 'object' ? data : {};
        let result = new RosterBookingDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roster_ID"] = this.roster_ID !== undefined ? this.roster_ID : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        data["doctor"] = this.doctor !== undefined ? this.doctor : <any>null;
        if (this.staff && this.staff.constructor === Array) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item);
        }
        return data; 
    }
}

export interface IRosterBookingDO {
    roster_ID: number;
    startTime: Date;
    endTime: Date;
    duration: number;
    location?: string | null;
    room?: string | null;
    doctor?: string | null;
    staff?: string[] | null;
}

export class RetrieveDataForTokenRequest extends CorrelatableRequestParams implements IRetrieveDataForTokenRequest {
    token?: string | null;

    constructor(data?: IRetrieveDataForTokenRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataForTokenRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataForTokenRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRetrieveDataForTokenRequest extends ICorrelatableRequestParams {
    token?: string | null;
}

export class RetrieveDataForToken extends RetrieveDataForTokenRequest implements IRetrieveDataForToken {

    constructor(data?: IRetrieveDataForToken) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): RetrieveDataForToken {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataForToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IRetrieveDataForToken extends IRetrieveDataForTokenRequest {
}

export class APIResponseOfRetrieveDataForTokenResult extends ProvideErrorMessage implements IAPIResponseOfRetrieveDataForTokenResult {
    data?: RetrieveDataForTokenResult | null;

    constructor(data?: IAPIResponseOfRetrieveDataForTokenResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? RetrieveDataForTokenResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfRetrieveDataForTokenResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfRetrieveDataForTokenResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfRetrieveDataForTokenResult extends IProvideErrorMessage {
    data?: IRetrieveDataForTokenResult | null;
}

export class RetrieveDataForTokenResult extends ProvideErrorMessage implements IRetrieveDataForTokenResult {
    sessionQueueName?: string | null;
    username?: string | null;
    lastBillingLocation!: number;
    userPkId!: string;
    licenseUserId!: number;
    roleId!: number;
    doctorId!: number;
    doctorDisplayName?: string | null;
    userDashboardId!: number;
    userDisplayName?: string | null;
    stompDetails?: StompDetails | null;
    baseHealthTrackApiUrl?: string | null;
    inAdminMode!: boolean;

    constructor(data?: IRetrieveDataForTokenResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.sessionQueueName = data["sessionQueueName"] !== undefined ? data["sessionQueueName"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.lastBillingLocation = data["lastBillingLocation"] !== undefined ? data["lastBillingLocation"] : <any>null;
            this.userPkId = data["userPkId"] !== undefined ? data["userPkId"] : <any>null;
            this.licenseUserId = data["licenseUserId"] !== undefined ? data["licenseUserId"] : <any>null;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : <any>null;
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
            this.doctorDisplayName = data["doctorDisplayName"] !== undefined ? data["doctorDisplayName"] : <any>null;
            this.userDashboardId = data["userDashboardId"] !== undefined ? data["userDashboardId"] : <any>null;
            this.userDisplayName = data["userDisplayName"] !== undefined ? data["userDisplayName"] : <any>null;
            this.stompDetails = data["stompDetails"] ? StompDetails.fromJS(data["stompDetails"]) : <any>null;
            this.baseHealthTrackApiUrl = data["baseHealthTrackApiUrl"] !== undefined ? data["baseHealthTrackApiUrl"] : <any>null;
            this.inAdminMode = data["inAdminMode"] !== undefined ? data["inAdminMode"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataForTokenResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataForTokenResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionQueueName"] = this.sessionQueueName !== undefined ? this.sessionQueueName : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["lastBillingLocation"] = this.lastBillingLocation !== undefined ? this.lastBillingLocation : <any>null;
        data["userPkId"] = this.userPkId !== undefined ? this.userPkId : <any>null;
        data["licenseUserId"] = this.licenseUserId !== undefined ? this.licenseUserId : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        data["doctorDisplayName"] = this.doctorDisplayName !== undefined ? this.doctorDisplayName : <any>null;
        data["userDashboardId"] = this.userDashboardId !== undefined ? this.userDashboardId : <any>null;
        data["userDisplayName"] = this.userDisplayName !== undefined ? this.userDisplayName : <any>null;
        data["stompDetails"] = this.stompDetails ? this.stompDetails.toJSON() : <any>null;
        data["baseHealthTrackApiUrl"] = this.baseHealthTrackApiUrl !== undefined ? this.baseHealthTrackApiUrl : <any>null;
        data["inAdminMode"] = this.inAdminMode !== undefined ? this.inAdminMode : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRetrieveDataForTokenResult extends IProvideErrorMessage {
    sessionQueueName?: string | null;
    username?: string | null;
    lastBillingLocation: number;
    userPkId: string;
    licenseUserId: number;
    roleId: number;
    doctorId: number;
    doctorDisplayName?: string | null;
    userDashboardId: number;
    userDisplayName?: string | null;
    stompDetails?: IStompDetails | null;
    baseHealthTrackApiUrl?: string | null;
    inAdminMode: boolean;
}

export class StompDetails implements IStompDetails {
    url?: string | null;
    user?: string | null;
    password?: string | null;
    vHost?: string | null;

    constructor(data?: IStompDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.user = data["user"] !== undefined ? data["user"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.vHost = data["vHost"] !== undefined ? data["vHost"] : <any>null;
        }
    }

    static fromJS(data: any): StompDetails {
        data = typeof data === 'object' ? data : {};
        let result = new StompDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["user"] = this.user !== undefined ? this.user : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["vHost"] = this.vHost !== undefined ? this.vHost : <any>null;
        return data; 
    }
}

export interface IStompDetails {
    url?: string | null;
    user?: string | null;
    password?: string | null;
    vHost?: string | null;
}

export class AddOrUpdateTaskParams extends BaseRequestParams implements IAddOrUpdateTaskParams {
    task_ID?: number | null;
    assignedTo?: string | null;
    booking_ID?: number | null;
    comments?: string | null;
    company_ID?: number | null;
    completeBy?: string | null;
    completeDate?: Date | null;
    createdBy?: string | null;
    creationDate?: Date | null;
    delegatedTo?: string | null;
    deleted!: boolean;
    deletionDate?: Date | null;
    deletionNote?: number | null;
    deletionReason?: number | null;
    deletionUser?: string | null;
    description?: string | null;
    dueDate?: Date | null;
    inProgressBy?: string | null;
    inProgressDate?: Date | null;
    lastAssignedTo?: string | null;
    meta_ID?: number | null;
    mR_ID?: number | null;
    name?: string | null;
    originator_ID?: number | null;
    patient_ID?: number | null;
    perscription_ID?: number | null;
    priority?: number | null;
    referral_ID?: number | null;
    startDate?: Date | null;
    status?: number | null;
    taskType_ID?: number | null;

    constructor(data?: IAddOrUpdateTaskParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.task_ID = data["task_ID"] !== undefined ? data["task_ID"] : <any>null;
            this.assignedTo = data["assignedTo"] !== undefined ? data["assignedTo"] : <any>null;
            this.booking_ID = data["booking_ID"] !== undefined ? data["booking_ID"] : <any>null;
            this.comments = data["comments"] !== undefined ? data["comments"] : <any>null;
            this.company_ID = data["company_ID"] !== undefined ? data["company_ID"] : <any>null;
            this.completeBy = data["completeBy"] !== undefined ? data["completeBy"] : <any>null;
            this.completeDate = data["completeDate"] ? new Date(data["completeDate"].toString()) : <any>null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : <any>null;
            this.creationDate = data["creationDate"] ? new Date(data["creationDate"].toString()) : <any>null;
            this.delegatedTo = data["delegatedTo"] !== undefined ? data["delegatedTo"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionNote = data["deletionNote"] !== undefined ? data["deletionNote"] : <any>null;
            this.deletionReason = data["deletionReason"] !== undefined ? data["deletionReason"] : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>null;
            this.inProgressBy = data["inProgressBy"] !== undefined ? data["inProgressBy"] : <any>null;
            this.inProgressDate = data["inProgressDate"] ? new Date(data["inProgressDate"].toString()) : <any>null;
            this.lastAssignedTo = data["lastAssignedTo"] !== undefined ? data["lastAssignedTo"] : <any>null;
            this.meta_ID = data["meta_ID"] !== undefined ? data["meta_ID"] : <any>null;
            this.mR_ID = data["mR_ID"] !== undefined ? data["mR_ID"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.originator_ID = data["originator_ID"] !== undefined ? data["originator_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.perscription_ID = data["perscription_ID"] !== undefined ? data["perscription_ID"] : <any>null;
            this.priority = data["priority"] !== undefined ? data["priority"] : <any>null;
            this.referral_ID = data["referral_ID"] !== undefined ? data["referral_ID"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.taskType_ID = data["taskType_ID"] !== undefined ? data["taskType_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateTaskParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTaskParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["task_ID"] = this.task_ID !== undefined ? this.task_ID : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["booking_ID"] = this.booking_ID !== undefined ? this.booking_ID : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["company_ID"] = this.company_ID !== undefined ? this.company_ID : <any>null;
        data["completeBy"] = this.completeBy !== undefined ? this.completeBy : <any>null;
        data["completeDate"] = this.completeDate ? this.completeDate.toISOString() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["delegatedTo"] = this.delegatedTo !== undefined ? this.delegatedTo : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionNote"] = this.deletionNote !== undefined ? this.deletionNote : <any>null;
        data["deletionReason"] = this.deletionReason !== undefined ? this.deletionReason : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
        data["inProgressBy"] = this.inProgressBy !== undefined ? this.inProgressBy : <any>null;
        data["inProgressDate"] = this.inProgressDate ? this.inProgressDate.toISOString() : <any>null;
        data["lastAssignedTo"] = this.lastAssignedTo !== undefined ? this.lastAssignedTo : <any>null;
        data["meta_ID"] = this.meta_ID !== undefined ? this.meta_ID : <any>null;
        data["mR_ID"] = this.mR_ID !== undefined ? this.mR_ID : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["originator_ID"] = this.originator_ID !== undefined ? this.originator_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["perscription_ID"] = this.perscription_ID !== undefined ? this.perscription_ID : <any>null;
        data["priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["referral_ID"] = this.referral_ID !== undefined ? this.referral_ID : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["taskType_ID"] = this.taskType_ID !== undefined ? this.taskType_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTaskParams extends IBaseRequestParams {
    task_ID?: number | null;
    assignedTo?: string | null;
    booking_ID?: number | null;
    comments?: string | null;
    company_ID?: number | null;
    completeBy?: string | null;
    completeDate?: Date | null;
    createdBy?: string | null;
    creationDate?: Date | null;
    delegatedTo?: string | null;
    deleted: boolean;
    deletionDate?: Date | null;
    deletionNote?: number | null;
    deletionReason?: number | null;
    deletionUser?: string | null;
    description?: string | null;
    dueDate?: Date | null;
    inProgressBy?: string | null;
    inProgressDate?: Date | null;
    lastAssignedTo?: string | null;
    meta_ID?: number | null;
    mR_ID?: number | null;
    name?: string | null;
    originator_ID?: number | null;
    patient_ID?: number | null;
    perscription_ID?: number | null;
    priority?: number | null;
    referral_ID?: number | null;
    startDate?: Date | null;
    status?: number | null;
    taskType_ID?: number | null;
}

export class AddOrUpdateTask extends AddOrUpdateTaskParams implements IAddOrUpdateTask {

    constructor(data?: IAddOrUpdateTask) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateTask {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTask extends IAddOrUpdateTaskParams {
}

export class APIResponseOfAddOrUpdateTaskResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateTaskResult {
    data?: AddOrUpdateTaskResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateTaskResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateTaskResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateTaskResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateTaskResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateTaskResult extends IProvideErrorMessage {
    data?: IAddOrUpdateTaskResult | null;
}

export class AddOrUpdateTaskResult extends ProvideErrorMessage implements IAddOrUpdateTaskResult {
    task_ID!: number;

    constructor(data?: IAddOrUpdateTaskResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.task_ID = data["task_ID"] !== undefined ? data["task_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateTaskResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTaskResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["task_ID"] = this.task_ID !== undefined ? this.task_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTaskResult extends IProvideErrorMessage {
    task_ID: number;
}

export class APIResponseOfTriageBookingDO extends ProvideErrorMessage implements IAPIResponseOfTriageBookingDO {
    data?: TriageBookingDO | null;

    constructor(data?: IAPIResponseOfTriageBookingDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? TriageBookingDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfTriageBookingDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfTriageBookingDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfTriageBookingDO extends IProvideErrorMessage {
    data?: ITriageBookingDO | null;
}

export class TriageBookingDO implements ITriageBookingDO {
    patientId!: number;
    workflowStep?: string | null;
    locationId?: number | null;
    purposes?: BookingTypeDO[] | null;
    options?: TriageOptionDO[] | null;
    notes?: string | null;
    referral?: TriageReferralDO | null;
    bookedDoctorId?: number | null;
    associateId?: number | null;
    bookingDate!: Date;
    purpose?: string | null;
    appointments?: TriageBookingAppointmentDO[] | null;

    constructor(data?: ITriageBookingDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.purposes) {
                this.purposes = [];
                for (let i = 0; i < data.purposes.length; i++) {
                    let item = data.purposes[i];
                    this.purposes[i] = item && !(<any>item).toJSON ? new BookingTypeDO(item) : <BookingTypeDO>item;
                }
            }
            if (data.options) {
                this.options = [];
                for (let i = 0; i < data.options.length; i++) {
                    let item = data.options[i];
                    this.options[i] = item && !(<any>item).toJSON ? new TriageOptionDO(item) : <TriageOptionDO>item;
                }
            }
            this.referral = data.referral && !(<any>data.referral).toJSON ? new TriageReferralDO(data.referral) : <TriageReferralDO>this.referral; 
            if (data.appointments) {
                this.appointments = [];
                for (let i = 0; i < data.appointments.length; i++) {
                    let item = data.appointments[i];
                    this.appointments[i] = item && !(<any>item).toJSON ? new TriageBookingAppointmentDO(item) : <TriageBookingAppointmentDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.workflowStep = data["workflowStep"] !== undefined ? data["workflowStep"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            if (data["purposes"] && data["purposes"].constructor === Array) {
                this.purposes = [];
                for (let item of data["purposes"])
                    this.purposes.push(BookingTypeDO.fromJS(item));
            }
            if (data["options"] && data["options"].constructor === Array) {
                this.options = [];
                for (let item of data["options"])
                    this.options.push(TriageOptionDO.fromJS(item));
            }
            this.notes = data["notes"] !== undefined ? data["notes"] : <any>null;
            this.referral = data["referral"] ? TriageReferralDO.fromJS(data["referral"]) : <any>null;
            this.bookedDoctorId = data["bookedDoctorId"] !== undefined ? data["bookedDoctorId"] : <any>null;
            this.associateId = data["associateId"] !== undefined ? data["associateId"] : <any>null;
            this.bookingDate = data["bookingDate"] ? new Date(data["bookingDate"].toString()) : <any>null;
            this.purpose = data["purpose"] !== undefined ? data["purpose"] : <any>null;
            if (data["appointments"] && data["appointments"].constructor === Array) {
                this.appointments = [];
                for (let item of data["appointments"])
                    this.appointments.push(TriageBookingAppointmentDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TriageBookingDO {
        data = typeof data === 'object' ? data : {};
        let result = new TriageBookingDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["workflowStep"] = this.workflowStep !== undefined ? this.workflowStep : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        if (this.purposes && this.purposes.constructor === Array) {
            data["purposes"] = [];
            for (let item of this.purposes)
                data["purposes"].push(item.toJSON());
        }
        if (this.options && this.options.constructor === Array) {
            data["options"] = [];
            for (let item of this.options)
                data["options"].push(item.toJSON());
        }
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["referral"] = this.referral ? this.referral.toJSON() : <any>null;
        data["bookedDoctorId"] = this.bookedDoctorId !== undefined ? this.bookedDoctorId : <any>null;
        data["associateId"] = this.associateId !== undefined ? this.associateId : <any>null;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>null;
        data["purpose"] = this.purpose !== undefined ? this.purpose : <any>null;
        if (this.appointments && this.appointments.constructor === Array) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITriageBookingDO {
    patientId: number;
    workflowStep?: string | null;
    locationId?: number | null;
    purposes?: IBookingTypeDO[] | null;
    options?: ITriageOptionDO[] | null;
    notes?: string | null;
    referral?: ITriageReferralDO | null;
    bookedDoctorId?: number | null;
    associateId?: number | null;
    bookingDate: Date;
    purpose?: string | null;
    appointments?: ITriageBookingAppointmentDO[] | null;
}

export class BookingTypeDO implements IBookingTypeDO {
    display?: string | null;
    bookingCode?: string | null;

    constructor(data?: IBookingTypeDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.display = data["display"] !== undefined ? data["display"] : <any>null;
            this.bookingCode = data["bookingCode"] !== undefined ? data["bookingCode"] : <any>null;
        }
    }

    static fromJS(data: any): BookingTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["display"] = this.display !== undefined ? this.display : <any>null;
        data["bookingCode"] = this.bookingCode !== undefined ? this.bookingCode : <any>null;
        return data; 
    }
}

export interface IBookingTypeDO {
    display?: string | null;
    bookingCode?: string | null;
}

export class TriageOptionDO implements ITriageOptionDO {
    name?: string | null;
    index!: number;
    weight!: number;

    constructor(data?: ITriageOptionDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.index = data["index"] !== undefined ? data["index"] : <any>null;
            this.weight = data["weight"] !== undefined ? data["weight"] : <any>null;
        }
    }

    static fromJS(data: any): TriageOptionDO {
        data = typeof data === 'object' ? data : {};
        let result = new TriageOptionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        return data; 
    }
}

export interface ITriageOptionDO {
    name?: string | null;
    index: number;
    weight: number;
}

export class TriageReferralDO implements ITriageReferralDO {
    patientId!: number;
    fromDate!: Date;
    toDate!: Date;
    referringDoctor?: DoctorDO | null;
    referralId!: number;
    purpose?: string | null;
    typeCode?: string | null;
    type?: string | null;

    constructor(data?: ITriageReferralDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.referringDoctor = data.referringDoctor && !(<any>data.referringDoctor).toJSON ? new DoctorDO(data.referringDoctor) : <DoctorDO>this.referringDoctor; 
        }
    }

    init(data?: any) {
        if (data) {
            this.patientId = data["patientId"] !== undefined ? data["patientId"] : <any>null;
            this.fromDate = data["fromDate"] ? new Date(data["fromDate"].toString()) : <any>null;
            this.toDate = data["toDate"] ? new Date(data["toDate"].toString()) : <any>null;
            this.referringDoctor = data["referringDoctor"] ? DoctorDO.fromJS(data["referringDoctor"]) : <any>null;
            this.referralId = data["referralId"] !== undefined ? data["referralId"] : <any>null;
            this.purpose = data["purpose"] !== undefined ? data["purpose"] : <any>null;
            this.typeCode = data["typeCode"] !== undefined ? data["typeCode"] : <any>null;
            this.type = data["type"] !== undefined ? data["type"] : <any>null;
        }
    }

    static fromJS(data: any): TriageReferralDO {
        data = typeof data === 'object' ? data : {};
        let result = new TriageReferralDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId !== undefined ? this.patientId : <any>null;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["referringDoctor"] = this.referringDoctor ? this.referringDoctor.toJSON() : <any>null;
        data["referralId"] = this.referralId !== undefined ? this.referralId : <any>null;
        data["purpose"] = this.purpose !== undefined ? this.purpose : <any>null;
        data["typeCode"] = this.typeCode !== undefined ? this.typeCode : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface ITriageReferralDO {
    patientId: number;
    fromDate: Date;
    toDate: Date;
    referringDoctor?: IDoctorDO | null;
    referralId: number;
    purpose?: string | null;
    typeCode?: string | null;
    type?: string | null;
}

export class TriageBookingAppointmentDO implements ITriageBookingAppointmentDO {
    appointmentId!: number;
    triageBookingId!: number;
    locationId!: number;
    startDate!: Date;
    endDate!: Date;
    bookingType?: string | null;
    doctorId!: number;

    constructor(data?: ITriageBookingAppointmentDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.appointmentId = data["appointmentId"] !== undefined ? data["appointmentId"] : <any>null;
            this.triageBookingId = data["triageBookingId"] !== undefined ? data["triageBookingId"] : <any>null;
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
            this.doctorId = data["doctorId"] !== undefined ? data["doctorId"] : <any>null;
        }
    }

    static fromJS(data: any): TriageBookingAppointmentDO {
        data = typeof data === 'object' ? data : {};
        let result = new TriageBookingAppointmentDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appointmentId"] = this.appointmentId !== undefined ? this.appointmentId : <any>null;
        data["triageBookingId"] = this.triageBookingId !== undefined ? this.triageBookingId : <any>null;
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        data["doctorId"] = this.doctorId !== undefined ? this.doctorId : <any>null;
        return data; 
    }
}

export interface ITriageBookingAppointmentDO {
    appointmentId: number;
    triageBookingId: number;
    locationId: number;
    startDate: Date;
    endDate: Date;
    bookingType?: string | null;
    doctorId: number;
}

export class APIResponseOfListOfBookingTypeDO extends ProvideErrorMessage implements IAPIResponseOfListOfBookingTypeDO {
    data?: BookingTypeDO[] | null;

    constructor(data?: IAPIResponseOfListOfBookingTypeDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(BookingTypeDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfBookingTypeDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfBookingTypeDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfBookingTypeDO extends IProvideErrorMessage {
    data?: IBookingTypeDO[] | null;
}

export class APIResponseOfListOfTriageOptionDO extends ProvideErrorMessage implements IAPIResponseOfListOfTriageOptionDO {
    data?: TriageOptionDO[] | null;

    constructor(data?: IAPIResponseOfListOfTriageOptionDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(TriageOptionDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfTriageOptionDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfTriageOptionDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfTriageOptionDO extends IProvideErrorMessage {
    data?: ITriageOptionDO[] | null;
}

export class APIResponseOfListOfTriageReferralDO extends ProvideErrorMessage implements IAPIResponseOfListOfTriageReferralDO {
    data?: TriageReferralDO[] | null;

    constructor(data?: IAPIResponseOfListOfTriageReferralDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(TriageReferralDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfTriageReferralDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfTriageReferralDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfTriageReferralDO extends IProvideErrorMessage {
    data?: ITriageReferralDO[] | null;
}

export class APIResponseOfListOfLocationWithDoctors extends ProvideErrorMessage implements IAPIResponseOfListOfLocationWithDoctors {
    data?: LocationWithDoctors[] | null;

    constructor(data?: IAPIResponseOfListOfLocationWithDoctors) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [];
                for (let item of data["data"])
                    this.data.push(LocationWithDoctors.fromJS(item));
            }
        }
    }

    static fromJS(data: any): APIResponseOfListOfLocationWithDoctors {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfListOfLocationWithDoctors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfListOfLocationWithDoctors extends IProvideErrorMessage {
    data?: ILocationWithDoctors[] | null;
}

export class LocationWithDoctors implements ILocationWithDoctors {
    locationId!: number;
    locationName?: string | null;
    locationDoctors?: DoctorDO[] | null;

    constructor(data?: ILocationWithDoctors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.locationDoctors) {
                this.locationDoctors = [];
                for (let i = 0; i < data.locationDoctors.length; i++) {
                    let item = data.locationDoctors[i];
                    this.locationDoctors[i] = item && !(<any>item).toJSON ? new DoctorDO(item) : <DoctorDO>item;
                }
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.locationId = data["locationId"] !== undefined ? data["locationId"] : <any>null;
            this.locationName = data["locationName"] !== undefined ? data["locationName"] : <any>null;
            if (data["locationDoctors"] && data["locationDoctors"].constructor === Array) {
                this.locationDoctors = [];
                for (let item of data["locationDoctors"])
                    this.locationDoctors.push(DoctorDO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocationWithDoctors {
        data = typeof data === 'object' ? data : {};
        let result = new LocationWithDoctors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locationId"] = this.locationId !== undefined ? this.locationId : <any>null;
        data["locationName"] = this.locationName !== undefined ? this.locationName : <any>null;
        if (this.locationDoctors && this.locationDoctors.constructor === Array) {
            data["locationDoctors"] = [];
            for (let item of this.locationDoctors)
                data["locationDoctors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocationWithDoctors {
    locationId: number;
    locationName?: string | null;
    locationDoctors?: IDoctorDO[] | null;
}

export class APIResponseOfTriageBookingAppointmentDO extends ProvideErrorMessage implements IAPIResponseOfTriageBookingAppointmentDO {
    data?: TriageBookingAppointmentDO | null;

    constructor(data?: IAPIResponseOfTriageBookingAppointmentDO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? TriageBookingAppointmentDO.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfTriageBookingAppointmentDO {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfTriageBookingAppointmentDO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfTriageBookingAppointmentDO extends IProvideErrorMessage {
    data?: ITriageBookingAppointmentDO | null;
}

export class AddOrUpdateTriageBookingParams extends BaseRequestParams implements IAddOrUpdateTriageBookingParams {
    triage_ID!: number;
    patient_ID!: number;
    dateTimeStart!: Date;
    dateTimeEnd!: Date;
    duration!: number;
    bookingType?: string | null;
    triageStatus?: string | null;
    location_ID?: number | null;
    room_ID?: number | null;
    drIDBooked?: number | null;
    note_ID?: number | null;
    provNum_ID?: number | null;
    associate?: number | null;
    triageOptions?: number | null;
    dateTimeArrived?: Date | null;
    userArrived?: string | null;
    deleted!: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    triageIncrement!: number;
    workflowStep?: string | null;

    constructor(data?: IAddOrUpdateTriageBookingParams) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.triage_ID = data["triage_ID"] !== undefined ? data["triage_ID"] : <any>null;
            this.patient_ID = data["patient_ID"] !== undefined ? data["patient_ID"] : <any>null;
            this.dateTimeStart = data["dateTimeStart"] ? new Date(data["dateTimeStart"].toString()) : <any>null;
            this.dateTimeEnd = data["dateTimeEnd"] ? new Date(data["dateTimeEnd"].toString()) : <any>null;
            this.duration = data["duration"] !== undefined ? data["duration"] : <any>null;
            this.bookingType = data["bookingType"] !== undefined ? data["bookingType"] : <any>null;
            this.triageStatus = data["triageStatus"] !== undefined ? data["triageStatus"] : <any>null;
            this.location_ID = data["location_ID"] !== undefined ? data["location_ID"] : <any>null;
            this.room_ID = data["room_ID"] !== undefined ? data["room_ID"] : <any>null;
            this.drIDBooked = data["drIDBooked"] !== undefined ? data["drIDBooked"] : <any>null;
            this.note_ID = data["note_ID"] !== undefined ? data["note_ID"] : <any>null;
            this.provNum_ID = data["provNum_ID"] !== undefined ? data["provNum_ID"] : <any>null;
            this.associate = data["associate"] !== undefined ? data["associate"] : <any>null;
            this.triageOptions = data["triageOptions"] !== undefined ? data["triageOptions"] : <any>null;
            this.dateTimeArrived = data["dateTimeArrived"] ? new Date(data["dateTimeArrived"].toString()) : <any>null;
            this.userArrived = data["userArrived"] !== undefined ? data["userArrived"] : <any>null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : <any>null;
            this.deletionDate = data["deletionDate"] ? new Date(data["deletionDate"].toString()) : <any>null;
            this.deletionUser = data["deletionUser"] !== undefined ? data["deletionUser"] : <any>null;
            this.userCreated = data["userCreated"] !== undefined ? data["userCreated"] : <any>null;
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>null;
            this.userLastModified = data["userLastModified"] !== undefined ? data["userLastModified"] : <any>null;
            this.dateLastModified = data["dateLastModified"] ? new Date(data["dateLastModified"].toString()) : <any>null;
            this.triageIncrement = data["triageIncrement"] !== undefined ? data["triageIncrement"] : <any>null;
            this.workflowStep = data["workflowStep"] !== undefined ? data["workflowStep"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateTriageBookingParams {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTriageBookingParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["triage_ID"] = this.triage_ID !== undefined ? this.triage_ID : <any>null;
        data["patient_ID"] = this.patient_ID !== undefined ? this.patient_ID : <any>null;
        data["dateTimeStart"] = this.dateTimeStart ? this.dateTimeStart.toISOString() : <any>null;
        data["dateTimeEnd"] = this.dateTimeEnd ? this.dateTimeEnd.toISOString() : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["bookingType"] = this.bookingType !== undefined ? this.bookingType : <any>null;
        data["triageStatus"] = this.triageStatus !== undefined ? this.triageStatus : <any>null;
        data["location_ID"] = this.location_ID !== undefined ? this.location_ID : <any>null;
        data["room_ID"] = this.room_ID !== undefined ? this.room_ID : <any>null;
        data["drIDBooked"] = this.drIDBooked !== undefined ? this.drIDBooked : <any>null;
        data["note_ID"] = this.note_ID !== undefined ? this.note_ID : <any>null;
        data["provNum_ID"] = this.provNum_ID !== undefined ? this.provNum_ID : <any>null;
        data["associate"] = this.associate !== undefined ? this.associate : <any>null;
        data["triageOptions"] = this.triageOptions !== undefined ? this.triageOptions : <any>null;
        data["dateTimeArrived"] = this.dateTimeArrived ? this.dateTimeArrived.toISOString() : <any>null;
        data["userArrived"] = this.userArrived !== undefined ? this.userArrived : <any>null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : <any>null;
        data["deletionDate"] = this.deletionDate ? this.deletionDate.toISOString() : <any>null;
        data["deletionUser"] = this.deletionUser !== undefined ? this.deletionUser : <any>null;
        data["userCreated"] = this.userCreated !== undefined ? this.userCreated : <any>null;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>null;
        data["userLastModified"] = this.userLastModified !== undefined ? this.userLastModified : <any>null;
        data["dateLastModified"] = this.dateLastModified ? this.dateLastModified.toISOString() : <any>null;
        data["triageIncrement"] = this.triageIncrement !== undefined ? this.triageIncrement : <any>null;
        data["workflowStep"] = this.workflowStep !== undefined ? this.workflowStep : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTriageBookingParams extends IBaseRequestParams {
    triage_ID: number;
    patient_ID: number;
    dateTimeStart: Date;
    dateTimeEnd: Date;
    duration: number;
    bookingType?: string | null;
    triageStatus?: string | null;
    location_ID?: number | null;
    room_ID?: number | null;
    drIDBooked?: number | null;
    note_ID?: number | null;
    provNum_ID?: number | null;
    associate?: number | null;
    triageOptions?: number | null;
    dateTimeArrived?: Date | null;
    userArrived?: string | null;
    deleted: boolean;
    deletionDate?: Date | null;
    deletionUser?: string | null;
    userCreated?: string | null;
    dateCreated?: Date | null;
    userLastModified?: string | null;
    dateLastModified?: Date | null;
    triageIncrement: number;
    workflowStep?: string | null;
}

export class AddOrUpdateTriageBooking extends AddOrUpdateTriageBookingParams implements IAddOrUpdateTriageBooking {

    constructor(data?: IAddOrUpdateTriageBooking) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateTriageBooking {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTriageBooking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTriageBooking extends IAddOrUpdateTriageBookingParams {
}

export class APIResponseOfAddOrUpdateTriageBookingResult extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateTriageBookingResult {
    data?: AddOrUpdateTriageBookingResult | null;

    constructor(data?: IAPIResponseOfAddOrUpdateTriageBookingResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateTriageBookingResult.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateTriageBookingResult {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateTriageBookingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateTriageBookingResult extends IProvideErrorMessage {
    data?: IAddOrUpdateTriageBookingResult | null;
}

export class AddOrUpdateTriageBookingResult extends ProvideErrorMessage implements IAddOrUpdateTriageBookingResult {
    triage_ID!: number;

    constructor(data?: IAddOrUpdateTriageBookingResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.triage_ID = data["triage_ID"] !== undefined ? data["triage_ID"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateTriageBookingResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateTriageBookingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["triage_ID"] = this.triage_ID !== undefined ? this.triage_ID : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateTriageBookingResult extends IProvideErrorMessage {
    triage_ID: number;
}

export class APIResponseOfGetWindowLayoutResponse extends ProvideErrorMessage implements IAPIResponseOfGetWindowLayoutResponse {
    data?: GetWindowLayoutResponse | null;

    constructor(data?: IAPIResponseOfGetWindowLayoutResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? GetWindowLayoutResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfGetWindowLayoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfGetWindowLayoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfGetWindowLayoutResponse extends IProvideErrorMessage {
    data?: IGetWindowLayoutResponse | null;
}

export class GetWindowLayoutResponse extends ProvideErrorMessage implements IGetWindowLayoutResponse {
    found!: boolean;
    layoutInformation?: LayoutInfo | null;

    constructor(data?: IGetWindowLayoutResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.found = data["found"] !== undefined ? data["found"] : <any>null;
            this.layoutInformation = data["layoutInformation"] ? LayoutInfo.fromJS(data["layoutInformation"]) : <any>null;
        }
    }

    static fromJS(data: any): GetWindowLayoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetWindowLayoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["found"] = this.found !== undefined ? this.found : <any>null;
        data["layoutInformation"] = this.layoutInformation ? this.layoutInformation.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetWindowLayoutResponse extends IProvideErrorMessage {
    found: boolean;
    layoutInformation?: ILayoutInfo | null;
}

export class LayoutInfo implements ILayoutInfo {
    location!: Point;
    size!: Size;
    formWindowState!: FormWindowState;

    constructor(data?: ILayoutInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.location = data.location && !(<any>data.location).toJSON ? new Point(data.location) : <Point>this.location; 
            this.size = data.size && !(<any>data.size).toJSON ? new Size(data.size) : <Size>this.size; 
        }
        if (!data) {
            this.location = new Point();
            this.size = new Size();
        }
    }

    init(data?: any) {
        if (data) {
            this.location = data["location"] ? Point.fromJS(data["location"]) : new Point();
            this.size = data["size"] ? Size.fromJS(data["size"]) : new Size();
            this.formWindowState = data["formWindowState"] !== undefined ? data["formWindowState"] : <any>null;
        }
    }

    static fromJS(data: any): LayoutInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LayoutInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location ? this.location.toJSON() : <any>null;
        data["size"] = this.size ? this.size.toJSON() : <any>null;
        data["formWindowState"] = this.formWindowState !== undefined ? this.formWindowState : <any>null;
        return data; 
    }
}

export interface ILayoutInfo {
    location: IPoint;
    size: ISize;
    formWindowState: FormWindowState;
}

export class Point implements IPoint {
    x!: number;
    y!: number;

    constructor(data?: IPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.x = data["x"] !== undefined ? data["x"] : <any>null;
            this.y = data["y"] !== undefined ? data["y"] : <any>null;
        }
    }

    static fromJS(data: any): Point {
        data = typeof data === 'object' ? data : {};
        let result = new Point();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        return data; 
    }
}

export interface IPoint {
    x: number;
    y: number;
}

export class Size implements ISize {
    width!: number;
    height!: number;

    constructor(data?: ISize) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.width = data["width"] !== undefined ? data["width"] : <any>null;
            this.height = data["height"] !== undefined ? data["height"] : <any>null;
        }
    }

    static fromJS(data: any): Size {
        data = typeof data === 'object' ? data : {};
        let result = new Size();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        return data; 
    }
}

export interface ISize {
    width: number;
    height: number;
}

export enum FormWindowState {
    Normal = 0, 
    Minimized = 1, 
    Maximized = 2, 
}

export class AddOrUpdateWindowLayoutRequest extends CorrelatableRequestParams implements IAddOrUpdateWindowLayoutRequest {
    token?: string | null;
    url?: string | null;
    screenPrefix?: string | null;
    layoutInformation?: LayoutInfo | null;

    constructor(data?: IAddOrUpdateWindowLayoutRequest) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
            this.url = data["url"] !== undefined ? data["url"] : <any>null;
            this.screenPrefix = data["screenPrefix"] !== undefined ? data["screenPrefix"] : <any>null;
            this.layoutInformation = data["layoutInformation"] ? LayoutInfo.fromJS(data["layoutInformation"]) : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateWindowLayoutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateWindowLayoutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["screenPrefix"] = this.screenPrefix !== undefined ? this.screenPrefix : <any>null;
        data["layoutInformation"] = this.layoutInformation ? this.layoutInformation.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateWindowLayoutRequest extends ICorrelatableRequestParams {
    token?: string | null;
    url?: string | null;
    screenPrefix?: string | null;
    layoutInformation?: ILayoutInfo | null;
}

export class AddOrUpdateWindowLayout extends AddOrUpdateWindowLayoutRequest implements IAddOrUpdateWindowLayout {

    constructor(data?: IAddOrUpdateWindowLayout) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): AddOrUpdateWindowLayout {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateWindowLayout();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateWindowLayout extends IAddOrUpdateWindowLayoutRequest {
}

export class APIResponseOfAddOrUpdateWindowLayoutResponse extends ProvideErrorMessage implements IAPIResponseOfAddOrUpdateWindowLayoutResponse {
    data?: AddOrUpdateWindowLayoutResponse | null;

    constructor(data?: IAPIResponseOfAddOrUpdateWindowLayoutResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.data = data["data"] ? AddOrUpdateWindowLayoutResponse.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): APIResponseOfAddOrUpdateWindowLayoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new APIResponseOfAddOrUpdateWindowLayoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAPIResponseOfAddOrUpdateWindowLayoutResponse extends IProvideErrorMessage {
    data?: IAddOrUpdateWindowLayoutResponse | null;
}

export class AddOrUpdateWindowLayoutResponse extends ProvideErrorMessage implements IAddOrUpdateWindowLayoutResponse {
    saved!: boolean;

    constructor(data?: IAddOrUpdateWindowLayoutResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.saved = data["saved"] !== undefined ? data["saved"] : <any>null;
        }
    }

    static fromJS(data: any): AddOrUpdateWindowLayoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateWindowLayoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saved"] = this.saved !== undefined ? this.saved : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAddOrUpdateWindowLayoutResponse extends IProvideErrorMessage {
    saved: boolean;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}